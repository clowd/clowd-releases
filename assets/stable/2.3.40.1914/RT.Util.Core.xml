<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RT.Util.Core</name>
    </assembly>
    <members>
        <member name="T:RT.KitchenSink.Channel`1">
            <summary>
                Provides a synchronized channel for communication between concurrent threads.</summary>
            <typeparam name="T">
                The type of message exchanged between threads.</typeparam>
            <remarks>
                <para>
                    The design of this class is based on the concept of channels in the Go programming language:</para>
                <list type="bullet">
                    <item><description>
                        The basic principle is to have one thread “write” (enqueue) items and another “read” (dequeue) them. The
                        writing thread can signal the end of the channel by closing it.</description></item>
                    <item><description>
                        Any number of threads can write to a channel. However, a master thread must be responsible for closing the
                        channel; if nobody closes it, reads will block indefinitely, and if a thread attempts to write after
                        another thread closed the channel, an exception occurs.</description></item>
                    <item><description>
                        Any number of threads can read from a channel. If no item is waiting in the queue, the reading thread
                        blocks until another thread either writes an item or closes the channel.</description></item>
                    <item><description>
                        A closed channel can still be read from until all the enqueued elements are exhausted, at which point
                        reading from the closed channel throws. The <see cref="M:RT.KitchenSink.Channel`1.TryRead(`0@)"/> method can be used to avoid this
                        exception. Note that accessing <see cref="P:RT.KitchenSink.Channel`1.HasMore"/> is not enough as another reading thread can dequeue
                        an item at any time.</description></item>
                    <item><description>
                        The easiest way to read from a channel safely is to iterate over it using a <c>foreach</c> loop. Multiple
                        threads can use such a loop simultaneously; doing so will “spread” the items across the threads. The
                        <c>foreach</c> loops all end when the channel is closed and all elements are
                        exhausted.</description></item></list></remarks>
        </member>
        <member name="M:RT.KitchenSink.Channel`1.Write(`0)">
            <summary>
                Writes an element to the channel.</summary>
            <remarks>
                If there are threads waiting to read an element, one is resumed and receives this element.</remarks>
        </member>
        <member name="M:RT.KitchenSink.Channel`1.Read">
            <summary>
                Reads an element from the channel. If no element is waiting to be read, blocks until an element is received or
                the channel is closed.</summary>
            <returns>
                The element read from the channel.</returns>
            <remarks>
                If multiple threads call this method to wait for elements, each element is received by only one thread.</remarks>
            <exception cref="T:System.InvalidOperationException">
                The end of the channel has been reached. There are no more elements waiting.</exception>
        </member>
        <member name="M:RT.KitchenSink.Channel`1.TryRead(`0@)">
            <summary>
                Determines whether an element can be read from the channel and if so, reads it. If no element is waiting to be
                read, blocks until an element is received or the channel is closed.</summary>
            <param name="result">
                Receives the element read from the channel (or <c>default(T)</c> if the end of the channel is reached).</param>
            <returns>
                <c>true</c> if an element has been read from the channel; <c>false</c> if the end of the channel is reached.</returns>
            <remarks>
                If multiple threads call this method to wait for elements, each element is received by only one thread.</remarks>
        </member>
        <member name="M:RT.KitchenSink.Channel`1.Close">
            <summary>
                Signals the end of the channel. Threads can still read elements waiting in the channel, but no further
                elements can be written to it.</summary>
        </member>
        <member name="P:RT.KitchenSink.Channel`1.HasMore">
            <summary>
                Determines whether the channel contains more items.</summary>
            <remarks>
                <para>
                    Blocks until the determination can be made.</para>
                <para>
                    In most cases, this method is only useful if there is only one reading thread. If there are multiple, then
                    even after this method returns <c>true</c>, another thread can consume the item before this thread can get
                    to it. Only if this method returns <c>false</c> can there be no such race condition.</para></remarks>
        </member>
        <member name="M:RT.KitchenSink.Channel`1.GetEnumerator">
            <summary>
                Returns an enumerator that allows safe reading from this channel. Multiple threads can call this to iterate
                over the channel; the items from the channel are spread across those threads.</summary>
            <remarks>
                The safest way to use this is with a <c>foreach</c> loop.</remarks>
        </member>
        <member name="T:RT.KitchenSink.Collections.LazyList`1">
            <summary>
            Exposes an IEnumerable&lt;T&gt; as an IList&lt;T&gt;, enabling buffering of and indexing into the elements
            generated by the enumerable, while still ensuring that the enumerable is enumerated in a lazy fashion,
            only as required, and at most once. This collection is read-only, and all write-related methods throw a
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">Type of the elements in the enumeration.</typeparam>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="enumerable">The enumerable to be lazily converted to a list.</param>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.Dispose">
            <summary>
            Disposes of the enumerable's enumerator, if one is held at the moment.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.IndexInRange(System.Int32)">
            <summary>
            Checks whether the specified index is a valid index, i.e. not out-of-range.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.LazyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.LazyList`1.Count">
            <summary>
            Gets the number of elements. Note that this method will have to enumerate the underlying
            enumerable in full.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.LazyList`1.IsReadOnly">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.Contains(`0)">
            <summary>Determines whether an element is in the list.</summary>
            <param name="item">The object to locate in the list. The value can be null for reference types.</param>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.GetEnumerator">
            <summary>
            Returns an enumerator for the collection. Warning: This enumerates the underlying collection completely before returning.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all elements to the specified array starting at the specified index.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.LazyList`1.IndexOf(`0)">
            <summary>Returns the index of the specified item, or -1 if the item is not found.</summary>
            <param name="item">The item to find in the collection.</param>
            <remarks>The underlying collection is enumerated until the item is found, or fully if the item is not in it.</remarks>
        </member>
        <member name="T:RT.KitchenSink.Collections.PartialComparisonResult">
            <summary>
            Represents the result of a partial comparison.
            </summary>
        </member>
        <member name="F:RT.KitchenSink.Collections.PartialComparisonResult.NA">
            <summary>The items cannot be compared.</summary>
        </member>
        <member name="F:RT.KitchenSink.Collections.PartialComparisonResult.Greater">
            <summary>The first item is greater than the second item.</summary>
        </member>
        <member name="F:RT.KitchenSink.Collections.PartialComparisonResult.Less">
            <summary>The first item is less than the second item.</summary>
        </member>
        <member name="F:RT.KitchenSink.Collections.PartialComparisonResult.Equal">
            <summary>The items are equal to each other.</summary>
        </member>
        <member name="T:RT.KitchenSink.Collections.IPartialComparable`1">
            <summary>
            Implemented by items which support partial comparison.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.IPartialComparable`1.PartialCompareTo(`0)">
            <summary>
            Compares this item to the other item.
            </summary>
        </member>
        <member name="T:RT.KitchenSink.Collections.PosetNode`1">
            <summary>
            Represents a node in the poset graph. A node represents a single equivalence class,
            and maintains two sets of links to nearby nodes - specifically, those representing
            the just-larger and the just-smaller equivalence classes.
            </summary>
            <typeparam name="T">The type of the elements to be stored. Must implement <see cref="T:RT.KitchenSink.Collections.IPartialComparable`1"/></typeparam>
        </member>
        <member name="F:RT.KitchenSink.Collections.PosetNode`1._largers">
            <summary>Stores a set of all nodes which are just-larger than this one. DO NOT CHANGE!</summary>
        </member>
        <member name="F:RT.KitchenSink.Collections.PosetNode`1._smallers">
            <summary>Stores a set of all nodes which are just-smaller than this one. DO NOT CHANGE!</summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.PosetNode`1.Largers">
            <summary>Gets a read-only collection of all nodes which are just-larger than this one.</summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.PosetNode`1.Smallers">
            <summary>Gets a read-only collection of all nodes which are just-smaller than this one.</summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.PosetNode`1.#ctor(`0,`0[])">
            <summary>
            Creates a new node and initialises it with the single element. A node is only
            permitted to exist if it contains at least one element.
            </summary>
            <param name="element">An element to store in this node. This determines the equivalence
            class, and it will not be possible to add further elements not equal to this one.</param>
            <param name="elements">Any additional elements to add to the node.</param>
        </member>
        <member name="M:RT.KitchenSink.Collections.PosetNode`1.AddElement(`0)">
            <summary>
            Adds the specified element to this node. The element must be from the same equivalence
            class as those elements already in the node, otherwise <see cref="T:System.ArgumentException"/> is thrown.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.PosetNode`1.Elements">
            <summary>
            Exposes a read-only collection of the elements comprising this equivalence class.
            To add more elements, use <see cref="M:RT.KitchenSink.Collections.PosetNode`1.AddElement(`0)"/>
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.PosetNode`1.ToString">
            <summary>
            Returns a string enumerating all the elements stored in the node, separated by a comma.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.PosetNode`1.PartialCompareTo(RT.KitchenSink.Collections.PosetNode{`0})">
            <summary>
            Compares this node to the other node, using the partial comparison implemented
            by the elements stored in the two nodes.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.PosetNode`1.PartialCompareTo(`0)">
            <summary>
            Compares this node to the specified element, using the partial comparison implemented
            by the elements stored in the two nodes.
            </summary>
        </member>
        <member name="T:RT.KitchenSink.Collections.Poset`1">
            <summary>
            Maintains a poset of all partially comparable elements added to this collection.
            Two DAGs are maintained - one starting from all the minimal elements towards the largest elements,
            and the other starting from the maximal elements.
            </summary>
            <typeparam name="T">The type of the elements to be stored. Must implement <see cref="T:RT.KitchenSink.Collections.IPartialComparable`1"/></typeparam>
        </member>
        <member name="P:RT.KitchenSink.Collections.Poset`1.Minimals">
            <summary>
            Gets the set of all minimal elements in the poset.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.Collections.Poset`1.Maximals">
            <summary>
            Gets the set of all maximal elements in the poset.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.Poset`1.Add(`0)">
            <summary>
            Adds an element to the poset. If available, the element will be added to an existing
            equivalence class (node), otherwise a new one will be created, and the DAGs will be
            updated as appropriate.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.Poset`1.FindEqual(`0)">
            <summary>
            Finds the node containing elements from the same equivalence class as <paramref name="element"/>.
            Returns null if none are found.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Collections.Poset`1.VerifyConsistency">
            <summary>
            Performs a bunch of tests to make sure the DAGs are in a consistent state. Very slow;
            only use when debugging and suspecting a bug in Poset.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Ks.RunCostreams(System.Action{System.IO.Stream},System.Action{System.IO.Stream})">
            <summary>Runs the two specified processes in parallel, allowing one to generate data by writing it to a stream, and the other to consume the data by reading it from a stream.</summary>
            <param name="writingAction">An action that generates data and writes it to a stream.</param>
            <param name="readingAction">An action that will want to read information from a stream.</param>
        </member>
        <member name="T:RT.KitchenSink.DecodeSvgPath">
            <summary>Provides methods to parse the syntax used in SVG path data.</summary>
        </member>
        <member name="T:RT.KitchenSink.DecodeSvgPath.PathPiece">
            <summary>Encapsulates a piece of SVG path data.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPiece.Type">
            <summary>The type of piece (straight line, curve, etc.)</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPiece.Points">
            <summary>The set of points associated with this piece.</summary>
        </member>
        <member name="F:RT.KitchenSink.DecodeSvgPath.PathPiece.End">
            <summary>Designates the end of a path or subpath.</summary>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPiece.#ctor(RT.KitchenSink.DecodeSvgPath.PathPieceType,RT.Util.Geometry.PointD[])">
            <summary>
                Constructor.</summary>
            <param name="type">
                Type of path piece.</param>
            <param name="points">
                Set of points.</param>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPiece.ToString">
            <summary>Recreates the path in SVG path data syntax.</summary>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPiece.ToString(System.Int32)">
            <summary>
                Recreates the path in SVG path data syntax.</summary>
            <param name="decimalPlaces">
                Specifies the number of decimal places to use for the floating-point numbers.</param>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPiece.Select(System.Func{RT.Util.Geometry.PointD,RT.Util.Geometry.PointD})">
            <summary>
                Returns a new <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPiece"/> of the same <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPieceType"/> in which all points have
                been mapped through the <paramref name="selector"/>.</summary>
            <param name="selector">
                A function to pass all points through.</param>
            <returns>
                A new <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPiece"/> of the same <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPieceType"/>.</returns>
        </member>
        <member name="T:RT.KitchenSink.DecodeSvgPath.PathPieceArc">
            <summary>Encapsulates an elliptical arc in SVG path data.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPieceArc.RX">
            <summary>X radius of the ellipse.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPieceArc.RY">
            <summary>Y radius of the ellipse.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPieceArc.XAxisRotation">
            <summary>Rotation (in degrees, clockwise) of the ellipse.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPieceArc.LargeArcFlag">
            <summary>Determines if the arc should be greater than or less than 180 degrees.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPieceArc.SweepFlag">
            <summary>Determines if the arc should begin moving at positive angles or negative ones.</summary>
        </member>
        <member name="P:RT.KitchenSink.DecodeSvgPath.PathPieceArc.EndPoint">
            <summary>
                Returns the arc’s end-point.</summary>
            <remarks>
                This is actually just <see cref="P:RT.KitchenSink.DecodeSvgPath.PathPiece.Points"/>[0].</remarks>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPieceArc.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Boolean,RT.Util.Geometry.PointD)">
            <summary>Constructor</summary>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPieceArc.ToString">
            <summary>Recreates the path in SVG path data syntax.</summary>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.PathPieceArc.Select(System.Func{RT.Util.Geometry.PointD,RT.Util.Geometry.PointD})">
            <summary>
                Returns a new <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPiece"/> of the same <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPieceType"/> in which all points have
                been mapped through the <paramref name="selector"/>.</summary>
            <param name="selector">
                A function to pass all points through.</param>
            <returns>
                A new <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPiece"/> of the same <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPieceType"/>.</returns>
        </member>
        <member name="T:RT.KitchenSink.DecodeSvgPath.PathPieceType">
            <summary>Specifies a type of piece within an SVG path.</summary>
        </member>
        <member name="F:RT.KitchenSink.DecodeSvgPath.PathPieceType.Move">
            <summary>
                Moves to a new point without drawing a line. This is usually used only at the start of a subpath (i.e., at
                the start of a path or after an <see cref="F:RT.KitchenSink.DecodeSvgPath.PathPieceType.End"/>).</summary>
        </member>
        <member name="F:RT.KitchenSink.DecodeSvgPath.PathPieceType.Line">
            <summary>Draws a set of straight lines connecting each point (including the last point of the previous piece).</summary>
        </member>
        <member name="F:RT.KitchenSink.DecodeSvgPath.PathPieceType.Curve">
            <summary>
                Draws a set of Bézier curves. The length of the <see cref="P:RT.KitchenSink.DecodeSvgPath.PathPiece.Points"/> array is a multiple of
                three (two control points and an end-point). The first start point is the last point of the previous
                piece.</summary>
        </member>
        <member name="F:RT.KitchenSink.DecodeSvgPath.PathPieceType.Arc">
            <summary>Draws an elliptical arc.</summary>
        </member>
        <member name="F:RT.KitchenSink.DecodeSvgPath.PathPieceType.End">
            <summary>Designates the end of a path or subpath.</summary>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.Do(System.Collections.Generic.IEnumerable{RT.KitchenSink.DecodeSvgPath.PathPiece},System.Double)">
            <summary>
                Converts a sequence of <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPiece"/> objects to a sequence of points using the specified <paramref
                name="bézierSmoothness"/> to render Bézier curves.</summary>
            <param name="pieces">
                The pieces that constitute the path.</param>
            <param name="bézierSmoothness">
                A value indicating the maximum amount by which each Bézier curve is allowed to be approximated. The smaller
                this value, the more points are generated for each Bézier curve.</param>
            <returns>
                A sequence of points that represent the fully rendered path.</returns>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.Do(System.String,System.Double)">
            <summary>
                Converts a string containing SVG path data to a sequence of points using the specified <paramref
                name="bézierSmoothness"/> to render Bézier curves.</summary>
            <param name="svgPath">
                The SVG path data.</param>
            <param name="bézierSmoothness">
                A value indicating the maximum amount by which each Bézier curve is allowed to be approximated. The smaller
                this value, the more points are generated for each Bézier curve.</param>
            <returns>
                A sequence of points that represent the fully rendered path.</returns>
        </member>
        <member name="M:RT.KitchenSink.DecodeSvgPath.DecodePieces(System.String)">
            <summary>
                Converts a string containing SVG path data to a sequence of <see cref="T:RT.KitchenSink.DecodeSvgPath.PathPiece"/> objects.</summary>
            <param name="svgPath">
                SVG path data to parse.</param>
        </member>
        <member name="M:RT.KitchenSink.Lex.Token.Parser.ParseToken(RT.KitchenSink.Lex.LexReader)">
            <summary>
            Parses the next token of a specific kind from the lex reader. Implementations must do one of the following:
            <list type="bullet">
              <item>return null if the reader does not appear to contain this kind of token at the current location - while leaving the reader where it is</item>
              <item>return a parsed token instance, advancing the reader to just after the parsed token</item>
              <item>throw a <see cref="T:RT.KitchenSink.Lex.LexException"/> with a detailed description of the problem</item>
            </list>
            </summary>
        </member>
        <member name="T:RT.KitchenSink.RateCalculator">
            <summary>Calculates the rate of arriving "stuff" over time.</summary>
        </member>
        <member name="P:RT.KitchenSink.RateCalculator.Scale">
            <summary>Larger values average over longer time intervals.</summary>
        </member>
        <member name="P:RT.KitchenSink.RateCalculator.Rate">
            <summary>Gets the average rate of "stuff" arrival per second.</summary>
        </member>
        <member name="M:RT.KitchenSink.RateCalculator.Count(System.Double)">
            <summary>Updates the rate by adding statistics about the next installment of "stuff" arriving at the current time.</summary>
        </member>
        <member name="T:RT.KitchenSink.Streams.ControlCodedStream">
            <summary>
            Implements a stream which enables control codes to be read from or written to the underlying stream at
            certain points. This stream handles encoding and decoding the control codes and ensuring they are distinguishable
            from the payload data. See Remarks.
            </summary>
            <remarks>
            This stream does not support seeking because of the variable length nature of the data between control points.
            Seeking directly on the underlying stream must be avoided, since seeking into the middle of an escape sequence
            will result in incorrect data being read.
            </remarks>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.#ctor(RT.KitchenSink.Streams.PeekableStream)">
            <summary>Constructor.</summary>
            <param name="underlyingStream">The underlying stream on which all operations are to be performed.</param>
        </member>
        <member name="P:RT.KitchenSink.Streams.ControlCodedStream.CanWrite">
            <summary>Indicates whether the underlying stream, and hence this stream, supports writing.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.ControlCodedStream.CanRead">
            <summary>Indicates whether the underlying stream, and hence this stream, supports reading.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.ControlCodedStream.CanSeek">
            <summary>Always returns false.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.Flush">
            <summary>Flushes the underlying stream.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.ControlCodedStream.Length">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.SetLength(System.Int64)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.ControlCodedStream.Position">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.WriteControlCode(System.Byte)">
            <summary>Writes the specified control code to the stream.</summary>
            <param name="code">The code to write. Valid values are 0..254; 255 is reserved.</param>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.ReadControlCode">
            <summary>
            Reads a control code from the stream at the current position. If there is no control code at the current position,
            returns <c>-1</c>. Otherwise returns the code read. Throws <see cref="T:System.IO.EndOfStreamException"/> if the stream ends in
            the middle of a control code.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.ControlCodedStream.IsEnded">
            <summary>
            Determines if the stream has ended. Note that this method may block, potentially indefinitely, in cases where
            it isn't known yet if the stream has ended (for example, a NetworkStream for a socket that is idle but not closed).
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes the specified data to the underlying stream.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ControlCodedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to <paramref name="count"/> bytes into the buffer from the underlying stream. If a control code
            is encountered before any data has been read, will throw an <see cref="T:System.InvalidOperationException"/>. If some
            data has already been read upon encountering a control code, will stop and return all the data read up to the control code.
            </summary>
            <returns>The number of bytes actually read. Returns zero if the stream was ended when the read started, or if <paramref name="count"/> was zero.</returns>
        </member>
        <member name="T:RT.KitchenSink.Streams.PeekableStream">
            <summary>
            Implements a stream that exposes methods to transparently peek at the bytes that would be read by a call to <see cref="M:RT.KitchenSink.Streams.PeekableStream.Read(System.Byte[],System.Int32,System.Int32)"/>,
            without affecting the actual outcome of future calls to standard Stream methods. See Remarks for further info.
            </summary>
            <remarks>
            <para>In order for this stream to operate correctly, no direct reads, writes or seeks must be performed on the
            underlying stream. All operations must be executed through this class.</para>
            <para>Peeking will cause reads in the underlying stream, but this class ensures that the data is read only once,
            in order to be compatible with pure (read-once, non-seekable) streams.</para>
            <para>The class maintains that any operations on the streams returned by <see cref="M:RT.KitchenSink.Streams.PeekableStream.GetPeekStream"/> do not modify
            the outcome of any other operations performed on this stream, including the value of <see cref="P:RT.KitchenSink.Streams.PeekableStream.Position"/>, the bytes
            read by <see cref="M:RT.KitchenSink.Streams.PeekableStream.Read(System.Byte[],System.Int32,System.Int32)"/>, or the effects of <see cref="M:RT.KitchenSink.Streams.PeekableStream.Write(System.Byte[],System.Int32,System.Int32)"/>. One visible side effect may be the change in chunk
            size returned by a single call to <see cref="M:RT.KitchenSink.Streams.PeekableStream.Read(System.Byte[],System.Int32,System.Int32)"/>. This assumes that if the underlying stream is seekable then nothing
            else changes the data stored in it.</para>
            <para>Neither this class nor the peek streams returned by it are thread-safe. All accesses must occur on a single thread.</para>
            </remarks>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.#ctor(System.IO.Stream)">
            <summary>Constructor.</summary>
            <param name="underlyingStream">The underlying stream on which all operations are to be performed.</param>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.Dispose(System.Boolean)">
            <summary>Disposes of this stream, the underlying stream and any associated peek streams.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.CanWrite">
            <summary>Indicates whether the underlying stream, and hence this stream, supports writing.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.CanRead">
            <summary>Indicates whether the underlying stream, and hence this stream, supports reading.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.CanSeek">
            <summary>Indicates whether the underlying stream, and hence this stream, supports seeking.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.Flush">
            <summary>Flushes the underlying stream.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.Length">
            <summary>Gets the length of the underlying stream, if supported by it.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.SetLength(System.Int64)">
            <summary>Sets the length of the underlying stream, if supported by it. Note that setting the length causes
            all peek streams to be invalidated.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.Position">
            <summary>
            Gets or sets the current position in the stream, if supported by the underlying stream. Note that
            seeking causes all peek streams to be reset so as to resume peeking from the point seeked to.
            Note also that getting the current position requires a small amount of computation and should be used with care in tight loops.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to the specified position in the underlying stream, if the underlying stream supports it. Note that
            seeking causes all peek streams to be invalidated.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the underlying stream. See Remarks for notes concerning seekable underlying streams.
            If the underlying stream is not seekable, writes are assumed to be separate to reads and thus peeks, so
            the peek streams aren't touched.
            </summary>
            <remarks>
            <para>Notes for seekable underlying streams:</para>
            <para>The write will occur at the current position regardless of how much the peek streams have peeked.</para>
            <para>All peek streams will be invalidated.</para>
            </remarks>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream into the specified buffer. Advances all peek streams that got overtaken by the
            new stream position so as to continue reading from //
            </summary>
            <returns>Number of bytes actually read. Zero if called on a stream that has already ended, or if <paramref name="count"/> was zero.</returns>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.Skip(System.Int32)">
            <summary>Behaves like Read, except that the bytes are discarded.</summary>
            <param name="count">Maximum number of bytes to skip.</param>
            <returns>Number of bytes actually skipped. Zero if called on a stream that has already ended, or if <paramref name="count"/> was zero.</returns>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.SkipExactly(System.Int32)">
            <summary>Skips the specified number of bytes in the current stream, and throws <see cref="T:System.IO.EndOfStreamException"/>
            if the end of the stream is reached early.</summary>
            <param name="count">Number of bytes to skip.</param>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.GetPeekStream">
            <summary>
            <para>Creates and returns a new peek stream linked to this stream. Reading from the returned stream allows
            peeking at the bytes ahead of the current position in this stream, without changing the outcome of future
            calls to any methods on this stream.</para>
            <para>The returned stream must be disposed of when done, since outstanding undisposed peek streams have a slight
            performance impact on most operations on this peekable stream.</para>
            <para>See Remarks on <see cref="T:RT.KitchenSink.Streams.PeekableStream"/> for more info.</para>
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.clearPeekBuffersAndInvalidate">
            <summary>Clears the peek buffers and invalidates all peek streams.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.peekIntoBuffers(System.Int32)">
            <summary>
            Reads at most the specified number of bytes into the peek buffers and updates all peek streams which had
            run out of peek buffers. Doesn't change anything if the stream has ended or <paramref name="count"/> was zero.
            </summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.removeFromBuffers(System.Int32)">
            <summary>
            Removes exactly the specified number of bytes from the start of the peek buffers. Advances all peek streams
            that got overtaken to resume peeking from the next unremoved byte, if available. If there aren't enough bytes
            left in the peek buffers, removes all the available bytes.
            </summary>
            <returns>The actual number of bytes removed (which is always the requested count unless the buffers became completely emptied).</returns>
        </member>
        <member name="T:RT.KitchenSink.Streams.PeekableStream.PeekStream">
            <summary>
            Reads on this stream are implemented as peeking into the parent stream. That is, the position of the parent stream
            is unaffected when this stream is used to peek ahead of the current position in the parent stream.
            </summary>
        </member>
        <member name="F:RT.KitchenSink.Streams.PeekableStream.PeekStream._parent">
            <summary>The <see cref="T:RT.KitchenSink.Streams.PeekableStream"/> that this peek stream belongs to.</summary>
        </member>
        <member name="F:RT.KitchenSink.Streams.PeekableStream.PeekStream._buffer">
            <summary>The buffer of the <see cref="F:RT.KitchenSink.Streams.PeekableStream.PeekStream._parent"/> in which this stream is currently positioned.</summary>
        </member>
        <member name="F:RT.KitchenSink.Streams.PeekableStream.PeekStream._offset">
            <summary>Current position of the peek stream within the current <see cref="F:RT.KitchenSink.Streams.PeekableStream.PeekStream._buffer"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.PeekStream.Dispose(System.Boolean)">
            <summary>Disposes of this stream and unregisters it from its parent.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.PeekStream.CanRead">
            <summary>Always returns true.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.PeekStream.CanSeek">
            <summary>Always returns false.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.PeekStream.CanWrite">
            <summary>Always returns false.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.PeekStream.Flush">
            <summary>Does nothing.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.PeekStream.Length">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.PeekStream.SetLength(System.Int64)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.PeekStream.Position">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.PeekStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.PeekStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.KitchenSink.Streams.PeekableStream.PeekStream.IsValid">
            <summary>Initially true. Whenever the parent stream's position overtakes the position of this stream, changes to
            false. In this state, attempts to read will throw an <see cref="T:System.InvalidOperationException"/> and the stream
            becomes useless.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.PeekableStream.PeekStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Peeks at most the specified number of bytes from the parent stream. Because the peek stream maintains its own
            position, subsequent calls to this method will peek further and further into the parent stream. Note however that
            direct operations on the parent's underlying stream can break the sequence, and that some calls on the parent
            stream will reset this position. All such calls are documented to this effect.
            </summary>
            <returns>The actual number of bytes peeked. Zero if called when peeked all the way to the end of the parent stream, or if <paramref name="count"/> was zero.</returns>
        </member>
        <member name="T:RT.KitchenSink.Streams.ReversePolarityStream">
            <summary>Provides functionality to create a stream object that has reading and writing reversed.</summary>
        </member>
        <member name="M:RT.KitchenSink.Streams.ReversePolarityStream.CreateFromWriter(System.Action{System.IO.Stream})">
            <summary>
                Runs the specified process in a new thread and allows it to generate data by writing it to a stream, while
                returning a stream that can be used to consume the data by reading from it.</summary>
            <param name="writer">
                An action that generates data and writes it to a stream.</param>
        </member>
        <member name="T:RT.KitchenSink.ValueStat">
            <summary>
            Incrementally accumulates basic statistics about a value, one observation at a time, making current estimates
            of the underlying distribution available at every point.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.ObservationCount">
            <summary>Gets the total number of observations so far.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.Mean">
            <summary>Gets the sample mean.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.Variance">
            <summary>Gets the current estimate of the population variance.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.VarianceUnbiased">
            <summary>Gets the current estimate of the population variance using an unbiased estimator.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.StdDev">
            <summary>Gets the current estimate of the population standard deviation.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.StdDevUnbiased">
            <summary>Gets the current estimate of the population standard deviation using an unbiased estimator.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.Min">
            <summary>Gets the smallest value observed so far.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStat.Max">
            <summary>Gets the largest value observed so far.</summary>
        </member>
        <member name="M:RT.KitchenSink.ValueStat.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.KitchenSink.ValueStat.Clear">
            <summary>Removes all observations and resets the class to its initial state.</summary>
        </member>
        <member name="M:RT.KitchenSink.ValueStat.AddObservation(System.Double)">
            <summary>Adds a new observation, updating all statistics as appropriate.</summary>
        </member>
        <member name="M:RT.KitchenSink.ValueStat.AddObservations(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Adds a number of observations, updating all statistics as appropriate. The nature of the statistics
            collected by the class enable this operation by only having similar statistics about the observations being added.</summary>
            <param name="count">Number of observations added.</param>
            <param name="mean">The sample mean of the added observations.</param>
            <param name="min">The minimum of the added observations.</param>
            <param name="max">The maximum of the added observations.</param>
            <param name="variance">The sample variance of the added observations.</param>
        </member>
        <member name="T:RT.KitchenSink.ValueStatDec">
            <summary>
            Incrementally accumulates basic statistics about a value, one observation at a time, making current estimates
            of the underlying distribution available at every point.
            </summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.ObservationCount">
            <summary>Gets the total number of observations so far.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.Mean">
            <summary>Gets the sample mean.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.Variance">
            <summary>Gets the current estimate of the population variance.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.VarianceUnbiased">
            <summary>Gets the current estimate of the population variance using an unbiased estimator.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.StdDev">
            <summary>Gets the current estimate of the population standard deviation.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.StdDevUnbiased">
            <summary>Gets the current estimate of the population standard deviation using an unbiased estimator.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.Min">
            <summary>Gets the smallest value observed so far.</summary>
        </member>
        <member name="P:RT.KitchenSink.ValueStatDec.Max">
            <summary>Gets the largest value observed so far.</summary>
        </member>
        <member name="M:RT.KitchenSink.ValueStatDec.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.KitchenSink.ValueStatDec.AddObservation(System.Decimal)">
            <summary>Adds a new observation, updating all statistics as appropriate.</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagramFlags">
            <summary>
                Provides values to specify options on the <see cref="M:RT.KitchenSink.Geometry.VoronoiDiagram.GenerateVoronoiDiagram(RT.Util.Geometry.PointD[],System.Drawing.SizeF,RT.KitchenSink.Geometry.VoronoiDiagramFlags)"/> method.</summary>
        </member>
        <member name="F:RT.KitchenSink.Geometry.VoronoiDiagramFlags.RemoveDuplicates">
            <summary>Indicates that duplicate sites (points) should be removed from the input.</summary>
        </member>
        <member name="F:RT.KitchenSink.Geometry.VoronoiDiagramFlags.RemoveOffboundsSites">
            <summary>Indicates that input sites (points) that lie outside the bounds of the viewport should be ignored.</summary>
        </member>
        <member name="F:RT.KitchenSink.Geometry.VoronoiDiagramFlags.IncludeEdgePolygons">
            <summary>
                If not specified, only polygons contained entirely within the bounds are included. Otherwise, the
                theoretically “infinite” polygons are included as polygons that are clipped to the bounding region.</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram">
            <summary>Represents a Voronoi diagram.</summary>
        </member>
        <member name="F:RT.KitchenSink.Geometry.VoronoiDiagram.Edges">
            <summary>Edges of the diagram.</summary>
        </member>
        <member name="F:RT.KitchenSink.Geometry.VoronoiDiagram.Polygons">
            <summary>Polygons corresponding to each of the input points.</summary>
        </member>
        <member name="M:RT.KitchenSink.Geometry.VoronoiDiagram.GenerateVoronoiDiagram(RT.Util.Geometry.PointD[],System.Drawing.SizeF,RT.KitchenSink.Geometry.VoronoiDiagramFlags)">
            <summary>
                Generates a Voronoi diagram from a set of input points.</summary>
            <param name="sites">
                Input points (sites) to generate diagram from.</param>
            <param name="size">
                Size of the viewport. The origin of the viewport is assumed to be at (0, 0).</param>
            <param name="flags">
                Set of <see cref="T:RT.KitchenSink.Geometry.VoronoiDiagramFlags"/> values that specifies additional options.</param>
            <returns>
                A list of line segments describing the Voronoi diagram.</returns>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram.data">
            <summary>
                Internal class to generate Voronoi diagrams using Fortune’s algorithm. Contains internal data structures and
                methods.</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram.edge">
            <summary>Internal class describing an edge in the Voronoi diagram. May be incomplete as the algorithm progresses.</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram.polygon">
            <summary>
                Internal class describing a polygon in the Voronoi diagram. May be incomplete as the algorithm progresses.</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram.arc">
            <summary>
                Internal class to describe an arc on the beachline (part of Fortune's algorithm to generate Voronoi diagrams)
                (used by RT.Util.VoronoiDiagram).</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram.siteEvent">
            <summary>
                Internal class to describe a site event (part of Fortune's algorithm to generate Voronoi diagrams) (used by
                RT.Util.VoronoiDiagram).</summary>
        </member>
        <member name="T:RT.KitchenSink.Geometry.VoronoiDiagram.circleEvent">
            <summary>
                Internal class to describe a circle event (part of Fortune's algorithm to generate Voronoi diagrams) (used by
                RT.Util.VoronoiDiagram).</summary>
        </member>
        <member name="T:RT.Util.Collections.AutoDictionary`2">
            <summary>
                Implements a dictionary with an indexer which automatically inserts missing keys on reads. In all other ways it
                behaves exactly the same as a standard dictionary.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoDictionary`2.Item(`0)">
            <summary>
                Gets or sets the element with the specified key. When getting a key that hasn't been set before, the key is
                added to the dictionary with a value returned by the initializer as configured in the constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.#ctor(System.Int32,System.Func{`0,`1})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Func{`0,`1})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Func{`0,`1})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Func{`0,`1})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0},System.Func{`0,`1})">
            <summary>Constructor.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoDictionary`2.Comparer">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoDictionary`2.Count">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoDictionary`2.Keys">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoDictionary`2.Values">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.Add(`0,`1)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.Clear">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.ContainsKey(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.ContainsValue(`1)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.GetEnumerator">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.OnDeserialization(System.Object)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.Remove(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`2.TryGetValue(`0,`1@)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="T:RT.Util.Collections.AutoDictionary`3">
            <summary>Implements a two-level <see cref="T:RT.Util.Collections.AutoDictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`3.#ctor(System.Func{`0,`1,`2})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1},System.Func{`0,`1,`2})">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.Util.Collections.AutoDictionary`4">
            <summary>Implements a three-level <see cref="T:RT.Util.Collections.AutoDictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoDictionary`4.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1},System.Collections.Generic.IEqualityComparer{`2},System.Func{`0,`1,`2,`3})">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.Util.Collections.AutoList`1">
            <summary>
                Encapsulates a list which dynamically grows as items are written to non-existent indexes. Any gaps are populated
                with default values. The behaviour of this list's indexed getter and setter is indistinguishable from that of an
                infinitely long list pre-populated by invoking the initializer function (assuming it is side-effect free). See
                Remarks.</summary>
            <remarks>
                <para>
                    Only the indexer behaviour is changed; in every other way this behaves just like a standard, non-infinite
                    list. Moreover, the implementation is such that the new behaviour is only effective when used directly through
                    the class; accessing the indexer through the <c>IList</c> interface or the <c>List</c> base class will
                    currently behave the same as it would for a standard list.</para>
                <para>
                    Note that this is not a sparse list; accessing elements at a given index will grow the list to contain all of
                    the items below the index too.</para></remarks>
        </member>
        <member name="P:RT.Util.Collections.AutoList`1.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index. The behaviour of both the getter and the setter is
                indistinguishable from that of an infinitely long list pre-populated by invoking the initializer function
                (assuming it is side-effect free).</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.#ctor(System.Func{System.Int32,`0})">
            <summary>
                Constructor.</summary>
            <param name="initializer">
                A function which creates a value to be used for non-existent elements upon their creation. If <c>null</c>,
                <c>default(T)</c> is used instead.</param>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>
                Constructor.</summary>
            <param name="capacity">
                The number of elements that the new list can initially store.</param>
            <param name="initializer">
                A function which creates a value to be used for non-existent elements upon their creation. If <c>null</c>,
                <c>default(T)</c> is used instead.</param>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{System.Int32,`0})">
            <summary>
                Constructor.</summary>
            <param name="collection">
                A collection whose elements are copied to the new list.</param>
            <param name="initializer">
                A function which creates a value to be used for non-existent elements upon their creation. If <c>null</c>,
                <c>default(T)</c> is used instead.</param>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.IndexOf(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Insert(System.Int32,`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.RemoveAt(System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Add(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Clear">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Contains(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.CopyTo(`0[],System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoList`1.Count">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoList`1.IsReadOnly">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Remove(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.GetEnumerator">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.AsReadOnly">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.BinarySearch(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="P:RT.Util.Collections.AutoList`1.Capacity">
            <summary>Equivalent to the same property in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Exists(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Find(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindAll(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindIndex(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindLast(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindLastIndex(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.GetRange(System.Int32,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.IndexOf(`0,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.LastIndexOf(`0)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.LastIndexOf(`0,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.RemoveAll(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Reverse">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Reverse(System.Int32,System.Int32)">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Sort">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Sort(System.Comparison{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.ToArray">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.TrimExcess">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.AutoList`1.TrueForAll(System.Predicate{`0})">
            <summary>Equivalent to the same method in <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="T:RT.Util.Collections.Bin128">
            <summary>
                Encapsulates a binary value 128 bits long. See Remarks.</summary>
            <remarks>
                This type is significantly more memory-efficient compared to <c>byte[16]</c> when only one copy of the value needs
                to be stored. Specifically, the byte array uses four extra IntPtrs per instance, which, on a 64-bit platform,
                amounts to a three-fold RAM usage increase. It can also be compared for equality using just two integer
                comparisons in safe code.</remarks>
        </member>
        <member name="F:RT.Util.Collections.Bin128.Zero">
            <summary>Gets a 128-bit binary value consisting of all zeroes.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.#ctor(System.Byte[],System.Int32)">
            <summary>
                Constructor. Initializes this value to contain the same data as the specified byte array.</summary>
            <param name="bytes">
                Byte array containing the data.</param>
            <param name="offset">
                The offset at which the data begins. The length is fixed at 16 bytes.</param>
        </member>
        <member name="M:RT.Util.Collections.Bin128.op_Equality(RT.Util.Collections.Bin128,RT.Util.Collections.Bin128)">
            <summary>Compares the two values and returns true iff they are equal.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.op_Inequality(RT.Util.Collections.Bin128,RT.Util.Collections.Bin128)">
            <summary>Compares the two values and returns true iff they are different.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.Equals(System.Object)">
            <summary>Compares an object to this value and returns true iff it's a Bin128 value that's equal.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.GetHashCode">
            <summary>Gets the hash code for this value.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.ToArray">
            <summary>Returns the binary value as a byte array. This method is not very efficient.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.ToString">
            <summary>Converts the binary value to a hexadecimal string representation.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.Write(System.IO.Stream)">
            <summary>Writes the value to the specified stream as 16 bytes.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.Write(System.IO.BinaryWriter)">
            <summary>Writes the value to the specified binary writer as 16 bytes.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.Read(System.IO.Stream)">
            <summary>Reads a 128-bit binary value from the specified stream.</summary>
        </member>
        <member name="M:RT.Util.Collections.Bin128.Read(System.IO.BinaryReader)">
            <summary>Reads a 128-bit binary value from the specified binary reader.</summary>
        </member>
        <member name="T:RT.Util.Collections.ListSorted`1">
            <summary>
                Implements a list whose items are always stored in a sorted order. Multiple equal items are allowed, and will
                always be added to the end of a run of equal items. Insertion, and removal are O(N); lookups are O(log N); access
                by index is supported.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.#ctor">
            <summary>Creates an empty <see cref="T:RT.Util.Collections.ListSorted`1"/> using a default comparer for the item type.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.#ctor(System.Int32)">
            <summary>
                Creates an empty <see cref="T:RT.Util.Collections.ListSorted`1"/> of the specified capacity and using a default comparer for
                the item type.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Creates an empty <see cref="T:RT.Util.Collections.ListSorted`1"/> using the specified item comparer.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
                Creates an empty <see cref="T:RT.Util.Collections.ListSorted`1"/> of the specified capacity and using the specified item
                comparer.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Adds all of the specified items into the list. The resulting list will contain all the items in the same order
                as a stable sort would have produced. NOTE: the current implementation is O(N log N) if the collection is
                empty, or O(N*M) otherwise, where N = items currently in the collection and M = items to be added. The latter
                can be improved.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.IndexOf(`0)">
            <summary>
                Returns the index of the FIRST item equal to the specified item, or -1 if the item is not found. The operation
                is O(log N).</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.LastIndexOf(`0)">
            <summary>
                Returns the index of the LAST item equal to the specified item, or -1 if the item is not found. The operation
                is O(log N).</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>Not supported in this class, will always throw an exception.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
        </member>
        <member name="P:RT.Util.Collections.ListSorted`1.Item(System.Int32)">
            <summary>Gets an item at the specified index. Setting an item is not supported and will always throw an exception.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.Add(`0)">
            <summary>
                Adds the specified item to the list. The item is added at the appropriate location to keep the list sorted. If
                multiple equal items are stored, this method is guaranteed to add an item at the end of the equal items run.
                This method is O(N).</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.Clear">
            <summary>Removes all items from the list.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.Contains(`0)">
            <summary>Returns true if the list contains the specified item. This operation is O(logN).</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies all items of this collection into the specified array, starting at the specified index, in the sorted
                order.</summary>
        </member>
        <member name="P:RT.Util.Collections.ListSorted`1.Count">
            <summary>Gets the number of items stored in this collection.</summary>
        </member>
        <member name="P:RT.Util.Collections.ListSorted`1.IsReadOnly">
            <summary>Returns false.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.Remove(`0)">
            <summary>
                Removes the FIRST occurrence of the specified item from the list. Returns true if the item was removed, or
                false if it wasn't found.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.RemoveLast(`0)">
            <summary>
                Removes the LAST occurrence of the specified item from the list. Returns true if the item was removed, or
                false if it wasn't found.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.GetEnumerator">
            <summary>Gets an enumerator which enumerates all items of this collection in sorted order.</summary>
        </member>
        <member name="M:RT.Util.Collections.ListSorted`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator which enumerates all items of this collection in sorted order.</summary>
        </member>
        <member name="T:RT.Util.Collections.QueueViewable`1">
            <summary>
                A queue whose queued items can be accessed by index. The item at the head of the queue has index 0 and is the next
                item to be dequeued.</summary>
            <typeparam name="T">
                The type of the elements stored in the queue.</typeparam>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.#ctor(System.Int32)">
            <summary>
                Constructor.</summary>
            <param name="initialCapacity">
                An appropriate initial capacity will help avoid unnecessarily growing the internal buffer.</param>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Constructor.</summary>
            <param name="items">
                Items that the new queue should contain. The first item of the enumerable will be at the head of the queue.</param>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.Enqueue(`0)">
            <summary>Adds an item at the tail of the queue.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.Dequeue">
            <summary>Removes and returns the item at the head of the queue.</summary>
        </member>
        <member name="P:RT.Util.Collections.QueueViewable`1.Item(System.Int32)">
            <summary>
                Accesses the Nth queued item. The next item to be dequeued always has the index 0. The existing items can be
                both read and assigned. No new items can be added using this indexer.</summary>
        </member>
        <member name="P:RT.Util.Collections.QueueViewable`1.Capacity">
            <summary>
                Gets the current capacity of the queue (that is, the maximum number of items it can store before the internal
                store needs to be resized).</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies all elements to an array, in the order in which they would be dequeued. The destination array must have
                enough space for all items.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.GetEnumerator">
            <summary>Enumerates all items in the queue in the order in which they would be dequeued.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Enumerates all items in the queue in the order in which they would be dequeued.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>Identical to <see cref="M:RT.Util.Collections.QueueViewable`1.Enqueue(`0)"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.Clear">
            <summary>Empties the queue.</summary>
        </member>
        <member name="P:RT.Util.Collections.QueueViewable`1.Count">
            <summary>Returns the number of elements in the queue.</summary>
        </member>
        <member name="P:RT.Util.Collections.QueueViewable`1.IsReadOnly">
            <summary>Always returns false.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.AsReadOnly">
            <summary>
                Returns a read-only wrapper for this collection. Any changes to this collection will be immediately visible
                through the wrapper.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.IndexOf(`0)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.Contains(`0)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.Remove(`0)">
            <summary>Always throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.Insert(System.Int32,`0)">
            <summary>Always throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.QueueViewable`1.RemoveAt(System.Int32)">
            <summary>Always throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="T:RT.Util.Collections.ReadOnlyDictionary`2">
            <summary>
                Wraps an <see cref="T:System.Collections.Generic.IDictionary`2"/> to allow reading values but prevent setting/removing them.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Creates a new read-only wrapper for the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.IsWrapperFor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Returns true if <paramref name="dict"/> is the same dictionary object as the one this class wraps.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>Not supported on a ReadOnlyDictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Returns true if the dictionary contains the specified key.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyDictionary`2.Keys">
            <summary>Gets a read-only collection of keys in this dictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>Not supported on a ReadOnlyDictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key. Returns true if the value exists, false otherwise.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyDictionary`2.Values">
            <summary>Gets a read-only collection of values in this dictionary.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>Gets a value from the dictionary. Setting values is not supported on a ReadOnlyDictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Not supported on a ReadOnlyDictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.Clear">
            <summary>Not supported on a ReadOnlyDictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Returns true if the dictionary contains the specified key/value pair.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>Copies the key/value pairs of this dictionary into the specified array.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyDictionary`2.Count">
            <summary>Gets the number of elements in this read-only collection.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>Returns true, as this is a read-only collection.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Not supported on a ReadOnlyDictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>Gets an enumerator for the key/value pairs stored in this dictionary.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator for the key/value pairs stored in this dictionary.</summary>
        </member>
        <member name="T:RT.Util.Collections.ReadOnlyCollection`1">
            <summary>Wraps an <see cref="T:System.Collections.Generic.ICollection`1"/> to allow reading values but prevent setting/removing them.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>Creates a new read-only wrapper for the specified <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.IsWrapperFor(System.Collections.Generic.ICollection{`0})">
            <summary>Returns true if <paramref name="coll"/> is the same collection object as the one this class wraps.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.Add(`0)">
            <summary>Not supported on a ReadOnlyCollection.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.Clear">
            <summary>Not supported on a ReadOnlyCollection.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.Contains(`0)">
            <summary>Returns true if the specified item exists in this collection, false otherwise.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the values stored in this collection into the specified dictionary.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyCollection`1.Count">
            <summary>Gets the number of values stored in this collection.</summary>
        </member>
        <member name="P:RT.Util.Collections.ReadOnlyCollection`1.IsReadOnly">
            <summary>Returns true, as this is a read-only collection.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.Remove(`0)">
            <summary>Not supported on a ReadOnlyCollection.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.GetEnumerator">
            <summary>Gets an enumerator for the values stored in this collection.</summary>
        </member>
        <member name="M:RT.Util.Collections.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator for the values stored in this collection.</summary>
        </member>
        <member name="T:RT.Util.Collections.RecentlyUsedCache`2">
            <summary>
                Implements a key-value store which remembers which keys were used more recently than others, and automatically
                trims the older entries once a threshold is reached. Lookups are O(1) and are comparable in speed to a
                Dictionary`2. So are additions, except when a trim is triggered.</summary>
        </member>
        <member name="M:RT.Util.Collections.RecentlyUsedCache`2.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructor.</summary>
            <param name="trimAt">
                Whenever the cache has this many entries, a trim will be triggered.</param>
            <param name="trimTo">
                The minimum number of most recently used entries to remain in the cache after trimming. The actual number of
                entries will be somewhere between <paramref name="trimTo"/> and 2 * <paramref name="trimTo"/>.</param>
        </member>
        <member name="M:RT.Util.Collections.RecentlyUsedCache`2.Retrieve(`0,`1@)">
            <summary>
                Gets a value associated with the specified key, and records it as recently used.</summary>
            <param name="key">
                The key to retrieve.</param>
            <param name="value">
                Receives the value in case of successful lookup, or <c>default(TValue)</c> if the specified key is not
                currently stored.</param>
            <returns>
                True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:RT.Util.Collections.RecentlyUsedCache`2.Store(`0,`1)">
            <summary>
                Stores the specified key/value pair in the cache and records the key as recently used. Triggers a
                (comparatively slow) trim operation if the total number of entries exceed the threshold specified when the
                cache was instantiated.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ReadOnlyCollectionExtensions">
            <summary>Extension methods related to read-only collections.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReadOnlyCollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Creates and returns a read-only wrapper around this collection. Note: a new wrapper is created on every call.
                Consider caching it.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReadOnlyCollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0},RT.Util.Collections.ReadOnlyCollection{``0}@)">
            <summary>
                Gets a read-only wrapper around this collection. If <paramref name="cache"/> is already a wrapper for this
                collection returns that, otherwise creates a new wrapper, stores it in <paramref name="cache"/>, and returns
                that.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReadOnlyCollectionExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Creates and returns a read-only wrapper around this dictionary. Note: a new wrapper is created on every call.
                Consider caching it.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReadOnlyCollectionExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1},RT.Util.Collections.ReadOnlyDictionary{``0,``1}@)">
            <summary>
                Gets a read-only wrapper around this dictionary. If <paramref name="cache"/> is already a wrapper for this
                dictionary returns that, otherwise creates a new wrapper, stores it in <paramref name="cache"/>, and returns
                that.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.CustomComparerExtensions">
            <summary>Extension methods related to custom comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CustomComparerExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparison delegate.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.CollectionExtensions">
            <summary>
                Provides extension methods on various collection types or interfaces in the System.Collections.Generic namespace
                such as <see cref="T:System.Collections.Generic.Dictionary`2"/> and on arrays.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Contains``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>Determines whether the current HashSet-in-a-Dictionary contains the specified key and value.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.ContainsKeys``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1)">
            <summary>
                Determines whether the current two-level dictionary contains the specified combination of keys.</summary>
            <typeparam name="TKey1">
                Type of the first-level key.</typeparam>
            <typeparam name="TKey2">
                Type of the second-level key.</typeparam>
            <typeparam name="TValue">
                Type of values in the dictionary.</typeparam>
            <param name="source">
                Source dictionary to examine.</param>
            <param name="key1">
                The first key to check for.</param>
            <param name="key2">
                The second key to check for.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.TryGetValue``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2@)">
            <summary>
                Gets the value associated with the specified combination of keys.</summary>
            <typeparam name="TKey1">
                Type of the first-level key.</typeparam>
            <typeparam name="TKey2">
                Type of the second-level key.</typeparam>
            <typeparam name="TValue">
                Type of values in the dictionary.</typeparam>
            <param name="source">
                Source dictionary to examine.</param>
            <param name="key1">
                The first key to check for.</param>
            <param name="key2">
                The second key to check for.</param>
            <param name="value">
                When this method returns, the value associated with the specified keys, if the keys are found; otherwise, the
                default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
                <c>true</c> if the two-level dictionary contains an element with the specified combination of keys; otherwise,
                <c>false</c>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.DictionaryEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Compares two dictionaries for equality, member-wise. Two dictionaries are equal if they contain all the same
                key-value pairs.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.BinarySearch``2(System.Collections.Generic.SortedList{``0,``1},``0,System.Int32@,System.Int32@)">
            <summary>
                Performs a binary search for the specified key on a <see cref="T:System.Collections.Generic.SortedList`2"/>. When no match
                exists, returns the nearest indices for interpolation/extrapolation purposes.</summary>
            <remarks>
                If an exact match exists, index1 == index2 == the index of the match. If an exact match is not found, index1
                &lt; index2. If the key is less than every key in the list, index1 is int.MinValue and index2 is 0. If it's
                greater than every key, index1 = last item index and index2 = int.MaxValue. Otherwise index1 and index2 are
                the indices of the items that would surround the key were it present in the list.</remarks>
            <param name="list">
                List to operate on.</param>
            <param name="key">
                The key to look for.</param>
            <param name="index1">
                Receives the value of the first index (see remarks).</param>
            <param name="index2">
                Receives the value of the second index (see remarks).</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets a value from a dictionary by key. If the key does not exist in the dictionary, the default value is
                returned instead.</summary>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="key">
                Key to look up.</param>
            <param name="defaultVal">
                Value to return if <paramref name="key"/> is not contained in the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Nullable{``1})">
            <summary>
                Gets a value from a dictionary by key. If the key does not exist in the dictionary, the default value is
                returned instead.</summary>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="key">
                Key to look up.</param>
            <param name="defaultVal">
                Value to return if <paramref name="key"/> is not contained in the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Get``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2)">
            <summary>
                Gets a value from a two-level dictionary by key. If the keys don’t exist in the dictionary, the default value
                is returned instead.</summary>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="key1">
                Key to look up in the first level.</param>
            <param name="key2">
                Key to look up in the second level.</param>
            <param name="defaultVal">
                Value to return if key1 or key2 is not contained in the relevant dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts an <c>IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</c> into a <c>Dictionary&lt;TKey,
                TValue&gt;</c>.</summary>
            <param name="source">
                Source collection to convert to a dictionary.</param>
            <param name="comparer">
                An optional equality comparer to compare keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Subarray``1(``0[],System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Substring(System.Int32)"/>, but for arrays. Returns a new array containing all items from
                the specified <paramref name="startIndex"/> onwards.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="startIndex"/> is 0.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Subarray``1(``0[],System.Int32,System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Substring(System.Int32,System.Int32)"/>, but for arrays. Returns a new array containing <paramref
                name="length"/> items from the specified <paramref name="startIndex"/> onwards.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="startIndex"/> is 0 and <paramref name="length"/> is
                the length of the input array.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Remove``1(``0[],System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Remove(System.Int32)"/>, but for arrays. Returns a new array containing only the items
                before the specified <paramref name="startIndex"/>.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="startIndex"/> is the length of the array.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Remove``1(``0[],System.Int32,System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Remove(System.Int32,System.Int32)"/>, but for arrays. Returns a new array containing everything
                except the <paramref name="length"/> items starting from the specified <paramref name="startIndex"/>.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="length"/> is 0.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Insert``1(``0[],System.Int32,``0[])">
            <summary>
                Similar to <see cref="M:System.String.Insert(System.Int32,System.String)"/>, but for arrays. Returns a new array with the <paramref
                name="values"/> inserted starting from the specified <paramref name="startIndex"/>.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="values"/> is empty.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Insert``1(``0[],System.Int32,``0)">
            <summary>
                Similar to <see cref="M:System.String.Insert(System.Int32,System.String)"/>, but for arrays and for a single value. Returns a new
                array with the <paramref name="value"/> inserted at the specified <paramref name="startIndex"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.SubarrayEquals``1(``0[],System.Int32,``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a subarray within the current array is equal to the specified other array.</summary>
            <param name="sourceArray">
                First array to examine.</param>
            <param name="sourceStartIndex">
                Start index of the subarray within the first array to compare.</param>
            <param name="otherArray">
                Array to compare the subarray against.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                True if the current array contains the specified subarray at the specified index; false otherwise.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.SubarrayEquals``1(``0[],System.Int32,``0[],System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether the two arrays contain the same content in the specified location.</summary>
            <param name="sourceArray">
                First array to examine.</param>
            <param name="sourceStartIndex">
                Start index of the subarray within the first array to compare.</param>
            <param name="otherArray">
                Second array to examine.</param>
            <param name="otherStartIndex">
                Start index of the subarray within the second array to compare.</param>
            <param name="length">
                Length of the subarrays to compare.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                True if the two arrays contain the same subarrays at the specified indexes; false otherwise.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.IndexOfSubarray``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Searches the current array for a specified subarray and returns the index of the first occurrence, or -1 if
                not found.</summary>
            <param name="sourceArray">
                Array in which to search for the subarray.</param>
            <param name="findWhat">
                Subarray to search for.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                The index of the first match, or -1 if no match is found.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.IndexOfSubarray``1(``0[],``0[],System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Searches the current array for a specified subarray and returns the index of the first occurrence, or -1 if
                not found.</summary>
            <param name="sourceArray">
                Array in which to search for the subarray.</param>
            <param name="findWhat">
                Subarray to search for.</param>
            <param name="startIndex">
                Index in <paramref name="sourceArray"/> at which to start searching.</param>
            <param name="sourceLength">
                Maximum length of the source array to search starting from <paramref name="startIndex"/>. The greatest index
                that can be returned is this minus the length of <paramref name="findWhat"/> plus <paramref
                name="startIndex"/>.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                The index of the first match, or -1 if no match is found.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.CopyMerge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Creates a new dictionary containing the union of the key/value pairs contained in the specified dictionaries.
                Keys in <paramref name="second"/> overwrite keys in <paramref name="first"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Removes all entries from a dictionary that satisfy a specified predicate.</summary>
            <typeparam name="TKey">
                Type of the keys in the dictionary.</typeparam>
            <typeparam name="TVal">
                Type of the values in the dictionary.</typeparam>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="predicate">
                Specifies a predicate that determines which entries should be removed from the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveAllByKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
                Removes all entries from a dictionary whose keys satisfy a specified predicate.</summary>
            <typeparam name="TKey">
                Type of the keys in the dictionary.</typeparam>
            <typeparam name="TVal">
                Type of the values in the dictionary.</typeparam>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="predicate">
                Specifies a predicate that determines which entries should be removed from the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveAllByValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
                Removes all entries from a dictionary whose values satisfy a specified predicate.</summary>
            <typeparam name="TKey">
                Type of the keys in the dictionary.</typeparam>
            <typeparam name="TVal">
                Type of the values in the dictionary.</typeparam>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="predicate">
                Specifies a predicate that determines which entries should be removed from the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Enqueues several values into a <see cref="T:System.Collections.Generic.Queue`1"/>.</summary>
            <typeparam name="T">
                Type of the elements in the queue.</typeparam>
            <param name="queue">
                Queue to insert items into.</param>
            <param name="values">
                Values to enqueue.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds several values into a <see cref="T:System.Collections.Generic.HashSet`1"/>.</summary>
            <typeparam name="T">
                Type of the elements in the hash set.</typeparam>
            <param name="set">
                The set to add the items to.</param>
            <param name="values">
                Values to add.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveRange``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes several values from a <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <typeparam name="T">
                Type of the elements in the list.</typeparam>
            <param name="list">
                The list to remove the items from.</param>
            <param name="values">
                Values to remove.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
                Projects each element of a sequence into a new form.</summary>
            <typeparam name="TInput">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A list of values to invoke the transform function on.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                A collection whose elements are the result of invoking the transform function on each element of <paramref
                name="source"/>.</returns>
            <remarks>
                This method replaces <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/> for the case where the input is an <see cref="T:System.Collections.Generic.IList`1"/> with an implementation that makes a
                subsequent <c>ToArray()</c> or <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
                Inverts the order of the elements in a sequence.</summary>
            <typeparam name="TInput">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A list of values to reverse.</param>
            <returns>
                A list whose elements correspond to those of the input sequence in reverse order.</returns>
            <remarks>
                This method replaces <see cref="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"/> for the case where the
                input is an <see cref="T:System.Collections.Generic.IList`1"/> with an implementation that makes a subsequent <c>ToArray()</c> or
                <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.ReverseInplace``1(``0[])">
            <summary>Reverses an array in-place and returns the same array.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Pop``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
                Pops the specified number of elements from the stack. There must be at least that many items on the stack,
                otherwise an exception is thrown.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ListSelectIterator`2">
            <summary>
                Provides the implementation for <see cref="M:RT.Util.ExtensionMethods.CollectionExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})"/>.</summary>
            <typeparam name="TInput">
                The type of the elements of the original collection.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by the selector function.</typeparam>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1},System.Boolean)">
            <summary>
                Constructor.</summary>
            <param name="source">
                A list of values to invoke the transform function on.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="reversed">
                Specifies whether or not to reverse the order of elements.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.GetEnumerator">
            <summary>Returns an enumerator to iterate over the collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.ToArray">
            <summary>
                Creates an array from a projected list.</summary>
            <remarks>
                This implementation fulfills the same function as <c>Enumerable.ToArray()</c>, but is 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.ToList">
            <summary>
                Creates a new list from a projected list.</summary>
            <remarks>
                This implementation fulfills the same function as <c>Enumerable.ToList()</c>, but is 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.Select``1(System.Func{`1,``0})">
            <summary>
                Projects each element of a sequence into a new form.</summary>
            <typeparam name="TNewResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                A collection whose elements are the result of invoking the transform function on each element of the current
                projected list.</returns>
            <remarks>
                This method replaces <c>IEnumerable{T}.Select{TSource,
                TResult}(IEnumerable{TSource},Func{TSource,int,TResult})</c> for the case where the input is a
                <c>ListSelectIterator&lt;TInput, TResult&gt;</c> with an implementation that makes a subsequent
                <c>ToArray()</c> or <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.Reverse">
            <summary>
                Inverts the order of the elements in a sequence.</summary>
            <returns>
                A list whose elements correspond to those of the input sequence in reverse order.</returns>
            <remarks>
                This method replaces <see cref="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"/> for the case where the
                input is an <see cref="T:System.Collections.Generic.IList`1"/> with an implementation that makes a subsequent <c>ToArray()</c> or
                <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ConsoleExtensions">
            <summary>Console-related extension methods.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.Fmt(System.String,System.Object[])">
            <summary>Formats a string in a way compatible with <see cref="M:System.String.Format(System.String,System.Object[])"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.Fmt(System.String,System.IFormatProvider,System.Object[])">
            <summary>Formats a string in a way compatible with <see cref="M:System.String.Format(System.String,System.Object[])"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.FmtEnumerable(System.String,System.Object[])">
            <summary>
                Formats the specified objects into the format string. The result is an enumerable collection which enumerates
                parts of the format string interspersed with the arguments as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.FmtEnumerable(System.String,System.IFormatProvider,System.Object[])">
            <summary>
                Formats the specified objects into the format string. The result is an enumerable collection which enumerates
                parts of the format string interspersed with the arguments as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.WordWrap(RT.Util.Consoles.ConsoleColoredString,System.Int32,System.Int32)">
            <summary>
                Word-wraps the current <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> to a specified width. Supports UNIX-style newlines
                and indented paragraphs.</summary>
            <remarks>
                <para>
                    The supplied text will be split into "paragraphs" at the newline characters. Every paragraph will begin on
                    a new line in the word-wrapped output, indented by the same number of spaces as in the input. All
                    subsequent lines belonging to that paragraph will also be indented by the same amount.</para>
                <para>
                    All multiple contiguous spaces will be replaced with a single space (except for the indentation).</para></remarks>
            <param name="text">
                Text to be word-wrapped.</param>
            <param name="maxWidth">
                The maximum number of characters permitted on a single line, not counting the end-of-line terminator.</param>
            <param name="hangingIndent">
                The number of spaces to add to each line except the first of each paragraph, thus creating a hanging
                indentation.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.Color(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Colors the specified string in the specified console color.</summary>
            <param name="str">
                The string to color.</param>
            <param name="foreground">
                The foreground color to color the string in.</param>
            <param name="background">
                The background color to color the string in.</param>
            <returns>
                A potentially colorful string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.Color(System.Char,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Colors the specified character in the specified console color.</summary>
            <param name="ch">
                The character to color.</param>
            <param name="foreground">
                The foreground color to color the character in.</param>
            <param name="background">
                The background color to color the character in.</param>
            <returns>
                A potentially colorful character.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.ColorSubstring(System.String,System.Int32,System.Int32,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Colors the specified range within the specified string in a specified color.</summary>
            <param name="str">
                The string to partially colour.</param>
            <param name="index">
                The index at which to start colouring.</param>
            <param name="length">
                The number of characters to colour.</param>
            <param name="foreground">
                The foreground color to assign to the range of characters.</param>
            <param name="background">
                The background color to assign to the range of characters.</param>
            <returns>
                A potentially colorful string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.ColorSubstring(System.String,System.Int32,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Colors a range of characters beginning at a specified index within the specified string in a specified color.</summary>
            <param name="str">
                The string to partially colour.</param>
            <param name="index">
                The index at which to start colouring.</param>
            <param name="foreground">
                The colour to assign to the characters starting from the character at <paramref name="index"/>.</param>
            <param name="background">
                The background color to assign to the range of characters.</param>
            <returns>
                A potentially colorful string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.ToConsoleColoredString(System.Object,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Returns the specified object as a colored string.</summary>
            <param name="obj">
                The object to convert.</param>
            <param name="defaultForeground">
                The foreground color to color the string in if it is not already a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</param>
            <param name="defaultBackground">
                The background color to color the string in if it is not already a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</param>
            <returns>
                A potentially colorful string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsoleExtensions.JoinColoredString``1(System.Collections.Generic.IEnumerable{``0},RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString,System.ConsoleColor)">
            <summary>Equivalent to <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.JoinString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)"/>, but for <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>s.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IsoDateFormat">
            <summary>Defines one of several common date/time formats which are either ISO-8601 compatible or very slight deviations from it.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.HumanReadable">
            <summary>A delimited, readable format. Known as "extended" in ISO-8601. Example: <c>2007-12-31 21:15</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.Compact">
            <summary>A non-delimited compact format. Known as "basic" in ISO-8601. Example: <c>20071231T2115</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.CompactReadable">
            <summary>A non-delimited compact format with '-' instead of 'T'. Not ISO-8601, but supported by <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>. Example: <c>20071231-2115</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.FilenameReadable">
            <summary>A delimited, readable format without spaces usable in filenames. Not ISO-8601, and not supported by <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>. Example: <c>2007.12.31-21.15</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.Iso8601">
            <summary>The standard ISO-8601 format. Example: <c>2007-12-31T21:15</c>.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IsoDatePrecision">
            <summary>Defines a precision for a date/time stamp.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Days">
            <summary>Day precision: <c>2011-12-31</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Minutes">
            <summary>Minute precision: <c>2011-12-31 18:03</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Seconds">
            <summary>Second precision: <c>2011-12-31 18:03:15</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Milliseconds">
            <summary>Millisecond precision: <c>2011-12-31 18:03:15.123</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Full">
            <summary>The full .NET DateTime precision, which is seconds to 7 d.p. (100-nanosecond intervals): <c>2011-12-31 18:03:15.1234567</c></summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.DateTimeExtensions">
            <summary>
            Provides extension methods on the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.Nanosecond(System.DateTime)">
            <summary>
            Inexplicably, the DateTime type does not offer any way of retrieving the full precision
            of the underlying data other than via Ticks or the ToString method. This extension
            method fills in the void.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringCustom(System.DateTime,RT.Util.ExtensionMethods.IsoDatePrecision,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char},System.Boolean)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. The date/time components are always ordered from
            largest (year) to smallest (nanoseconds), and they are always specified as a fixed-width numeric value. The separators between
            the parts can be customized.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="precision">Which date/time components are to be included. The values are truncated, not rounded.</param>
            <param name="charInDate">The character to insert between years, months and days, or null for none.</param>
            <param name="charInTime">The character to insert between hours, minutes and seconds (including timezone offset), or null for none.</param>
            <param name="charBetween">The character to insert between the date and the time part, or null for none (which is never valid in ISO-8601).</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoString(System.DateTime,RT.Util.ExtensionMethods.IsoDatePrecision,RT.Util.ExtensionMethods.IsoDateFormat,System.Boolean)">
            <summary>Returns a string representation of the date/time in an ISO-8601 compatible (or very close) format.</summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="precision">Which date/time components are to be included. The values are truncated, not rounded.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringOptimal(System.DateTime,RT.Util.ExtensionMethods.IsoDateFormat,RT.Util.ExtensionMethods.IsoDatePrecision,RT.Util.ExtensionMethods.IsoDatePrecision,System.Boolean)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. The function will
            omit higher-precision parts whose values are zeroes, as permitted by the standard.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="minPrecision">Minimum precision of the resulting string. The actual precision is determined by what's available in the date/time, bounded by this parameter.</param>
            <param name="maxPrecision">Maximum precision of the resulting string. Any higher-precision parts are truncated.</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringRoundtrip(System.DateTime,RT.Util.ExtensionMethods.IsoDateFormat,RT.Util.ExtensionMethods.IsoDatePrecision)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. Use this if the result must be round-trippable
            without losing any information. The function will omit higher-precision parts whose values are zeroes, as permitted by the standard.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="minPrecision">Minimum precision of the resulting string. The actual precision is determined by what's available in the date/time, bounded by this parameter.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)">
            <summary>
            <para>Attempts to parse the specified string as an ISO-formatted DateTime. The formats supported are guided by ISO-8601, but do not match
            it exactly. Strings with no timezone information are parsed into DateTimeKind.Unspecified.</para>
            <para>ISO-8601 features not supported: day numbers; week numbers; time offsets; comma for decimal separation.</para>
            <para>Features supported not in ISO-8601: '-' separator for the basic format; date shortening; timezone marker for date-only strings.</para>
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ParseIso(System.String)">
            <summary>Parse the specified string as an ISO-formatted DateTime. See <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/> for more info.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ParseIsoNullable(System.String)">
            <summary>
            Parse the specified string as an ISO-formatted DateTime. Returns null if the string is null or cannot be parsed.
            See <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/> for more info.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToMilliseconds(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole milliseconds.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToSeconds(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole seconds.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToMinutes(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole minutes.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToDays(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole days.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IEnumerableExtensions">
            <summary>Provides extension methods on the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all pairs of elements from the source collection. For example, the
                input sequence 1, 2 yields the pairs [1,1], [1,2], [2,1], and [2,2].</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>Returns an enumeration of objects computed from all pairs of elements from the source collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.UniquePairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all unique pairs of distinct elements from the source collection.
                For example, the input sequence 1, 2, 3 yields the pairs [1,2], [1,3] and [2,3] only.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ConsecutivePairs``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
                Returns an enumeration of tuples containing all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is false, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is true.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectConsecutivePairs``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,``0,``1})">
            <summary>
                Enumerates all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is <c>false</c>, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is
                <c>true</c>.</param>
            <param name="selector">
                The selector function to run each consecutive pair through.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Sorts the elements of a sequence in ascending order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Splits the specified IEnumerable at every element that satisfies a specified predicate and returns a
                collection containing each sequence of elements in between each pair of such elements. The elements satisfying
                the predicate are not included.</summary>
            <param name="splitWhat">
                The collection to be split.</param>
            <param name="splitWhere">
                A predicate that determines which elements constitute the separators.</param>
            <returns>
                A collection containing the individual pieces taken from the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Adds a single element to the end of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing all the input elements, followed by the specified additional element.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds a single element to the start of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing the specified additional element, followed by all the input elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})"/>, but it is much faster if you intend to extract
                only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <returns>
                The given <see cref="T:System.Collections.Generic.IEnumerable`1"/> with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>, but it is much faster if you intend
                to extract only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <param name="comparer">
                An instance of <see cref="T:System.Collections.Generic.IComparer`1"/> specifying the comparison to use on the items.</param>
            <returns>
                The given IEnumerable&lt;T&gt; with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The list of items to permute.</param>
            <returns>
                A collection containing all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Subsequences``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
                Returns all subsequences of the specified lengths of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The sequence of items to generate subsequences of.</param>
            <param name="minLength">
                The minimum length of a subsequence to return. Must be between 0 and the length of the input collection.</param>
            <param name="maxLength">
                The maximum length of a subsequence to return. Must be between 0 and the length of the input collection. If
                <c>null</c> is specified, the size of the input collection is used.</param>
            <returns>
                A collection containing all matching subsequences of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the first element of a sequence, or <c>null</c> if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the first element of a sequence that satisfies a given predicate, or <c>null</c> if the sequence
                contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                Only consider elements that satisfy this predicate.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref
                name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test
                specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1},``1)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the resulting value.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="resultSelector">
                A function to transform the first element into the result value. Will only be called if the sequence contains
                an element that passes the test specified by <paramref name="predicate"/>.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the transformed first element in <paramref name="source"/> that
                passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>, starting at the specified <paramref name="startIndex"/>. If no such elements are found,
                returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the last element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
            <remarks>
                This method is optimised for the case in which the input sequence is a list or array. In all other cases, the
                collection is evaluated completely before this method returns.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> that is equal to the specified
                <paramref name="element"/> as determined by the specified <paramref name="comparer"/>. If no such elements are
                found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the minimum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the maximum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the minimum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the maximum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value, or
                a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value, or a
                default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value, or <c>null</c> if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value, or a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
                Enumerates the items of this collection, skipping the last <paramref name="count"/> items. Note that the
                memory usage of this method is proportional to <paramref name="count"/>, but the source collection is only
                enumerated once, and in a lazy fashion. Also, enumerating the first item will take longer than enumerating
                subsequent items.</summary>
            <param name="source">
                Source collection.</param>
            <param name="count">
                Number of items to skip from the end of the collection.</param>
            <param name="throwIfNotEnough">
                If <c>true</c>, the enumerator throws at the end of the enumeration if the source collection contained fewer
                than <paramref name="count"/> elements.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a collection containing only the last <paramref name="count"/> items of the input collection. This
                method enumerates the entire collection to the end once before returning. Note also that the memory usage of
                this method is proportional to <paramref name="count"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Queue`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Stack`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <typeparam name="TValue">
                The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="elementSelector">
                A transform function to produce a result element value from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in the current IDictionary&lt;K, List&lt;V&gt;&gt;. If the specified
                key does not exist in the current IDictionary, a new List is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
                Adds an element to a HashSet&lt;V&gt; stored in the current IDictionary&lt;K, HashSet&lt;V&gt;&gt;. If the
                specified key does not exist in the current IDictionary, a new HashSet is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the HashSets.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the HashSet is located in the IDictionary.</param>
            <param name="value">
                Value to add to the HashSet located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Adds an element to a two-level Dictionary&lt;,&gt;. If the specified key does not exist in the outer
                Dictionary, a new Dictionary is created.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <param name="value">
                Value to add to the inner Dictionary.</param>
            <param name="comparer">
                Optional equality comparer to pass into the inner dictionary if a new one is created.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1)">
            <summary>
                Removes an element from a two-level Dictionary&lt;,&gt;. If this leaves the inner dictionary empty, the key is
                removed from the outer Dictionary.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <returns>
                A value indicating whether a value was removed or not.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.List{``2}}},``0,``1,``2)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in a two-level Dictionary&lt;,&gt;. If the specified key does not
                exist in the current Dictionary, a new List is created.</summary>
            <typeparam name="K1">
                Type of the key of the first-level Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the second-level Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the second-level Dictionary is located in the first-level Dictionary.</param>
            <param name="key2">
                Key at which the list is located in the second-level Dictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IncSafe``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
                Increments an integer in an <see cref="T:System.Collections.Generic.IDictionary`2"/> by the specified amount. If the specified
                key does not exist in the current dictionary, the value <paramref name="amount"/> is inserted.</summary>
            <typeparam name="K">
                Type of the key of the dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the dictionary.</param>
            <param name="amount">
                The amount by which to increment the integer.</param>
            <returns>
                The new value at the specified key.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Removes the first occurrence of an element from a List&lt;V&gt; stored in the current IDictionary&lt;K,
                List&lt;V&gt;&gt;. If this leaves the list stored at the specified key empty, the key is removed from the
                IDictionary. If the key is not in the dictionary to begin with, nothing happens.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectIndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Returns a collection of integers containing the indexes at which the elements of the source collection match
                the given predicate.</summary>
            <typeparam name="T">
                The type of elements in the collection.</typeparam>
            <param name="source">
                The source collection whose elements are tested using <paramref name="predicate"/>.</param>
            <param name="predicate">
                The predicate against which the elements of <paramref name="source"/> are tested.</param>
            <returns>
                A collection containing the zero-based indexes of all the matching elements, in increasing order.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectTwo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                Transforms every element of an input collection using two selector functions and returns a collection
                containing all the results.</summary>
            <typeparam name="TSource">
                Type of the elements in the source collection.</typeparam>
            <typeparam name="TResult">
                Type of the results of the selector functions.</typeparam>
            <param name="source">
                Input collection to transform.</param>
            <param name="selector1">
                First selector function.</param>
            <param name="selector2">
                Second selector function.</param>
            <returns>
                A collection containing the transformed elements from both selectors, thus containing twice as many elements
                as the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the original collection but with every value cast to their nullable equivalent.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.JoinString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
                Turns all elements in the enumerable to strings and joins them using the specified <paramref
                name="separator"/> and the specified <paramref name="prefix"/> and <paramref name="suffix"/> for each string.</summary>
            <param name="values">
                The sequence of elements to join into a string.</param>
            <param name="separator">
                Optionally, a separator to insert between each element and the next.</param>
            <param name="prefix">
                Optionally, a string to insert in front of each element.</param>
            <param name="suffix">
                Optionally, a string to insert after each element.</param>
            <param name="lastSeparator">
                Optionally, a separator to use between the second-to-last and the last element.</param>
            <example>
                <code>
                    // Returns "[Paris], [London], [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]")
                    
                    // Returns "[Paris], [London] and [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]", " and ");</code></example>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetween``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Inserts the specified item in between each element in the input collection.</summary>
            <param name="source">
                The input collection.</param>
            <param name="extraElement">
                The element to insert between each consecutive pair of elements in the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { 1, 2, 3
                }.InsertBetween(0) returns { 1, 0, 2, 0, 3 }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetweenWithAnd``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
                Inserts the <paramref name="comma"/> item in between each element in the input collection except between the
                second-last and last, where it inserts <paramref name="and"/> instead.</summary>
            <param name="source">
                The input collection.</param>
            <param name="comma">
                The element to insert between each consecutive pair of elements in the input collection except between the
                second-last and last.</param>
            <param name="and">
                The element to insert between the second-last and last element of the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { "a",
                "b", "c" }.InsertBetweenWithAnd(", ", " and ") returns { "a", ", ", "b", " and ", "c" }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>Determines whether this sequence comprises the values provided in the specified order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllSequencesEqual``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Determines whether all the input sequences are equal according to SequenceEquals.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Splits a collection into chunks of equal size. The last chunk may be smaller than <paramref
                name="chunkSize"/>, but all chunks, if any, will contain at least one item.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemEquality">
                An optional function to determine equality of items.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemComparer">
                An optional equality comparer to determine item equality by.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutiveBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Accumulates consecutive elements that are equal when processed by a selector.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <typeparam name="TKey">
                The return type of the <paramref name="selector"/> function.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="selector">
                A function to transform each item into a key which is compared for equality.</param>
            <param name="keyComparer">
                An optional equality comparer for the keys returned by <paramref name="selector"/>.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectChain``1(``0,System.Func{``0,``0})">
            <summary>
                Enumerates a chain of objects where each object refers to the next one. The chain starts with the specified
                object and ends when null is encountered.</summary>
            <typeparam name="T">
                Type of object to enumerate.</typeparam>
            <param name="obj">
                Initial object.</param>
            <param name="next">
                A function that returns the next object given the current one. If null is returned, enumeration will end.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence, and how often.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="count">
                Receives the number of times the element occurred.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Returns the sum of the values in the specified collection, truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Returns the sum of the values in the specified collection projected by the specified selector function,
                truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
                Returns only the non-<c>null</c> elements from the specified collection of nullable values as non-nullable
                values.</summary>
            <typeparam name="T">
                The inner value type.</typeparam>
            <param name="src">
                A collection of nullable values.</param>
            <returns>
                A collection containing only those values that aren’t <c>null</c>.</returns>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ConsecutiveGroup`2">
            <summary>
                Encapsulates information about a group generated by <see
                cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/> and its
                overloads.</summary>
            <typeparam name="TItem">
                Type of the elements in the sequence.</typeparam>
            <typeparam name="TKey">
                Type of the key by which elements were compared.</typeparam>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Index">
            <summary>Index in the original sequence where the group started.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Count">
            <summary>Size of the group.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Key">
            <summary>The key by which the items in this group are deemed equal.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.</summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.ToString">
            <summary>Returns a string that represents this group’s key and its count.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IQueryableExtensions">
            <summary>
            Provides extension methods on the collection type.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.AllPairs``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns an enumeration of tuples containing all pairs of elements from the source collection.
            For example, the input sequence 1, 2 yields the pairs [1,1], [1,2], [2,1], and [2,2].
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.Join``2(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1})">
            <summary>
            Returns an enumeration of <see cref="T:System.Tuple`2"/>s containing all ordered pairs of elements from the two source collections.
            For example, [1, 2].Join(["one", "two"]) results in the tuples [1, "one"], [1, "two"], [2, "one"] and [2, "two"].
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.UniquePairs``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns an enumeration of tuples containing all unique pairs of distinct elements from the source collection.
            For example, the input sequence 1, 2, 3 yields the pairs [1,2], [1,3] and [2,3] only.
            </summary>
            <remarks>Warning: This method does not work with IQToolkit.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.ConsecutivePairs``1(System.Linq.IQueryable{``0},System.Boolean)">
            <summary>
            Returns an enumeration of tuples containing all consecutive pairs of the elements.
            </summary>
            <param name="source">The input enumerable.</param>
            <param name="closed">If true, an additional pair containing the last and first element is included. For example,
            if the source collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref name="closed"/>
            is false, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is true.</param>
            <remarks>Warning: This method does not work with IQToolkit.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.Order``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns an enumeration of the specified enumerable in sorted order.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.Order``1(System.Linq.IQueryable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an enumeration of the specified enumerable in sorted order.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.Concat``1(System.Linq.IQueryable{``0},``0)">
            <summary>
            Adds a single element to the end of an IQueryable.
            </summary>
            <typeparam name="T">Type of enumerable to return.</typeparam>
            <returns>IQueryable containing all the input elements, followed by the specified additional element.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.FirstOrDefault``1(System.Linq.IQueryable{``0},``0)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The collection to return the first element of.</param>
            <param name="default">The default value to return if the sequence contains no elements.</param>
            <returns><paramref name="default"/> if <paramref name="source"/> is empty;
            otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The collection to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="default">The default value to return if the sequence contains no elements.</param>
            <returns><paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>;
            otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IQueryableExtensions.FirstOrDefault``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,``1},``1)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">The collection to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="resultSelector">A function to transform the first element into the result value. Will only be called if the sequence contains an element that passes the test specified by <paramref name="predicate"/>.</param>
            <param name="default">The default value to return if the sequence contains no elements.</param>
            <returns><paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>;
            otherwise, the transformed first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="T:RT.Util.ExtensionMethods.NumericExtensions">
            <summary>Provides extension methods on numeric types.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.Clip(System.Int32,System.Int32,System.Int32)">
            <summary>
                Clips this value to the range defined by <paramref name="minimumValue"/> and <paramref name="maximumValue"/>.
                The returned number will be no less than the minimum value and no greater than the maximum value. Throws an
                exception if min value is greater than the max value.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ClipMin(System.Int32,System.Int32)">
            <summary>Clips this value so that it is no less than the minimum value specified.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ClipMax(System.Int32,System.Int32)">
            <summary>Clips this value so that it is no greater than the maximum value specified.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.Clip(System.Double,System.Double,System.Double)">
            <summary>
                Clips this value to the range defined by <paramref name="minimumValue"/> and <paramref name="maximumValue"/>.
                The returned number will be no less than the minimum value and no greater than the maximum value. Throws an
                exception if min value is greater than the max value.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ClipMin(System.Double,System.Double)">
            <summary>Clips this value so that it is no less than the minimum value specified.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ClipMax(System.Double,System.Double)">
            <summary>Clips this value so that it is no greater than the maximum value specified.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.Clip(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                Clips this value to the range defined by <paramref name="minimumValue"/> and <paramref name="maximumValue"/>.
                The returned number will be no less than the minimum value and no greater than the maximum value. Throws an
                exception if min value is greater than the max value.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ClipMin(System.Decimal,System.Decimal)">
            <summary>Clips this value so that it is no less than the minimum value specified.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ClipMax(System.Decimal,System.Decimal)">
            <summary>Clips this value so that it is no greater than the maximum value specified.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
                Determines whether <paramref name="value"/> is between <paramref name="min"/> and <paramref name="max"/>
                (inclusive).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.TryParseAsInt(System.String)">
            <summary>Attempts to parse this string as an int, returning null if the parse fails.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.NumericExtensions.ToWords(System.Int32)">
            <summary>
                Converts the integer to a textual representation using English words. For example, 142.ToWords() is "one
                hundred and forty-two".</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ProcessExtensions">
            <summary>
            Provides extension methods on the <see cref="T:System.Diagnostics.Process"/> type, as well as utility methods which are logically 
            static extensions on the Process type but have to be invoked as static methods of this class.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ProcessExtensions.ParentChildProcessIds">
            <summary>
            For each process in the system, enumerates a tuple of parent-process-id,process-id.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ProcessExtensions.ChildProcessIds(System.Diagnostics.Process,System.Boolean)">
            <summary>Returns a list of child processes of this process.</summary>
            <param name="process">The process to return the children of.</param>
            <param name="recursive">If true, all the children's children are included recursively. If false, only direct children are included.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ProcessExtensions.KillWithChildren(System.Diagnostics.Process)">
            <summary>
            Kills this process and all children. Swallows all exceptions
            and does not wait for processes to die or check that they died.
            </summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ReflectionExtensions">
            <summary>Provides extension methods on types involved in the Reflection API.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.TryGetGenericParameters(System.Type,System.Type,System.Type[]@)">
            <summary>
                Determines whether the current type is, derives from, or implements the specified generic type, and determines
                that type’s generic type parameters.</summary>
            <param name="type">
                The current type.</param>
            <param name="typeToFind">
                A generic type definition for a base type of interface, e.g. <c>typeof(ICollection&lt;&gt;)</c> or
                <c>typeof(IDictionary&lt;,&gt;)</c>.</param>
            <param name="typeParameters">
                Receives an array containing the generic type parameters of the generic type.</param>
            <returns>
                <c>true</c> if the current type is, derives from or implements the specified generic type.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetAllFields(System.Type)">
            <summary>
                Returns all fields contained in the specified type, including private fields inherited from base classes.</summary>
            <param name="type">
                The type to return all fields of.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all fields contained in this type, including private
                fields inherited from base classes.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetAllProperties(System.Type)">
            <summary>
                Returns all properties contained in the specified type, including private properties inherited from base
                classes.</summary>
            <param name="type">
                The type to return all properties of.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all properties contained in this type, including
                private properties inherited from base classes.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
                Returns a proper statically-typed collection of the custom attributes on this assembly.</summary>
            <param name="assembly">
                Assembly whose custom attributes to return.</param>
            <typeparam name="T">
                The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.IsDefined``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Indicates whether one or more instance of the specified attribute type is applied to this member.</summary>
            <typeparam name="T">
                The type of attribute to search for.</typeparam>
            <param name="member">
                Member whose custom attributes to search.</param>
            <param name="inherit">
                Specifies whether to search this member's inheritance chain to find the attributes.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.IsDefined``1(System.Reflection.ParameterInfo)">
            <summary>
                Indicates whether one or more instance of the specified attribute type is applied to this parameter.</summary>
            <typeparam name="T">
                The type of attribute to search for.</typeparam>
            <param name="parameter">
                Parameter whose custom attributes to search.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.HasPublicGetter(System.Reflection.PropertyInfo)">
            <summary>Determines whether a property has a public getter.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.IsStatic(System.Reflection.PropertyInfo)">
            <summary>Determines whether a property is static.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetDefaultValue(System.Type)">
            <summary>
                Returns the equivalent of <c>default(T)</c> for a <c>Type</c> object. For reference or nullable types, this is
                <c>null</c>, while for value types, it is the default value (e.g. <c>false</c>, <c>0</c>, etc.).</summary>
            <param name="type">
                The type to retrieve the default value for.</param>
        </member>
        <member name="T:RT.Util.ExtensionMethods.StreamExtensions">
            <summary>Provides extension methods on the <see cref="T:System.IO.Stream"/> type.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>Reads all bytes until the end of stream and returns them in a byte array.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAllBytesAsync(System.IO.Stream,System.Nullable{System.Threading.CancellationToken})">
            <summary>Reads all bytes until the end of stream and returns them in a byte array.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAllBytesGetLength(System.IO.Stream)">
            <summary>
                Reads all bytes until the end of stream and returns the number of bytes thus read without allocating too much
                memory.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAllBytesGetLengthAsync(System.IO.Stream,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Reads all bytes until the end of stream and returns the number of bytes thus read without allocating too much
                memory.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary>
                Reads all bytes from the current Stream and converts them into text using the specified encoding.</summary>
            <param name="stream">
                Stream to read from.</param>
            <param name="encoding">
                Encoding to expect the text to be in. If <c>null</c> then the UTF-8 encoding is used.</param>
            <returns>
                The text read from the stream.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAllTextAsync(System.IO.Stream,System.Text.Encoding,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Reads all bytes from the current Stream and converts them into text using the specified encoding.</summary>
            <param name="stream">
                Stream to read from.</param>
            <param name="encoding">
                Encoding to expect the text to be in. If <c>null</c> then the UTF-8 encoding is used.</param>
            <param name="token">
                A cancellation token for this async task.</param>
            <returns>
                The text read from the stream.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.Read(System.IO.Stream,System.Int32)">
            <summary>
                Attempts to read the specified number of bytes from the stream. If there are fewer bytes left before the end
                of the stream, a shorter (possibly empty) array is returned.</summary>
            <param name="stream">
                Stream to read from.</param>
            <param name="length">
                Number of bytes to read from the stream.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadAsync(System.IO.Stream,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Attempts to read the specified number of bytes from the stream. If there are fewer bytes left before the end
                of the stream, a shorter (possibly empty) array is returned.</summary>
            <param name="stream">
                Stream to read from.</param>
            <param name="length">
                Number of bytes to read from the stream.</param>
            <param name="token">
                A cancellation token for this async task.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>Writes the specified data to the current stream.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Writes the specified data to the current stream.</summary>
            <param name="stream">
                The stream to write data to.</param>
            <param name="data">
                The data to write to the stream.</param>
            <param name="token">
                A cancellation token for this async task.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.FillBuffer(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Attempts to fill the buffer with the specified number of bytes from the stream. If there are fewer bytes left
                in the stream than requested then all available bytes will be read into the buffer.</summary>
            <param name="stream">
                Stream to read from.</param>
            <param name="buffer">
                Buffer to write the bytes to.</param>
            <param name="offset">
                Offset at which to write the first byte read from the stream.</param>
            <param name="length">
                Number of bytes to read from the stream.</param>
            <returns>
                Number of bytes read from the stream into buffer. This may be less than requested, but only if the stream
                ended before the required number of bytes were read.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.FillBufferAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Attempts to fill the buffer with the specified number of bytes from the stream. If there are fewer bytes left
                in the stream than requested then all available bytes will be read into the buffer.</summary>
            <param name="stream">
                Stream to read from.</param>
            <param name="buffer">
                Buffer to write the bytes to.</param>
            <param name="offset">
                Offset at which to write the first byte read from the stream.</param>
            <param name="length">
                Number of bytes to read from the stream.</param>
            <param name="token">
                A cancellation token for this async task.</param>
            <returns>
                Number of bytes read from the stream into buffer. This may be less than requested, but only if the stream
                ended before the required number of bytes were read.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUtf8(System.IO.Stream,System.String)">
            <summary>
                Encodes the specified string as UTF-8 and writes it to the current stream.</summary>
            <param name="stream">
                Stream to write text to.</param>
            <param name="text">
                Text to write to the stream as UTF-8.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt32Optim(System.IO.Stream,System.Int32)">
            <summary>
                Encodes a 32-bit signed integer in a variable number of bytes, using fewer bytes for values closer to zero.</summary>
            <remarks>
                <para>
                    Writes an integer 7 bits at a time. This allows small integers to be stored in 1 byte, longer ones in 2,
                    at the cost of storing the longest ones in 5 bytes.</para>
                <para>
                    Example for a positive int:</para>
                <code>
                    00000000 00000000 01010101 01010101</code>
                <para>
                    becomes three bytes:</para>
                <code>
                    1,1010101 1,0101010 0,0000001</code>
                <para>
                    Example for a negative int:</para>
                <code>
                    11111111 11111111 11010101 01010101</code>
                <para>
                    becomes three bytes:</para>
                <code>
                    1,1010101 1,0101010 0,1111111</code>
                <para>
                    Note how an extra byte is needed in this example. This is similar to requiring a sign bit, however this
                    way the positive values are directly compatible with unsigned Optim values.</para></remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt32Optim(System.IO.Stream,System.UInt32)">
            <summary>
                Encodes a 32-bit unsigned integer in a variable number of bytes, using fewer bytes for smaller values.</summary>
            <remarks>
                See <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt32Optim(System.IO.Stream,System.Int32)"/> for the precise encoding.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt64Optim(System.IO.Stream,System.Int64)">
            <summary>
                Encodes a 64-bit signed integer in a variable number of bytes, using fewer bytes for values closer to zero.</summary>
            <remarks>
                See <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt32Optim(System.IO.Stream,System.Int32)"/> for the precise encoding.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt64Optim(System.IO.Stream,System.UInt64)">
            <summary>
                Encodes a 64-bit unsigned integer in a variable number of bytes, using fewer bytes for smaller values.</summary>
            <remarks>
                See <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt32Optim(System.IO.Stream,System.Int32)"/> for the precise encoding.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.WriteDecimalOptim(System.IO.Stream,System.Decimal)">
            <summary>
                Encodes a decimal in a variable number of bytes, using fewer bytes for frequently-occurring low-precision
                values.</summary>
            <remarks>
                <para>
                    The first byte is a "header" byte. Its top bit indicates the sign of the value, while the remaining 7 bits
                    encode the scale and the length, in bytes, of the mantissa component. Since the scale can be anything
                    between 0..28 and the length can be up to 12, this number is simply an index into a lookup table which
                    contains specific combinations of both values. These combinations were selected by analyzing the actual
                    distribution of mantissa length + exponent pairs making a few assumptions about the likely inputs into
                    arithmetic operations. The encoder makes sure to select a value representing the exact scale and the
                    minimum representable mantissa length.</para>
                <para>
                    The result is always at most 13 bytes long, which is the same as discarding the three unused bytes of the
                    raw representation.</para></remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadInt32Optim(System.IO.Stream)">
            <summary>
                Decodes an integer encoded by <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt32Optim(System.IO.Stream,System.Int32)"/> or <see
                cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt32Optim(System.IO.Stream,System.UInt32)"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadUInt32Optim(System.IO.Stream)">
            <summary>Decodes an integer encoded by <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt32Optim(System.IO.Stream,System.UInt32)"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadInt64Optim(System.IO.Stream)">
            <summary>
                Decodes an integer encoded by <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt64Optim(System.IO.Stream,System.Int64)"/> or <see
                cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt64Optim(System.IO.Stream,System.UInt64)"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadUInt64Optim(System.IO.Stream)">
            <summary>Decodes an integer encoded by <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt64Optim(System.IO.Stream,System.UInt64)"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StreamExtensions.ReadDecimalOptim(System.IO.Stream)">
            <summary>Decodes a decimal encoded by <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteDecimalOptim(System.IO.Stream,System.Decimal)"/>.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.StringExtensions">
            <summary>Provides extension methods on the <see cref="T:System.String"/> type.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.StringExtensions.CharsBase64Url">
            <summary>Contains the set of characters that are used in base64-url encoding.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
                Concatenates the specified number of repetitions of the current string.</summary>
            <param name="input">
                The string to be repeated.</param>
            <param name="numTimes">
                The number of times to repeat the string.</param>
            <returns>
                A concatenated string containing the original string the specified number of times.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.HtmlEscape(System.String,System.Boolean,System.Boolean)">
            <summary>
                Escapes all necessary characters in the specified string so as to make it usable safely in an HTML or XML
                context.</summary>
            <param name="input">
                The string to apply HTML or XML escaping to.</param>
            <param name="leaveSingleQuotesAlone">
                If <c>true</c>, does not escape single quotes (<c>'</c>, U+0027).</param>
            <param name="leaveDoubleQuotesAlone">
                If <c>true</c>, does not escape single quotes (<c>"</c>, U+0022).</param>
            <returns>
                The specified string with the necessary HTML or XML escaping applied.</returns>
        </member>
        <member name="P:RT.Util.ExtensionMethods.StringExtensions._urlAllowedBytes">
            <summary>Contains the set of ASCII characters allowed in a URL.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)">
            <summary>
                Escapes all necessary characters in the specified string so as to make it usable safely in a URL.</summary>
            <param name="input">
                The string to apply URL escaping to.</param>
            <returns>
                The specified string with the necessary URL escaping applied.</returns>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlUnescape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlUnescape(System.String)">
            <summary>
                Reverses the escaping performed by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)"/> by decoding hexadecimal URL escape sequences into
                their original characters.</summary>
            <param name="input">
                String containing URL escape sequences to be decoded.</param>
            <returns>
                The specified string with all URL escape sequences decoded.</returns>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)"/>
        </member>
        <member name="P:RT.Util.ExtensionMethods.StringExtensions._filenameDisallowedCharacters">
            <summary>Contains the set of characters disallowed in file names across all filesystems supported by our software.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersEscape(System.String,System.Boolean)">
            <summary>
                Escapes all characters in this string which cannot form part of a valid filename on at least one supported
                filesystem. The escaping is fully reversible (via <see cref="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersUnescape(System.String)"/>), but does not
                treat characters at specific positions differently (e.g. the "." at the end of the name is not escaped, even
                though it will disappear on a Win32 system).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersUnescape(System.String)">
            <summary>
                Reverses the transformation done by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersEscape(System.String,System.Boolean)"/>. This routine will also work on
                filenames that cannot have been generated by the above escape procedure; any "invalid" escapes will be
                preserved as-is.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf8(System.String)">
            <summary>
                Converts the specified string to UTF-8.</summary>
            <param name="input">
                String to convert to UTF-8.</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-8 encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf16(System.String)">
            <summary>
                Converts the specified string to UTF-16.</summary>
            <param name="input">
                String to convert to UTF-16.</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-16 encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf16BE(System.String)">
            <summary>
                Converts the specified string to UTF-16 (Big Endian).</summary>
            <param name="input">
                String to convert to UTF-16 (Big Endian).</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-16 (Big Endian) encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf8(System.Byte[],System.Boolean)">
            <summary>
                Converts the specified raw UTF-8 data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-8 text.</param>
            <param name="removeBom">
                <c>true</c> to remove the first character if it is a UTF-8 BOM.</param>
            <returns>
                A string containing the characters represented by the UTF-8-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf16(System.Byte[])">
            <summary>
                Converts the specified raw UTF-16 (little-endian) data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-16 text.</param>
            <returns>
                A string containing the characters represented by the UTF-16-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf16BE(System.Byte[])">
            <summary>
                Converts the specified raw UTF-16 (big-endian) data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-16BE text.</param>
            <returns>
                A string containing the characters represented by the UTF-16BE-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Utf8Length(System.String)">
            <summary>
                Determines the length of the UTF-8 encoding of the specified string.</summary>
            <param name="input">
                String to determined UTF-8 length of.</param>
            <returns>
                The length of the string in bytes when encoded as UTF-8.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Utf16Length(System.String)">
            <summary>
                Determines the length of the UTF-16 encoding of the specified string.</summary>
            <param name="input">
                String to determined UTF-16 length of.</param>
            <returns>
                The length of the string in bytes when encoded as UTF-16.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.JsEscapeNull(System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Returns a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped.
                Returns "null" if the input is null.</summary>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
            <returns>
                JavaScript- or JSON-compatible representation of the input string, or the "null" keyword if the input is null.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.JsEscape(System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Returns a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped.</summary>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
            <returns>
                JavaScript- or JSON-compatible representation of the input string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.AppendJsEscaped(System.Text.StringBuilder,System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Appends a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped
                into the specified StringBuilder.</summary>
            <param name="sb">
                The StringBuilder to add the result to.</param>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SqlEscape(System.String)">
            <summary>
                Returns an SQL-compatible representation of the string in single-quotes with the appropriate characters
                escaped.</summary>
            <param name="input">
                String to escape.</param>
            <returns>
                SQL-compatible representation of the input string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlEncode(System.Byte[])">
            <summary>
                Encodes this byte array to base-64-url format, which is safe for use in URLs and does not contain the
                unnecessary padding when the number of bytes is not divisible by 3.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlDecode(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlDecode(System.String)">
            <summary>
                Decodes this string from base-64-url encoding, which is safe for use in URLs and does not contain the
                unnecessary padding when the number of bytes is not divisible by 3, into a byte array.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlEncode(System.Byte[])"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)">
            <summary>
                Escapes all characters in this string whose code is less than 32 or form invalid UTF-16 using C/C#-compatible
                backslash escapes.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralUnescape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralUnescape(System.String)">
            <summary>
                Reverses the escaping done by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)"/>. Note that unescaping is not fully C/C#-compatible
                in the sense that not all strings that are valid string literals in C/C# can be correctly unescaped by this
                procedure.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns the specified collection, but with leading and trailing empty strings and nulls removed.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.WordWrap(System.String,System.Int32,System.Int32)">
            <summary>
                Word-wraps the current string to a specified width. Supports UNIX-style newlines and indented paragraphs.</summary>
            <remarks>
                <para>
                    The supplied text will be split into "paragraphs" at the newline characters. Every paragraph will begin on
                    a new line in the word-wrapped output, indented by the same number of spaces as in the input. All
                    subsequent lines belonging to that paragraph will also be indented by the same amount.</para>
                <para>
                    All multiple contiguous spaces will be replaced with a single space (except for the indentation).</para></remarks>
            <param name="text">
                Text to be word-wrapped.</param>
            <param name="maxWidth">
                The maximum number of characters permitted on a single line, not counting the end-of-line terminator.</param>
            <param name="hangingIndent">
                The number of spaces to add to each line except the first of each paragraph, thus creating a hanging
                indentation.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UnifyLineEndings(System.String)">
            <summary>Attempts to detect Unix-style and Mac-style line endings and converts them to Windows (\r\n).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlStartsWith(System.String,System.String)">
            <summary>
                Determines whether the specified URL starts with the specified URL path. For example, the URL
                "/directory/file" starts with "/directory" but not with "/dir".</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SubstringSafe(System.String,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32)"/> but does not throw exceptions when the start index falls outside
                the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> but does not throw exceptions when the start index or length
                (or both) fall outside the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.EqualsNoCase(System.String,System.String)">
            <summary>
                Determines whether this string is equal to the other string under the ordinal case-insensitive comparison
                (<see cref="F:System.StringComparison.OrdinalIgnoreCase"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ContainsNoCase(System.String,System.String)">
            <summary>
                Determines whether this string contains the other string under the ordinal case-insensitive comparison (<see
                cref="F:System.StringComparison.OrdinalIgnoreCase"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.EndsWith(System.String,System.Nullable{System.Char})">
            <summary>
                Returns true if and only if this string ends with the specified character.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.StartsWith(System.String,System.Nullable{System.Char})"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.StartsWith(System.String,System.Nullable{System.Char})">
            <summary>
                Returns true if and only if this string starts with the specified character.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.EndsWith(System.String,System.Nullable{System.Char})"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromHex(System.String)">
            <summary>Reconstructs a byte array from its hexadecimal representation (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Unindent(System.String)">
            <summary>
                Removes the overall indentation of the specified string while maintaining the relative indentation of each
                line.</summary>
            <param name="str">
                String to remove indentation from.</param>
            <returns>
                A string in which every line that isn’t all whitespace has had spaces removed from the beginning equal to the
                least amount of spaces at the beginning of any line.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Indent(System.String,System.Int32,System.Boolean)">
            <summary>
                Inserts spaces at the beginning of every line contained within the specified string.</summary>
            <param name="str">
                String to add indentation to.</param>
            <param name="by">
                Number of spaces to add.</param>
            <param name="indentFirstLine">
                If true (default), all lines are indented; otherwise, all lines except the first.</param>
            <returns>
                The indented string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.RemoveCommonIndentation(System.String)">
            <summary>
                Removes spaces from the beginning of every line in such a way that the smallest indentation is reduced to
                zero. Lines which contain only whitespace are not considered in the calculation and may therefore become
                empty.</summary>
            <param name="str">
                The string to transform.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Split(System.String,System.Int32)">
            <summary>
                Splits a string into chunks of equal size. The last chunk may be smaller than <paramref name="chunkSize"/>,
                but all chunks, if any, will contain at least 1 character.</summary>
            <param name="str">
                String to split into chunks.</param>
            <param name="chunkSize">
                Size of each chunk. Must be greater than zero.</param>
            <returns>
                A lazy-evaluated collection containing the chunks from the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Returns a new string in which all occurrences of <paramref name="oldValue"/> in the current instance,
                identified using the specified string comparison, are replaced with <paramref name="newValue"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Split(System.String,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are delimited by elements of a
                specified string array.</summary>
            <param name="str">
                String to be split.</param>
            <param name="separator">
                Strings that delimit the substrings in this string.</param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by one or more strings in
                separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SplitNoEmpty(System.String,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are delimited by elements of a
                specified string array. Empty items (zero-length strings) are filtered out.</summary>
            <param name="str">
                String to be split.</param>
            <param name="separator">
                Strings that delimit the substrings in this string.</param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by one or more strings in
                separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.IsNumeric(System.String)">
            <summary>Determines whether the string contains only the characters 0-9.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.AddLine(System.String,System.String)">
            <summary>Adds the specified line to the end of the current string. Returns the line if the current string is null.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.JsQuotes">
            <summary>Selects how the escaped JS string should be put into quotes.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.Single">
            <summary>Put single quotes around the output. Single quotes are allowed in JavaScript only, but not in JSON.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.Double">
            <summary>Put double quotes around the output. Double quotes are allowed both in JavaScript and JSON.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.None">
            <summary>Do not put any quotes around the output. The escaped output may be surrounded with either type of quotes.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.TextReaderWriterExtensions">
            <summary>
                Provides extension methods on the <see cref="T:System.IO.TextReader"/>, <see cref="T:System.IO.TextWriter"/>
                and any related types.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.TextReaderWriterExtensions.ReadLines(System.IO.TextReader)">
            <summary>
                Enumerates all (remaining) lines from this text reader, reading lines only when needed, and
                hence compatible with potentially blocking or infinite streams.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.XmlLinqExtensions">
            <summary>
                Provides extension methods on the classes belonging to the LINQ XML API (<see cref="T:System.Xml.Linq.XElement"/>, <see
                cref="T:System.Xml.Linq.XContainer"/>, and <see cref="T:System.Xml.Linq.XAttribute"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.Path(System.Xml.Linq.XContainer)">
            <summary>
                Returns the path to this element. The path consists of the names of all parents of this element up to the root
                node, separated with forward slashes.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.Path(System.Xml.Linq.XAttribute)">
            <summary>
                Returns the path of this attribute. The path consists of the <see fref="XElement.Path()"/> of this attribute's
                element, followed by attribute name in square brackets.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.ChkElement(System.Xml.Linq.XContainer,System.Xml.Linq.XName)">
            <summary>
                Returns the first element matching "name", or if none, throws an exception to say which element was missing
                which sub-element. This is a counterpart to <see cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.ChkAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
                Returns the first attribute matching "name", or if none, throws an exception to say which element was missing
                which attribute. This is a counterpart to <see cref="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.AsDouble(System.Xml.Linq.XAttribute)">
            <summary>
                Returns the value of this attribute, converted to a double. If the conversion cannot succeed, throws an
                exception describing which attribute was expected to be a double.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.ElementI(System.Xml.Linq.XElement,System.String)">
            <summary>
                Gets the first (in document order) child element with the specified local name (ignoring the namespace).</summary>
            <param name="element">
                XML element to search.</param>
            <param name="name">
                The name to match.</param>
            <returns>
                The first element found or <c>null</c> if no such element exists.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.ElementsI(System.Xml.Linq.XContainer,System.String)">
            <summary>
                Returns a filtered collection of the child elements of this element or document, in document order. Only
                elements that have the specified local name (ignoring the namespace) are included in the collection.</summary>
            <param name="element">
                XML element to search.</param>
            <param name="name">
                The name to match.</param>
            <returns>
                The first element found or <c>null</c> if no such element exists.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.AttributeI(System.Xml.Linq.XElement,System.String)">
            <summary>
                Returns the first attribute of this element that has the specified local name (ignoring the namespace).</summary>
            <param name="element">
                XML element to search.</param>
            <param name="name">
                The name to match.</param>
            <returns>
                The first attribute if found or <c>null</c> if no such attribute exists.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.XmlLinqExtensions.AttributesI(System.Xml.Linq.XElement,System.String)">
            <summary>
                Returns a filtered collection of attributes of this element. Only elements that have the specified local name
                (ignoring the namespace) are included in the collection.</summary>
            <param name="element">
                XML element to search.</param>
            <param name="name">
                The name to match.</param>
            <returns>
                The filtered collection of attributes..</returns>
        </member>
        <member name="T:RT.Util.ExtensionMethods.RngExtensions">
            <summary>Extension methods related to random number generation.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.RngExtensions.PickRandom``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
                Returns a random element from the specified collection.</summary>
            <typeparam name="T">
                The type of the elements in the collection.</typeparam>
            <param name="src">
                The collection to pick from.</param>
            <param name="rnd">
                Optionally, a random number generator to use.</param>
            <returns>
                The element randomly picked.</returns>
            <remarks>
                This method enumerates the entire input sequence into an array.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.RngExtensions.Shuffle``1(``0,System.Random)">
            <summary>
                Brings the elements of the given list into a random order.</summary>
            <typeparam name="T">
                Type of the list.</typeparam>
            <param name="list">
                List to shuffle.</param>
            <param name="rnd">
                Random number generator, or null to use <see cref="T:RT.Util.Rnd"/>.</param>
            <returns>
                The list operated on.</returns>
        </member>
        <member name="T:RT.Util.CommandRunner">
            <summary>
                Provides features to execute cmd.exe commands in a hidden window and retrieve their output. This class is geared
                heavily towards executing console programs, batch files and console scripts, but can also execute built-in
                commands and non-console programs. Because the command goes through cmd.exe, the PATH, PATHEXT and file
                associations are all automatically taken care of.</summary>
            <remarks>
                <para>
                    When the command completes, whether by exiting naturally or by being aborted, the <see cref="P:RT.Util.CommandRunner.State"/> changes
                    first. Then the <see cref="E:RT.Util.CommandRunner.CommandEnded"/> event fires. Finally, the <see cref="P:RT.Util.CommandRunner.EndedWaitHandle"/> is
                    signalled. By the time the <see cref="P:RT.Util.CommandRunner.State"/> has changed to <see cref="F:RT.Util.CommandRunnerState.Exited"/>, it is
                    guaranteed that all the output has been processed and the <see cref="P:RT.Util.CommandRunner.ExitCode"/> can be retrieved.</para>
                <para>
                    This class is thread-safe: all public members may be used from any thread.</para></remarks>
        </member>
        <member name="E:RT.Util.CommandRunner.CommandEnded">
            <summary>
                Raised once the command ends (that is, exits naturally or is aborted) and all the clean-up has completed. See
                Remarks.</summary>
            <remarks>
                When this event occurs, the <see cref="T:RT.Util.CommandRunner"/> is guaranteed to be in either the <see
                cref="F:RT.Util.CommandRunnerState.Exited"/> or <see cref="F:RT.Util.CommandRunnerState.Aborted"/> state. The <see
                cref="P:RT.Util.CommandRunner.EndedWaitHandle"/> will not have fired yet, and will only fire once this event handler is completed.</remarks>
        </member>
        <member name="E:RT.Util.CommandRunner.CommandResumed">
            <summary>
                Raised whenever the command execution resumes after it was paused. This includes manual calls to <see
                cref="M:RT.Util.CommandRunner.ResumePaused"/>.</summary>
        </member>
        <member name="E:RT.Util.CommandRunner.StdoutData">
            <summary>
                Raised whenever the command has produced new output on stdout (but no more often than about once in 50ms).</summary>
        </member>
        <member name="E:RT.Util.CommandRunner.StderrData">
            <summary>
                Raised whenever the command has produced new output on stderr (but no more often than about once in 50ms).</summary>
        </member>
        <member name="E:RT.Util.CommandRunner.StdoutText">
            <summary>
                Raised whenever the command has produced new text on stdout. For ASCII outputs, this is identical to <see
                cref="E:RT.Util.CommandRunner.StdoutData"/>, however utf8-encoded text is guaranteed to correctly handle the possibility that part of
                a character's encoding has not been output yet. Other encodings are not supported.</summary>
        </member>
        <member name="E:RT.Util.CommandRunner.StderrText">
            <summary>Same as <see cref="E:RT.Util.CommandRunner.StdoutText"/> but for stderr.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.CaptureEntireStdout">
            <summary>
                Specifies whether the entire stdout output should be captured. This can consume large amounts of memory, and
                so defaults to <c>false</c>.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.CaptureEntireStderr">
            <summary>
                Specifies whether the entire stderr output should be captured. This can consume large amounts of memory, and
                so defaults to <c>false</c>.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.EntireStdout">
            <summary>
                Gets the entire stdout output produced by the program. This property can only be accessed once the command has
                ended (exited or aborted), and only if <see cref="P:RT.Util.CommandRunner.CaptureEntireStdout"/> is <c>true</c>. You may modify the
                returned array, but subsequent invocations will then return the modified array. The relative interleaving of
                stdout and stderr is not preserved in this property.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.EntireStderr">
            <summary>
                Gets the entire stderr output produced by the program. This property can only be accessed once the command has
                ended (exited or aborted), and only if <see cref="P:RT.Util.CommandRunner.CaptureEntireStderr"/> is <c>true</c>. You may modify the
                returned array, but subsequent invocations will then return the modified array. The relative interleaving of
                stdout and stderr is not preserved in this property.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.EndedWaitHandle">
            <summary>
                Exposes a waitable flag indicating whether the command has ended, either by exiting naturally or by being
                aborted. See also Remarks on <see cref="T:RT.Util.CommandRunner"/>.</summary>
            <remarks>
                Calling Set or Reset will result in corruption and undefined behaviour. This should be a read-only waitable
                flag, but there is no built-in class</remarks>
        </member>
        <member name="P:RT.Util.CommandRunner.State">
            <summary>
                Indicates the current state of the runner. Some properties are only readable and/or writable in specific
                states. Note that this property is not guaranteed to reflect whether the actual command is running or not, or
                whether a call to <see cref="M:RT.Util.CommandRunner.Abort"/> resulted in the command of being terminated; rather, this is the logical
                state of the <see cref="T:RT.Util.CommandRunner"/> itself.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.ExitCode">
            <summary>
                Gets the exit code returned by the command. If the command has not started or exited yet, or has been aborted,
                this method will throw an <see cref="T:System.InvalidOperationException"/>.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.Command">
            <summary>
                The command to be executed, as a single string. Any command supported by cmd.exe is permitted. See also <see
                cref="M:RT.Util.CommandRunner.SetCommand(System.String[])"/>, which simplifies running commands with spaces and/or arguments. Once the
                command has been started, this property becomes read-only and indicates the value in effect at the time of
                starting. See Remarks.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.WorkingDirectory">
            <summary>
                The working directory to be used when starting the command. Once the command has been started, this property
                becomes read-only and indicates the value in effect at the time of starting.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.EnvironmentVariables">
            <summary>
                Overrides for the environment variables to be set for the command process. These overrides are in addition to
                the variables inherited from the current process.</summary>
        </member>
        <member name="P:RT.Util.CommandRunner.RunAsUser">
            <summary>
                Credentials and parameters used to run the command as a different user. Null to run as the same user as the
                current process. Once the command has been started, this property becomes read-only and indicates the value in
                effect at the time of starting.</summary>
        </member>
        <member name="M:RT.Util.CommandRunner.SetCommand(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Sets the <see cref="P:RT.Util.CommandRunner.Command"/> property by concatenating the command and any arguments while escaping values
                with spaces. Each value must be a single command / executable / script / argument. Null values are allowed and
                are skipped as if they weren't present. See Remarks.</summary>
            <remarks>
                Example: <c>SetCommand(new[] { @"C:\Program Files\Foo\Foo.exe", "-f", @"C:\Some Path\file.txt" });</c></remarks>
        </member>
        <member name="M:RT.Util.CommandRunner.SetCommand(System.String[])">
            <summary>
                Sets the <see cref="P:RT.Util.CommandRunner.Command"/> property by concatenating the command and any arguments while escaping values
                with spaces. Each value must be a single command / executable / script / argument. Null values are allowed and
                are skipped as if they weren't present. See Remarks.</summary>
            <remarks>
                Example: <c>SetCommand(new[] { @"C:\Program Files\Foo\Foo.exe", "-f", @"C:\Some Path\file.txt" });</c></remarks>
        </member>
        <member name="M:RT.Util.CommandRunner.Start(System.Byte[])">
            <summary>
                Starts the command with all the settings as configured.</summary>
            <param name="stdin">
                Provides a byte stream to be passed to the process’s standard input.</param>
        </member>
        <member name="M:RT.Util.CommandRunner.StartAndWait">
            <summary>Starts the command with all the settings as configured. Does not return until the command exits.</summary>
        </member>
        <member name="M:RT.Util.CommandRunner.ArgsToCommandLine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Given a number of argument strings, constructs a single command line string with all the arguments escaped
                correctly so that a process using standard Windows API for parsing the command line will receive exactly the
                strings passed in here. See Remarks.</summary>
            <remarks>
                The string is only valid for passing directly to a process. If the target process is invoked by passing the
                process name + arguments to cmd.exe then further escaping is required, to counteract cmd.exe's interpretation
                of additional special characters. See <see cref="M:RT.Util.CommandRunner.EscapeCmdExeMetachars(System.String)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CommandRunner.EscapeCmdExeMetachars(System.String)">
            <summary>
                Escapes all cmd.exe meta-characters by prefixing them with a ^. See <see cref="M:RT.Util.CommandRunner.ArgsToCommandLine(System.Collections.Generic.IEnumerable{System.String})"/> for more
                information.</summary>
        </member>
        <member name="M:RT.Util.CommandRunner.Abort">
            <summary>
                Aborts the command by killing the process and all its children, if any. Throws if the command has not been
                started yet. Does nothing if the command has already ended. See Remarks.</summary>
            <remarks>
                It is theoretically possible that this method will fail to terminate a child, if called at exactly the wrong
                time while a child process is being spawned. To avoid this possibility, pause the process tree first by
                calling <see cref="M:RT.Util.CommandRunner.Pause(System.Nullable{System.TimeSpan})"/> (but see its remarks too).</remarks>
        </member>
        <member name="P:RT.Util.CommandRunner.PausedUntil">
            <summary>
                Gets the time at which the command will wake up again, <c>DateTime.MaxValue</c> if the command is paused
                indefinitely, or null if the command is not paused.</summary>
        </member>
        <member name="M:RT.Util.CommandRunner.Pause(System.Nullable{System.TimeSpan})">
            <summary>
                Pauses the command for the specified duration by suspending every thread in every process in the process tree.
                Throws if the command hasn't been started or has been aborted. Does nothing if the command has exited. If
                called when already paused, will make sure the command is paused for at least the specified duration, but will
                not shorten the resume timer. See Remarks.</summary>
            <param name="duration">
                Pause duration. Zero and negative intervals do not pause the command at all. Use <c>TimeSpan.MaxValue</c> or
                <c>null</c> for an indefinite pause.</param>
            <remarks>
                It is theoretically possible for this to fail to suspend all threads in all processes, if a new thread is
                created while the threads are being suspended. The current code does not address this scenario, but this can
                be fixed, if necessary.</remarks>
        </member>
        <member name="M:RT.Util.CommandRunner.ResumePaused">
            <summary>
                Resumes the command after it has been paused. If the command was paused with a timeout, the timer is cleared.
                Throws if the command has not been started yet or has been aborted. Does nothing if the command is not paused.</summary>
        </member>
        <member name="M:RT.Util.CommandRunner.Run(System.String[])">
            <summary>
                Executes the specified command using a fluid syntax. Use method chaining to configure any options, then invoke
                <see cref="M:RT.Util.FluidCommandRunner.Go"/> (or one of its variants) to execute the command. See Remarks.</summary>
            <param name="args">
                The command and its arguments, if any. Each value is automatically escaped as needed. See <see
                cref="M:RT.Util.CommandRunner.SetCommand(System.String[])"/> for further information. See <see cref="M:RT.Util.CommandRunner.RunRaw(System.String)"/> for an alternative way to
                specify the command.</param>
            <remarks>
                <para>
                    The default options are as follows: 0 is the only exit code indicating success; print the command output
                    to the console as-is.</para>
                <para>
                    Example: <c>CommandRunner.Run(@"C:\Program Files\Foo\Foo.exe", "-f", @"C:\Some
                    Path\file.txt").SuccessExitCodes(0, 1).OutputNothing().Go();</c></para></remarks>
        </member>
        <member name="M:RT.Util.CommandRunner.RunRaw(System.String)">
            <summary>
                Executes the specified command using a fluid syntax. Use method chaining to configure any options, then invoke
                <see cref="M:RT.Util.FluidCommandRunner.Go"/> (or one of its variants) to execute the command. See Remarks.</summary>
            <param name="command">
                The command and its arguments. All arguments must be escaped as appropriate.</param>
            <remarks>
                <para>
                    The default options are as follows: 0 is the only exit code indicating success; print the command output
                    to the console as-is.</para>
                <para>
                    Example: <c>CommandRunner.RunRaw(@"C:\Program Files\Foo\Foo.exe -f ""C:\Some
                    Path\file.txt""").SuccessExitCodes(0, 1).Go();</c></para></remarks>
        </member>
        <member name="T:RT.Util.CommandRunnerState">
            <summary>Represents one of the possible states a <see cref="T:RT.Util.CommandRunner"/> can have.</summary>
        </member>
        <member name="F:RT.Util.CommandRunnerState.NotStarted">
            <summary>The command has not been started yet.</summary>
        </member>
        <member name="F:RT.Util.CommandRunnerState.Started">
            <summary>
                The command has started and has neither been aborted yet nor has exited on its own. This state does not
                guarantee that the process in which the command is executed has already started, nor that it has not yet
                terminated.</summary>
        </member>
        <member name="F:RT.Util.CommandRunnerState.Exited">
            <summary>The command has exited on its own, without the runner terminating it.</summary>
        </member>
        <member name="F:RT.Util.CommandRunnerState.Aborted">
            <summary>
                The command has been terminated by the runner. This state does not guarantee that the process in which the
                command is executed has already been killed.</summary>
        </member>
        <member name="T:RT.Util.RunAsUserParams">
            <summary>Specifies credentials and settings required to run a process as a different user.</summary>
        </member>
        <member name="P:RT.Util.RunAsUserParams.Username">
            <summary>Gets the name of the user account under which to run the process.</summary>
        </member>
        <member name="P:RT.Util.RunAsUserParams.Password">
            <summary>Gets the password for the <see cref="P:RT.Util.RunAsUserParams.Username"/> account.</summary>
        </member>
        <member name="P:RT.Util.RunAsUserParams.LoadProfile">
            <summary>Gets a value indicating whether the user profile is to be loaded, which can be time-consuming.</summary>
        </member>
        <member name="P:RT.Util.RunAsUserParams.Domain">
            <summary>Specifies the ActiveDirectory domain of the required user account.</summary>
        </member>
        <member name="M:RT.Util.RunAsUserParams.#ctor(System.String,System.Security.SecureString,System.Boolean,System.String)">
            <summary>
                Constructor.</summary>
            <param name="username">
                The name of the user account under which to run the process.</param>
            <param name="password">
                The password for the <paramref name="username"/> account.</param>
            <param name="loadProfile">
                Specifies whether the target process will access the HKCU registry area. Loading the user profile can be
                time-consuming, so it is optional.</param>
            <param name="domain">
                ActiveDirectory domain of the required user account.</param>
        </member>
        <member name="M:RT.Util.RunAsUserParams.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
                Constructor.</summary>
            <param name="username">
                The name of the user account under which to run the process.</param>
            <param name="password">
                The password for the <paramref name="username"/> account.</param>
            <param name="loadProfile">
                Specifies whether the target process will access the HKCU registry area. Loading the user profile can be
                time-consuming, so it is optional.</param>
            <param name="domain">
                ActiveDirectory domain of the required user account.</param>
        </member>
        <member name="T:RT.Util.FluidCommandRunner">
            <summary>Implements method chaining for <see cref="M:RT.Util.CommandRunner.Run(System.String[])"/>.</summary>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.SuccessExitCodes(System.Int32[])">
            <summary>Specifies which exit codes represent a successful invocation. All other codes are interpreted as failure.</summary>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.FailExitCodes(System.Int32[])">
            <summary>
                Specifies which exit codes represent a failed invocation. All other codes are interpreted as success. Mutually
                exclusive with <see cref="M:RT.Util.FluidCommandRunner.SuccessExitCodes(System.Int32[])"/>.</summary>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.OutputNothing">
            <summary>
                Configures the runner to suppress all output. This invocation will print nothing to the console. If
                unspecified, the command's stdout output is relayed to the console as-is, while stderr is relayed in red.</summary>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.OutputAugmented(System.Boolean)">
            <summary>
                Configures the runner to relay the command's output to the console, prefixing every line with a timestamp. The
                entire command is printed before running it. When the command completes, its success/failure status is
                printed, along with its run time and exit code.</summary>
            <param name="invokeCount">
                If true, the prefix also includes a value that increments for every invocation, starting at 1.</param>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.Go">
            <summary>
                Invokes the command, blocking until the command finishes. If the command fails, throws a <see
                cref="T:RT.Util.CommandRunnerFailedException"/>. See also <see cref="M:RT.Util.FluidCommandRunner.GoGetExitCode"/>.</summary>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.GoGetOutput">
            <summary>
                Invokes the command, blocking until the command finishes. On success, returns the raw output of the command.
                If the command fails, throws a <see cref="T:RT.Util.CommandRunnerFailedException"/>. See Remarks.</summary>
            <remarks>
                Output options such as <see cref="M:RT.Util.FluidCommandRunner.OutputAugmented(System.Boolean)"/> do not affect the data returned; they influence only how
                the output is relayed to the console. This method ignores all stderr output.</remarks>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.GoGetOutputText">
            <summary>
                Invokes the command, blocking until the command finishes. On success, returns the raw output of the command,
                interpreted as text in UTF-8. If the command fails, throws a <see cref="T:RT.Util.CommandRunnerFailedException"/>. See
                Remarks.</summary>
            <remarks>
                Output options such as <see cref="M:RT.Util.FluidCommandRunner.OutputAugmented(System.Boolean)"/> do not affect the data returned; they influence only how
                the output is relayed to the console. This method ignores all stderr output.</remarks>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.GoGetExitCode">
            <summary>
                Invokes the command, blocking until the command finishes. Returns the command's exit code. Does not throw if
                the command failed.</summary>
        </member>
        <member name="M:RT.Util.FluidCommandRunner.WithWorkingDirectory(System.String)">
            <summary>Sets the working directory for the command to the specified directory.</summary>
        </member>
        <member name="T:RT.Util.CommandRunnerFailedException">
            <summary>Indicates that a command returned an exit code indicating a failure.</summary>
        </member>
        <member name="P:RT.Util.CommandRunnerFailedException.ExitCode">
            <summary>The exit code returned.</summary>
        </member>
        <member name="M:RT.Util.CommandRunnerFailedException.#ctor(System.Int32)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.Util.Consoles.ColoredConsoleOut">
            <summary>Implements a <see cref="T:System.IO.TextWriter"/> which outputs text to the console in a predetermined <see cref="T:System.ConsoleColor"/>.</summary>
            <remarks>Every time a string is output to the console, the current console foreground colour is remembered and returned to its previous value after the output.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ColoredConsoleOut.#ctor(System.ConsoleColor)">
            <summary>Constructor.</summary>
            <param name="color">Specifies the colour in which to output text to the console.</param>
        </member>
        <member name="P:RT.Util.Consoles.ColoredConsoleOut.Encoding">
            <summary><see cref="T:System.IO.TextWriter"/> requires this to be overridden. This returns <see cref="P:System.Text.Encoding.UTF8"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ColoredConsoleOut.Write(System.Char)">
            <summary>Writes the specified character to the console.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ColoredConsoleOut.Write(System.String)">
            <summary>Writes the specified string to the console.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ColoredConsoleOut.WriteLine">
            <summary>Outputs a newline to the console.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ColoredConsoleOut.WriteLine(System.String)">
            <summary>Outputs the specified text plus a newline to the console.</summary>
        </member>
        <member name="T:RT.Util.Consoles.ConsoleColoredString">
            <summary>
                Encapsulates a string in which each character can have an associated <see cref="T:System.ConsoleColor"/>.</summary>
            <remarks>
                <list type="bullet">
                    <item><description>
                        Use <see cref="M:RT.Util.Consoles.ConsoleUtil.Write(RT.Util.Consoles.ConsoleColoredString,System.Boolean)"/> and <see
                        cref="M:RT.Util.Consoles.ConsoleUtil.WriteLine(RT.Util.Consoles.ConsoleColoredString,System.Boolean,RT.Util.Text.HorizontalTextAlignment)"/> to output
                        the string to the console.</description></item>
                    <item><description>
                        Each character has two optional <see cref="T:System.ConsoleColor"/> values associated with it, one indicating the
                        foreground color and one the background color. Those characters whose color is <c>null</c> are printed in
                        the default color of the console (which the user can customize in the console window UI).</description></item></list></remarks>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredString.Empty">
            <summary>Represents an empty colored string. This field is read-only.</summary>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredString.NewLine">
            <summary>Represents the environment's newline, colored in the default color. This field is read-only.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.op_Implicit(System.String)~RT.Util.Consoles.ConsoleColoredString">
            <summary>
                Provides implicit conversion from <see cref="T:System.String"/> to <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
            <param name="input">
                The string to convert.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.op_Explicit(RT.Util.Consoles.ConsoleColoredString)~System.String">
            <summary>
                Provides explicit conversion from <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> to <see cref="T:System.String"/> by discarding all
                color information.</summary>
            <param name="input">
                The string to convert.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor">
            <summary>Initializes an empty <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> with the specified text and the specified colors.</summary>
            <param name="input">
                The string containing the text to initialize this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> to.</param>
            <param name="foreground">
                The foreground color to assign to the whole string.</param>
            <param name="background">
                The background color to assign to the whole string.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor(System.String,System.Nullable{System.ConsoleColor}[],System.Nullable{System.ConsoleColor}[])">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> with the specified text and the specified colors for each
                character.</summary>
            <param name="input">
                The string containing the text to initialize this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> to. The length of this
                string must match the number of elements in <paramref name="foregroundColors"/>.</param>
            <param name="foregroundColors">
                The foreground colors to assign to each character in the string. The length of this array must match the
                number of characters in <paramref name="input"/>.</param>
            <param name="backgroundColors">
                The background colors to assign to each character in the string. The length of this array must match the
                number of characters in <paramref name="input"/>. If <c>null</c>, the default color is used.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor(RT.Util.Consoles.ConsoleColoredString[])">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> by concatenating the specified <see
                cref="T:RT.Util.Consoles.ConsoleColoredString"/>s.</summary>
            <param name="strings">
                Input strings to concatenate.</param>
            <remarks>
                The color of each character in the input strings is preserved.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Remove(System.Int32)">
            <summary>
                Returns a new <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> in which all characters from the specified <paramref
                name="startIndex"/> onwards have been removed.</summary>
            <param name="startIndex">
                Index of the first character to remove.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Remove(System.Int32,System.Int32)">
            <summary>
                Returns a new <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> in which the specified range of characters has been removed.</summary>
            <param name="startIndex">
                Index of the start of the range of characters to remove.</param>
            <param name="count">
                Number of characters to remove from the <paramref name="startIndex"/> onwards.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor(System.Collections.Generic.ICollection{RT.Util.Consoles.ConsoleColoredString})">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> by concatenating the specified <see
                cref="T:RT.Util.Consoles.ConsoleColoredString"/>s.</summary>
            <param name="strings">
                Input strings to concatenate.</param>
            <remarks>
                The color of each character in the input strings is preserved.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor(RT.Util.Consoles.ConsoleColoredChar[])">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> by concatenating the specified <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/>s.</summary>
            <param name="characters">
                Input characters to concatenate.</param>
            <remarks>
                The color of each character in the input strings is preserved.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.#ctor(System.FormattableString,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> from the specified <see cref="T:System.FormattableString"/>.</summary>
            <param name="value">
                Formattable string. You can use an interpolated string literal here.</param>
            <param name="foreground">
                Default foreground color when an interpolated variable isn’t a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> or <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/> or a foreground color is unspecified.</param>
            <param name="background">
                Default background color when an interpolated variable isn’t a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> or <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/> or a background color is unspecified.</param>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredString.Length">
            <summary>Returns the number of characters in this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ToString">
            <summary>Returns the raw text of this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> by discarding all the color information.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.op_Addition(RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString)">
            <summary>
                Concatenates two <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>s.</summary>
            <param name="string1">
                First input string to concatenate.</param>
            <param name="string2">
                Second input string to concatenate.</param>
            <remarks>
                The color of each character in the input strings is preserved.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.op_Addition(RT.Util.Consoles.ConsoleColoredString,System.String)">
            <summary>
                Concatenates a string onto a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
            <param name="string1">
                First input string to concatenate.</param>
            <param name="string2">
                Second input string to concatenate.</param>
            <remarks>
                The color of each character in the first input string is preserved. The second input string is given the
                console default color.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.op_Addition(System.String,RT.Util.Consoles.ConsoleColoredString)">
            <summary>
                Concatenates a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> onto a string.</summary>
            <param name="string1">
                First input string to concatenate.</param>
            <param name="string2">
                Second input string to concatenate.</param>
            <remarks>
                The color of each character in the second input string is preserved. The first input string is given the
                console default color.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.FromEggsNode(RT.Util.EggsNode)">
            <summary>
                Constructs a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> from an EggsML parse tree.</summary>
            <param name="node">
                The root node of the EggsML parse tree.</param>
            <returns>
                The <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> constructed from the EggsML parse tree.</returns>
            <remarks>
                <para>
                    The following EggsML tags map to the following console colors:</para>
                <list type="bullet">
                    <item><description>
                        <c>~</c> = black, or dark gray if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>/</c> = dark blue, or blue if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>$</c> = dark green, or green if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>&amp;</c> = dark cyan, or cyan if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>_</c> = dark red, or red if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>%</c> = dark magenta, or magenta if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>^</c> = dark yellow, or yellow if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>=</c> = dark gray (independent of <c>*</c> tag)</description></item></list>
                <para>
                    Text which is not inside any of the above color tags defaults to light gray, or white if inside a <c>*</c>
                    tag.</para></remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.CharAt(System.Int32)">
            <summary>
                Returns the character at the specified index.</summary>
            <param name="index">
                A character position in the current <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</param>
            <returns>
                The character at the specified index.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.Char)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.Char)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.String)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.String)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.Char,System.Int32)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.Char,System.Int32)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.String,System.Int32)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.String,System.Int32)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.String,System.StringComparison)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.String,System.StringComparison)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>Equivalent to <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Insert(System.Int32,RT.Util.Consoles.ConsoleColoredString)">
            <summary>
                Returns a new string in which a specified string is inserted at a specified index position in this instance.</summary>
            <param name="startIndex">
                The zero-based index position of the insertion.</param>
            <param name="value">
                The string to insert.</param>
            <returns>
                A new string that is equivalent to this instance, but with <paramref name="value"/> inserted at position
                <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Split(System.String[],System.Nullable{System.Int32},System.StringSplitOptions)">
            <summary>
                Returns a string array that contains the substrings in this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> that are
                delimited by elements of a specified string array. Parameters specify the maximum number of substrings to
                return and whether to return empty array elements.</summary>
            <param name="separator">
                An array of strings that delimit the substrings in this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>, an empty array
                that contains no delimiters, or null.</param>
            <param name="count">
                The maximum number of substrings to return, or null to return all.</param>
            <param name="options">
                Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array
                returned, or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array
                returned.</param>
            <returns>
                A collection whose elements contain the substrings in this <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> that are
                delimited by one or more strings in <paramref name="separator"/>.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Substring(System.Int32)">
            <summary>
                Retrieves a substring from this instance. The substring starts at a specified character position.</summary>
            <param name="startIndex">
                The zero-based starting character position of a substring in this instance.</param>
            <returns>
                A <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> object equivalent to the substring that begins at <paramref
                name="startIndex"/> in this instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Substring(System.Int32,System.Int32)">
            <summary>
                Retrieves a substring from this instance. The substring starts at a specified character position and has a
                specified length.</summary>
            <param name="startIndex">
                The zero-based starting character position of a substring in this instance.</param>
            <param name="length">
                The number of characters in the substring.</param>
            <returns>
                A <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> equivalent to the substring of length length that begins at <paramref
                name="startIndex"/> in this instance.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.writeTo(System.IO.TextWriter)">
            <summary>Outputs the current <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> to the console.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Format(RT.Util.Consoles.ConsoleColoredString,System.Object[])">
            <summary>
                Replaces each format item in a specified string with the string representation of a corresponding object in a
                specified array.</summary>
            <param name="format">
                A composite format string.</param>
            <param name="args">
                An object array that contains zero or more objects to format.</param>
            <returns>
                A copy of <paramref name="format"/> in which the format items have been replaced by the string representation
                of the corresponding objects in <paramref name="args"/>.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Format(RT.Util.Consoles.ConsoleColoredString,System.IFormatProvider,System.Object[])">
            <summary>
                Replaces the format item in a specified string with the string representation of a corresponding object in a
                specified array. A specified parameter supplies culture-specific formatting information.</summary>
            <param name="provider">
                An object that supplies culture-specific formatting information.</param>
            <param name="format">
                A composite format string.</param>
            <param name="args">
                An object array that contains zero or more objects to format.</param>
            <returns>
                A copy of <paramref name="format"/> in which the format items have been replaced by the string representation
                of the corresponding objects in <paramref name="args"/>.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Fmt(System.Object[])">
            <summary>Equivalent to <see cref="M:RT.Util.Consoles.ConsoleColoredString.Format(RT.Util.Consoles.ConsoleColoredString,System.Object[])"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Fmt(System.IFormatProvider,System.Object[])">
            <summary>Equivalent to <see cref="M:RT.Util.Consoles.ConsoleColoredString.Format(RT.Util.Consoles.ConsoleColoredString,System.IFormatProvider,System.Object[])"/>.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.FmtEnumerable(System.Object[])">
            <summary>
                Formats the specified objects into this format string. The result is an enumerable collection which enumerates
                parts of the format string interspersed with the arguments as appropriate.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.FmtEnumerable(System.IFormatProvider,System.Object[])">
            <summary>
                Formats the specified objects into this format string. The result is an enumerable collection which enumerates
                parts of the format string interspersed with the arguments as appropriate.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.GetColors">
            <summary>
                Returns an array describing the foreground color of every character in the current string.</summary>
            <returns>
                A copy of the internal color array. Modifying the returned array is safe.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.GetBackgroundColors">
            <summary>
                Returns an array describing the background color of every character in the current string.</summary>
            <returns>
                A copy of the internal color array. Modifying the returned array is safe.</returns>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredString.Item(System.Int32)">
            <summary>
                Gets the character and color at a specified character position in the current colored string.</summary>
            <param name="index">
                A character position in the current colored string.</param>
            <returns>
                A Unicode character with console colors.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="index"/> is greater than or equal to the length of this string or less than zero.</exception>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Color(System.Nullable{System.ConsoleColor})">
            <summary>
                Changes the foreground colors (but not the background colors) of every character in the current string to the
                specified console color.</summary>
            <param name="foreground">
                The foreground color to set the string to, or <c>null</c> to use the console’s default foreground color.</param>
            <returns>
                The current string but with the foreground colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Color(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Changes the colors of every character in the current string to the specified set of console colors.</summary>
            <param name="foreground">
                The foreground color to set the string to, or <c>null</c> to use the console’s default foreground color.</param>
            <param name="background">
                The background color to set the string to, or <c>null</c> to use the console’s default background color.</param>
            <returns>
                The current string but with all the colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorWhereNull(System.ConsoleColor,System.Nullable{System.ConsoleColor})">
            <summary>
                Changes the colors of every character in the current string to the specified console color only where there
                isn’t already a color defined.</summary>
            <param name="foreground">
                The foreground color to set the uncolored characters to, or <c>null</c> to use the console’s default
                foreground color.</param>
            <param name="background">
                The background color to set the uncolored characters to, or <c>null</c> to use the console’s default
                background color.</param>
            <returns>
                The current string but with the colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorBackground(System.Nullable{System.ConsoleColor})">
            <summary>
                Changes the background colors (but not the foreground colors) of every character in the current string to the
                specified console color.</summary>
            <param name="background">
                The background color to set the string to, or <c>null</c> to use the console’s default background color.</param>
            <returns>
                The current string but with the background colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorBackgroundWhereNull(System.ConsoleColor)">
            <summary>
                Changes the background colors of every character in the current string to the specified console color only
                where there isn’t already a background color defined.</summary>
            <param name="background">
                The background color to set the uncolored characters to, or <c>null</c> to use the console’s default
                background color.</param>
            <returns>
                The current string but with the background colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorSubstring(System.Int32,System.Int32,System.Nullable{System.ConsoleColor})">
            <summary>
                Colors the specified range within the current string in a specified foreground color.</summary>
            <param name="index">
                The index at which to start coloring.</param>
            <param name="length">
                The number of characters to color.</param>
            <param name="foreground">
                The foreground color to assign to the range of characters, or <c>null</c> to use the console’s default
                foreground color.</param>
            <returns>
                The current string but with some of the foreground colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorSubstring(System.Int32,System.Int32,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Colors the specified range within the current string in the specified colors.</summary>
            <param name="index">
                The index at which to start coloring.</param>
            <param name="length">
                The number of characters to color.</param>
            <param name="foreground">
                The foreground color to assign to the range of characters, or <c>null</c> to use the console’s default
                foreground color.</param>
            <param name="background">
                The background color to assign to the range of characters, or <c>null</c> to use the console’s default
                background color.</param>
            <returns>
                The current string but with some of the colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorSubstring(System.Int32,System.Nullable{System.ConsoleColor})">
            <summary>
                Colors a range of characters beginning at a specified index within the current string in a specified
                foreground color.</summary>
            <param name="index">
                The index at which to start coloring.</param>
            <param name="foreground">
                The foreground color to assign to the characters starting from the character at <paramref name="index"/>, or
                <c>null</c> to use the console’s default foreground color.</param>
            <returns>
                The current string but with some of the foreground colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorSubstring(System.Int32,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Colors a range of characters beginning at a specified index within the current string in the specified colors.</summary>
            <param name="index">
                The index at which to start coloring.</param>
            <param name="foreground">
                The foreground color to assign to the characters starting from the character at <paramref name="index"/>, or
                <c>null</c> to use the console’s default foreground color.</param>
            <param name="background">
                The background color to assign to the characters starting from the character at <paramref name="index"/>, or
                <c>null</c> to use the console’s default background color.</param>
            <returns>
                The current string but with some of the colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorSubstringBackground(System.Int32,System.Int32,System.Nullable{System.ConsoleColor})">
            <summary>
                Colors the specified range within the current string in a specified background color.</summary>
            <param name="index">
                The index at which to start coloring.</param>
            <param name="length">
                The number of characters to color.</param>
            <param name="background">
                The background color to assign to the range of characters, or <c>null</c> to use the console’s default
                background color.</param>
            <returns>
                The current string but with some of the background colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ColorSubstringBackground(System.Int32,System.Nullable{System.ConsoleColor})">
            <summary>
                Colors a range of characters beginning at a specified index within the current string in a specified
                background color.</summary>
            <param name="index">
                The index at which to start coloring.</param>
            <param name="background">
                The background color to assign to the characters starting from the character at <paramref name="index"/>, or
                <c>null</c> to use the console’s default background color.</param>
            <returns>
                The current string but with some of the background colors changed.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Replace(System.Char,System.Char)">
            <summary>
                Returns a new <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> in which every occurrence of <paramref name="oldChar"/> is
                replaced with <paramref name="newChar"/> while each character’s color remains unchanged.</summary>
            <param name="oldChar">
                The character to search for.</param>
            <param name="newChar">
                The character to replace every occurrence of <paramref name="oldChar"/> with.</param>
            <returns>
                The new string after replacements.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.Replace(System.String,RT.Util.Consoles.ConsoleColoredString,System.StringComparison)">
            <summary>
                Returns a new <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> in which every occurrence of the text in <paramref
                name="oldValue"/> is replaced with a new colored string.</summary>
            <param name="oldValue">
                The substring to search for.</param>
            <param name="newValue">
                The new colored string to replace every occurrence with.</param>
            <param name="comparison">
                A string comparison to use.</param>
            <returns>
                The new string after replacements.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.ReplaceText(System.String,System.String,System.StringComparison)">
            <summary>
                Returns a new <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> in which every occurrence of the text in <paramref
                name="oldValue"/> is replaced with the text in <paramref name="newValue"/> colored by the color of the first
                character in each match.</summary>
            <param name="oldValue">
                The substring to search for.</param>
            <param name="newValue">
                The new string to replace every occurrence with.</param>
            <param name="comparison">
                A string comparison to use.</param>
            <returns>
                The new string after replacements.</returns>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.PadLeft(System.Int32)">
            <summary>
                Returns a new string that right-aligns the characters in this instance by padding them with spaces on the
                left, for a specified total length.</summary>
            <param name="totalWidth">
                The number of characters in the resulting string, equal to the number of original characters plus any
                additional padding characters.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.PadLeft(System.Int32,RT.Util.Consoles.ConsoleColoredChar)">
            <summary>
                Returns a new string that right-aligns the characters in this instance by padding them on the left with a
                specified colored character, for a specified total length.</summary>
            <param name="totalWidth">
                The number of characters in the resulting string, equal to the number of original characters plus any
                additional padding characters.</param>
            <param name="paddingChar">
                A colored padding character.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.PadRight(System.Int32)">
            <summary>
                Returns a new string that left-aligns the characters in this instance by padding them with spaces on the
                right, for a specified total length.</summary>
            <param name="totalWidth">
                The number of characters in the resulting string, equal to the number of original characters plus any
                additional padding characters.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredString.PadRight(System.Int32,RT.Util.Consoles.ConsoleColoredChar)">
            <summary>
                Returns a new string that left-aligns the characters in this instance by padding them on the right with a
                specified colored character, for a specified total length.</summary>
            <param name="totalWidth">
                The number of characters in the resulting string, equal to the number of original characters plus any
                additional padding characters.</param>
            <param name="paddingChar">
                A colored padding character.</param>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredString.ToDebugString">
            <summary>
                Returns a string in which the coloration of this ConsoleColoredString is represented as user-readable text.</summary>
        </member>
        <member name="T:RT.Util.Consoles.ConsoleColoredChar">
            <summary>Contains a character and a console foreground and background color.</summary>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredChar.Character">
            <summary>Gets the character.</summary>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredChar.Color">
            <summary>Gets the foreground color. <c>null</c> indicates to use the console’s default foreground color.</summary>
        </member>
        <member name="P:RT.Util.Consoles.ConsoleColoredChar.BackgroundColor">
            <summary>Gets the background color. <c>null</c> indicates to use the console’s default background color.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredChar.#ctor(System.Char,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
                Constructor.</summary>
            <param name="character">
                The character.</param>
            <param name="foreground">
                The foreground color.</param>
            <param name="background">
                The background color.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredChar.op_Addition(RT.Util.Consoles.ConsoleColoredChar,RT.Util.Consoles.ConsoleColoredChar)">
            <summary>
                Concatenates two <see cref="T:RT.Util.Consoles.ConsoleColoredChar"/>s into a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
            <param name="char1">
                First input character to concatenate.</param>
            <param name="char2">
                Second input character to concatenate.</param>
            <remarks>
                The color of each character in the input strings is preserved.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredChar.op_Addition(RT.Util.Consoles.ConsoleColoredChar,System.String)">
            <summary>
                Concatenates a <see cref="T:RT.Util.Consoles.ConsoleColoredChar"/> onto a string and returns a <see
                cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
            <param name="char1">
                First input character to concatenate.</param>
            <param name="string2">
                Second input string to concatenate.</param>
            <remarks>
                The color of the character is preserved. The string is given the console default color.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredChar.op_Addition(System.String,RT.Util.Consoles.ConsoleColoredChar)">
            <summary>
                Concatenates a string onto a <see cref="T:RT.Util.Consoles.ConsoleColoredChar"/> and returns a <see
                cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</summary>
            <param name="string1">
                First input string to concatenate.</param>
            <param name="char2">
                Second input character to concatenate.</param>
            <remarks>
                The color of the character is preserved. The string is given the console default color.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleColoredChar.op_Implicit(System.Char)~RT.Util.Consoles.ConsoleColoredChar">
            <summary>
                Implicitly converts an uncolored <c>char</c> to a <see cref="T:RT.Util.Consoles.ConsoleColoredChar"/> with no color.</summary>
            <param name="ch">
                The character to convert.</param>
        </member>
        <member name="T:RT.Util.Consoles.ConsoleUtil">
            <summary>Console-related utility functions.</summary>
        </member>
        <member name="T:RT.Util.Consoles.ConsoleUtil.ConsoleState">
            <summary>Represents the state of a console output stream.</summary>
        </member>
        <member name="F:RT.Util.Consoles.ConsoleUtil.ConsoleState.Unavailable">
            <summary>This output stream is not available - eg when the program is not a console program.</summary>
        </member>
        <member name="F:RT.Util.Consoles.ConsoleUtil.ConsoleState.Console">
            <summary>This output stream is printed on the console.</summary>
        </member>
        <member name="F:RT.Util.Consoles.ConsoleUtil.ConsoleState.Redirected">
            <summary>This output stream has been redirected - perhaps to a file or a pipe.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.StdOutState">
            <summary>
                Determines the state of the standard output stream. The first call determines the state and caches it;
                subsequent calls return the cached value.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.StdErrState">
            <summary>
                Determines the state of the standard error stream. The first call determines the state and caches it;
                subsequent calls return the cached value.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WrapToWidth">
            <summary>
                Returns the maximum line width that console applications should use to correctly word-wrap their output. If
                the output is redirected to a file, this will return an arbitrary but sensible value, otherwise the value
                reflects the width of the console buffer.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WriteParagraphs(System.String,System.Int32)">
            <summary>
                Outputs the specified message to the console window, treating newlines as paragraph breaks. All paragraphs are
                word-wrapped to fit in the console buffer, or to a sensible width if redirected to a file. Each paragraph is
                indented by the number of spaces at the start of the corresponding line.</summary>
            <param name="message">
                The message to output.</param>
            <param name="hangingIndent">
                Specifies a number of spaces by which the message is indented in all but the first line of each paragraph.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WriteParagraphs(RT.Util.EggsNode,System.Int32)">
            <summary>
                Outputs the specified coloured message, marked up using EggsML, to the console window, treating newlines as
                paragraph breaks. All paragraphs are word-wrapped to fit in the console buffer, or to a sensible width if
                redirected to a file. Each paragraph is indented by the number of spaces at the start of the corresponding
                line.</summary>
            <param name="message">
                The message to output.</param>
            <param name="hangingIndent">
                Specifies a number of spaces by which the message is indented in all but the first line of each paragraph.</param>
            <remarks>
                See <see cref="M:RT.Util.EggsNode.ToConsoleColoredStringWordWrap(System.Int32,System.Int32)"/> for the colour syntax.</remarks>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WriteParagraphs(RT.Util.Consoles.ConsoleColoredString,System.Int32)">
            <summary>
                Outputs the specified message to the console window, treating newlines as paragraph breaks. All paragraphs are
                word-wrapped to fit in the console buffer, or to a sensible width if redirected to a file. Each paragraph is
                indented by the number of spaces at the start of the corresponding line.</summary>
            <param name="message">
                The message to output.</param>
            <param name="hangingIndent">
                Specifies a number of spaces by which the message is indented in all but the first line of each paragraph.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.Write(RT.Util.Consoles.ConsoleColoredString,System.Boolean)">
            <summary>Writes the specified <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> to the console.</summary>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.Write(System.FormattableString,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor},System.Boolean)">
            <summary>
                Writes the specified <see cref="T:System.FormattableString"/> to the console.</summary>
            <param name="value">
                Formattable string. You can use an interpolated string literal here.</param>
            <param name="foreground">
                Default foreground color when an interpolated variable isn’t a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> or <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/> or a foreground color is unspecified.</param>
            <param name="background">
                Default background color when an interpolated variable isn’t a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> or <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/> or a background color is unspecified.</param>
            <param name="stdErr">
                <c>true</c> to print to Standard Error instead of Standard Output.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WriteLine(System.FormattableString,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor},System.Boolean,RT.Util.Text.HorizontalTextAlignment)">
            <summary>
                Writes the specified <see cref="T:System.FormattableString"/> to the console.</summary>
            <param name="value">
                Formattable string. You can use an interpolated string literal here.</param>
            <param name="foreground">
                Default foreground color when an interpolated variable isn’t a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> or <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/> or a foreground color is unspecified.</param>
            <param name="background">
                Default background color when an interpolated variable isn’t a <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> or <see
                cref="T:RT.Util.Consoles.ConsoleColoredChar"/> or a background color is unspecified.</param>
            <param name="stdErr">
                <c>true</c> to print to Standard Error instead of Standard Output.</param>
            <param name="align">
                Horizontal alignment of the string within the remaining space of the current line. If the string does not fit,
                it will be printed as if left-aligned.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WriteLine(RT.Util.Consoles.ConsoleColoredString,System.Boolean,RT.Util.Text.HorizontalTextAlignment)">
            <summary>
                Writes the specified <see cref="T:RT.Util.Consoles.ConsoleColoredString"/> followed by a newline to the console.</summary>
            <param name="value">
                The string to print to the console.</param>
            <param name="stdErr">
                <c>true</c> to print to Standard Error instead of Standard Output.</param>
            <param name="align">
                Horizontal alignment of the string within the remaining space of the current line. If the string does not fit,
                it will be printed as if left-aligned.</param>
        </member>
        <member name="M:RT.Util.Consoles.ConsoleUtil.WriteStackTrace(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Writes the specified or current stack trace to the console in pretty colors.</summary>
            <param name="stackTraceLines">
                The stack trace. Each string in this collection is expected to be one line of the stack trace. If <c>null</c>,
                defaults to the current stack trace.</param>
        </member>
        <member name="T:RT.Util.CustomCallStack">
            <summary>
                Provides static functionality to execute work on an unlimited call stack, which is not limited to 1 MB as the
                standard call stack is.</summary>
        </member>
        <member name="M:RT.Util.CustomCallStack.Run``1(RT.Util.WorkNode{``0})">
            <summary>
                Runs the specified work on a custom call stack, which is not limited to 1 MB as the standard call stack is.
                See remarks for details.</summary>
            <typeparam name="T">
                Type of result to compute.</typeparam>
            <param name="node">
                Work to be executed.</param>
            <returns>
                The result of the computation.</returns>
            <remarks>
                <para>
                    <see cref="M:RT.Util.CustomCallStack.Run``1(RT.Util.WorkNode{``0})"/> expects a delegate that is structured in such a way that it:</para>
                <list type="bullet">
                    <item><description>
                        always knows at what state in the computation it is each time it is called;</description></item>
                    <item><description>
                        returns a <see cref="T:RT.Util.WorkStep`1.Call"/> each time it requires some other value to be computed, and
                        then expects that resulting value to come in through the parameter next time it is called;</description></item>
                    <item><description>
                        returns a <see cref="T:RT.Util.WorkStep`1.Return"/> when it is done. At this point the delegate is not called
                        again.</description></item>
                    <item><description>
                        The delegate may return <c>null</c> to indicate the same as a <see cref="T:RT.Util.WorkStep`1.Return"/>
                        containing a <c>default(T)</c> value.</description></item></list>
                <para>
                    CustomCallStack works as follows:</para>
                <list type="bullet">
                    <item><description>
                        The first time the specified delegate is called, its parameter receives <c>default(T)</c>.</description></item>
                    <item><description>
                        If the value returned by the delegate is a <see cref="T:RT.Util.WorkStep`1.Return"/>, the work is done and the
                        result is returned.</description></item>
                    <item><description>
                        If the value returned is a <see cref="T:RT.Util.WorkStep`1.Call"/>, this is treated similarly to a method call.
                        The old delegate is pushed on a stack and the new delegate is executed according to the same rules
                        until it returns a <see cref="T:RT.Util.WorkStep`1.Return"/>. Once it does so, the original delegate is popped
                        from the stack and then called with the result passed into its parameter.</description></item></list>
                <para>
                    There are deliberately no safeguards in this algorithm; it will allow you to grow the stack indefinitely
                    and not generate an equivalent to the <see cref="T:System.StackOverflowException"/>. This means that if your
                    delegates always return a <see cref="T:RT.Util.WorkStep`1.Call"/>, they will consume memory rampantly and never
                    finish.</para></remarks>
        </member>
        <member name="T:RT.Util.WorkStep`1">
            <summary>
                Describes the result of a call to a <see cref="T:RT.Util.WorkNode`1"/>.</summary>
            <typeparam name="T">
                Type of result to compute.</typeparam>
            <remarks>
                This type is closed: Every value is either <c>null</c> or an instance of <see cref="T:RT.Util.WorkStep`1.Return"/> or <see
                cref="T:RT.Util.WorkStep`1.Call"/>. The value <c>null</c> is treated as being equivalent to a <see
                cref="T:RT.Util.WorkStep`1.Return"/> containing a <c>default(T)</c>.</remarks>
        </member>
        <member name="M:RT.Util.WorkStep`1.op_Implicit(`0)~RT.Util.WorkStep{`0}">
            <summary>Implicitly converts from a result value to a <see cref="T:RT.Util.WorkStep`1.Return"/>.</summary>
        </member>
        <member name="M:RT.Util.WorkStep`1.op_Implicit(RT.Util.WorkNode{`0})~RT.Util.WorkStep{`0}">
            <summary>Implicitly converts from another work delegate to a <see cref="T:RT.Util.WorkStep`1.Call"/>.</summary>
        </member>
        <member name="T:RT.Util.WorkStep`1.Return">
            <summary>Indicates that the current delegate has finished its work and returned a result.</summary>
        </member>
        <member name="P:RT.Util.WorkStep`1.Return.Result">
            <summary>The result returned by the computation.</summary>
        </member>
        <member name="M:RT.Util.WorkStep`1.Return.#ctor(`0)">
            <summary>
                Constructs a <see cref="T:RT.Util.WorkStep`1.Return"/> value.</summary>
            <param name="result">
                Specifies the result returned by the computation.</param>
            <remarks>
                For convenience, the type <see cref="T:RT.Util.WorkStep`1"/> declares an implicit operator equivalent to this
                constructor.</remarks>
        </member>
        <member name="T:RT.Util.WorkStep`1.Call">
            <summary>Indicates that the current delegate requires another value to be computed before it can continue.</summary>
        </member>
        <member name="P:RT.Util.WorkStep`1.Call.Callee">
            <summary>Specifies the additional work required.</summary>
        </member>
        <member name="M:RT.Util.WorkStep`1.Call.#ctor(RT.Util.WorkNode{`0})">
            <summary>
                Constructs a <see cref="T:RT.Util.WorkStep`1.Call"/> value.</summary>
            <param name="work">
                Specifies the additional work required.</param>
            <remarks>
                For convenience, the type <see cref="T:RT.Util.WorkStep`1"/> declares an implicit operator equivalent to this
                constructor.</remarks>
        </member>
        <member name="T:RT.Util.WorkNode`1">
            <summary>
                Provides a delegate to specify work to be executed on an unlimited call stack. See <see
                cref="M:RT.Util.CustomCallStack.Run``1(RT.Util.WorkNode{``0})"/> for details.</summary>
            <typeparam name="T">
                Type of result to compute.</typeparam>
            <param name="previousSubresult">
                The result of the work step last returned by this same delegate.</param>
            <returns>
                The next step of computation (which is either a <see cref="T:RT.Util.WorkStep`1.Return"/> or a <see
                cref="T:RT.Util.WorkStep`1.Call"/>).</returns>
        </member>
        <member name="T:RT.Util.CustomComparer`1">
            <summary>
                Encapsulates an IComparer&lt;T&gt; that uses a comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared.</typeparam>
        </member>
        <member name="M:RT.Util.CustomComparer`1.Compare(`0,`0)">
            <summary>
                Compares two elements.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomComparer`1.#ctor(System.Comparison{`0})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this comparer.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.CustomEqualityComparer`1">
            <summary>
                Encapsulates an IEqualityComparer&lt;T&gt; that uses an equality comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared for equality.</typeparam>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Compares two elements for equality.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for an element.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
            <param name="getHashCode">
                Provides the hash function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Constructor which re-uses the default hash function. Use this overload only if using the objects’ original
                hash function is appropriate for this equality comparison.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Function used to compare values for equality. If null, will use IEquatable if implemented, or the object's
                Equals override.</param>
            <param name="getHashCode">
                Function used to compute hash codes. If null, will use IEquatable if implemented, or the object's GetHashCode
                override.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.CuteML">
            <summary>
                Implements a parser for the minimalist text mark-up language CuteML.</summary>
            <remarks>
                <para>
                    The “rules” of CuteML are, in summary:</para>
                <list type="bullet">
                    <item><description>
                        A CuteML tag starts with <c>[</c> and ends with <c>]</c>.</description></item>
                    <item><description>
                        The character following the <c>[</c> is the tag name. This can be any character except for <c>&lt;</c>. For
                        example, the following is legal CuteML: <c>this is [*bold] text.</c></description></item>
                    <item><description>
                        Optional attribute data may be inserted between the <c>[</c> and the tag name enclosed in <c>&lt;...&gt;</c>.
                        For example, the following is legal CuteML: <c>this is [&lt;red&gt;:red] text.</c> This attribute data may not
                        contain the characters <c>[</c>, <c>]</c> or <c>&lt;</c>.</description></item>
                    <item><description>
                        The special tags <c>[(]</c> and <c>[)]</c> can be used to insert an opening and closing literal square
                        bracket, respectively.</description></item>
                    <item><description>
                        The special tag <c>[ ...]</c> (i.e., the tag name is the space character) can be used to insert a matching
                        literal square bracket. In other words, <c>[ xyz]</c> is equivalent to
                        <c>[(]xyz[)]</c>.</description></item></list></remarks>
        </member>
        <member name="M:RT.Util.CuteML.ParseCuteML(System.String)">
            <summary>
                Parses the specified CuteML input.</summary>
            <param name="input">
                The CuteML text to parse.</param>
            <returns>
                The resulting parse-tree.</returns>
            <remarks>
                <list type="bullet">
                    <item><description>
                        Tags are parsed into instances of <see cref="T:RT.Util.CuteTag"/>.</description></item>
                    <item><description>
                        The top-level nodes are contained in an instance of <see cref="T:RT.Util.CuteTag"/> whose <see cref="P:RT.Util.CuteTag.Tag"/>
                        property is set to null.</description></item>
                    <item><description>
                        All the literal text is parsed into instances of <see cref="T:RT.Util.CuteText"/>. All continuous text is
                        consolidated, so there are no two consecutive <see cref="T:RT.Util.CuteText"/> instances in any list of
                        children.</description></item></list></remarks>
            <exception cref="T:RT.Util.CuteMLParseException">
                Invalid syntax was encountered. The exception object contains the string index at which the error was
                detected.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> was null.</exception>
        </member>
        <member name="M:RT.Util.CuteML.EscapeCuteML(System.String)">
            <summary>
                Escapes the input string such that it can be used in CuteML syntax. The result will have its <c>[</c> and <c>]</c>
                replaced with <c>[(]</c> and <c>[)]</c>.</summary>
        </member>
        <member name="T:RT.Util.CuteML.CuteRender`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.CuteML.WordWrap``1(RT.Util.CuteNode,``0,System.Int32,RT.Util.CuteML.CuteMeasure{``0},RT.Util.CuteML.CuteRender{``0},RT.Util.CuteML.CuteNextLine{``0},RT.Util.CuteML.CuteNextState{``0})"/> which renders a piece of text.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="state">
                The state (font, color, etc.) the string is in.</param>
            <param name="text">
                The string to render.</param>
            <param name="width">
                The measured width of the string.</param>
        </member>
        <member name="T:RT.Util.CuteML.CuteMeasure`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.CuteML.WordWrap``1(RT.Util.CuteNode,``0,System.Int32,RT.Util.CuteML.CuteMeasure{``0},RT.Util.CuteML.CuteRender{``0},RT.Util.CuteML.CuteNextLine{``0},RT.Util.CuteML.CuteNextState{``0})"/> which measures the width of a string.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="state">
                The state (font, color etc.) of the text.</param>
            <param name="text">
                The text whose width to measure.</param>
            <returns>
                The width of the text in any arbitrary unit, as long as the “width” parameter in the call to <see
                cref="M:RT.Util.CuteML.WordWrap``1(RT.Util.CuteNode,``0,System.Int32,RT.Util.CuteML.CuteMeasure{``0},RT.Util.CuteML.CuteRender{``0},RT.Util.CuteML.CuteNextLine{``0},RT.Util.CuteML.CuteNextState{``0})"/> is in the same unit.</returns>
        </member>
        <member name="T:RT.Util.CuteML.CuteNextLine`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.CuteML.WordWrap``1(RT.Util.CuteNode,``0,System.Int32,RT.Util.CuteML.CuteMeasure{``0},RT.Util.CuteML.CuteRender{``0},RT.Util.CuteML.CuteNextLine{``0},RT.Util.CuteML.CuteNextState{``0})"/> which advances to the next line.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="state">
                The state (font, color etc.) of the text.</param>
            <param name="newParagraph">
                ‘true’ if a new paragraph begins, ‘false’ if a word is being wrapped within a paragraph.</param>
            <param name="indent">
                If <paramref name="newParagraph"/> is false, the indentation of the current paragraph as measured only by its
                leading spaces; otherwise, zero.</param>
            <returns>
                The indentation for the next line. Use this to implement, for example, hanging indents.</returns>
        </member>
        <member name="T:RT.Util.CuteML.CuteNextState`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.CuteML.WordWrap``1(RT.Util.CuteNode,``0,System.Int32,RT.Util.CuteML.CuteMeasure{``0},RT.Util.CuteML.CuteRender{``0},RT.Util.CuteML.CuteNextLine{``0},RT.Util.CuteML.CuteNextState{``0})"/> which determines how the text state (font, color
                etc.) changes for a given CuteML tag character. This delegate is called for all tags except for <c>[+...]</c>,
                which is automatically processed to mean “nowrap”.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="oldState">
                The previous state (for the parent tag).</param>
            <param name="cuteTag">
                The CuteML tag character.</param>
            <param name="parameter">
                The contents of the tag attribute, which can be used to parameterize tags.</param>
            <returns>
                The next state (return the old state for all tags that should not have a meaning) and an integer indicating the
                amount by which opening this tag has advanced the text position.</returns>
        </member>
        <member name="M:RT.Util.CuteML.WordWrap``1(RT.Util.CuteNode,``0,System.Int32,RT.Util.CuteML.CuteMeasure{``0},RT.Util.CuteML.CuteRender{``0},RT.Util.CuteML.CuteNextLine{``0},RT.Util.CuteML.CuteNextState{``0})">
            <summary>
                Word-wraps a given piece of CuteML, assuming that it is linearly flowing text. Newline (<c>\n</c>) characters can
                be used to split the text into multiple paragraphs. The special <c>[+...]</c> tag marks text that may not be
                broken by wrapping (effectively turning all spaces into non-breaking spaces).</summary>
            <typeparam name="TState">
                The type of the text state that a tag can change, e.g. font or color.</typeparam>
            <param name="node">
                The root node of the CuteML tree to word-wrap.</param>
            <param name="initialState">
                The initial text state.</param>
            <param name="wrapWidth">
                The maximum width at which to word-wrap. This width can be measured in any unit, as long as <paramref
                name="measure"/> uses the same unit.</param>
            <param name="measure">
                A delegate that measures the width of any piece of text.</param>
            <param name="render">
                A delegate that is called whenever a piece of text is ready to be rendered.</param>
            <param name="advanceToNextLine">
                A delegate that is called to advance to the next line.</param>
            <param name="nextState">
                A delegate that determines how each CuteML tag character modifies the state (font, color etc.).</param>
            <returns>
                The maximum width of the text.</returns>
        </member>
        <member name="T:RT.Util.CuteNode">
            <summary>Contains a node in the CuteML parse tree.</summary>
        </member>
        <member name="M:RT.Util.CuteNode.ToXml">
            <summary>Returns the CuteML parse tree as XML.</summary>
        </member>
        <member name="P:RT.Util.CuteNode.Index">
            <summary>The index in the original string where this node starts.</summary>
        </member>
        <member name="P:RT.Util.CuteNode.HasText">
            <summary>Determines whether this node contains any textual content.</summary>
        </member>
        <member name="P:RT.Util.CuteNode.Parent">
            <summary>Gets a reference to the parent node of this node. The root node is the only one for which this property is null.</summary>
        </member>
        <member name="M:RT.Util.CuteNode.#ctor(System.Int32)">
            <summary>
                Constructor.</summary>
            <param name="index">
                The index within the original string where this node starts.</param>
        </member>
        <member name="M:RT.Util.CuteNode.ToString(System.Boolean)">
            <summary>Gets the text of this node and/or sub-nodes concatenated into one string.</summary>
        </member>
        <member name="M:RT.Util.CuteNode.ToConsoleColoredStrings(System.Int32,System.Int32)">
            <summary>
                Generates a sequence of <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>s from a CuteML parse tree by word-wrapping the output
                at a specified character width.</summary>
            <param name="wrapWidth">
                The number of characters at which to word-wrap the output.</param>
            <param name="hangingIndent">
                The number of spaces to add to each line except the first of each paragraph, thus creating a hanging
                indentation.</param>
            <returns>
                The sequence of <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>s generated from the CuteML parse tree.</returns>
            <remarks>
                <para>
                    The following CuteML tags are processed:</para>
                <list type="bullet">
                    <item><description>
                        <c>[&lt;color&gt;:...]</c> = use the specified console color, for example
                        <c>[&lt;darkred&gt;:...]</c>.</description></item>
                    <item><description>
                        <c>[*blah]</c> = Brightens the current color, for example turning dark-red into red or light-gray into
                        white.</description></item>
                    <item><description>
                        <c>[-blah]</c> = Darkens the current color, for example turning red into dark-red or white into
                        light-gray.</description></item>
                    <item><description>
                        <c>[.blah]</c> = Creates a bullet point. Surround a whole paragraph with this to add the bullet point and
                        indent the paragraph. Use this to create bulleted lists. The default bullet point character is <c>*</c>;
                        you can use an attribute to specify another one, for example <c>[&lt;-&gt;.blah]</c>.</description></item>
                    <item><description>
                        <c>[+blah]</c> = Suppresses word-wrapping within a certain stretch of text. In other words, the contents
                        of a <c>[+...]</c> tag are treated as if they were a single word. Use this in preference to U+00A0
                        (no-break space) as it is more explicit and more future-compatible in case hyphenation is ever implemented
                        here.</description></item></list>
                <para>
                    Text which is not inside a color tag defaults to light gray.</para></remarks>
        </member>
        <member name="T:RT.Util.CuteTag">
            <summary>Represents a node in the CuteML parse tree that corresponds to a CuteML tag or the top-level node.</summary>
        </member>
        <member name="M:RT.Util.CuteTag.Add(RT.Util.CuteNode)">
            <summary>
                Adds a new child node to this tag’s children.</summary>
            <param name="child">
                The child node to add.</param>
        </member>
        <member name="M:RT.Util.CuteTag.AddRange(System.Collections.Generic.IEnumerable{RT.Util.CuteNode})">
            <summary>
                Adds the specified child nodes to this tag’s children.</summary>
            <param name="children">
                The child nodes to add.</param>
        </member>
        <member name="M:RT.Util.CuteTag.RemoveFirst">
            <summary>Removes the first child node.</summary>
        </member>
        <member name="M:RT.Util.CuteTag.RemoveLast">
            <summary>Removes the last child node.</summary>
        </member>
        <member name="P:RT.Util.CuteTag.Children">
            <summary>The children of this node.</summary>
        </member>
        <member name="F:RT.Util.CuteTag._children">
            <summary>The underlying collection containing the children of this node.</summary>
        </member>
        <member name="P:RT.Util.CuteTag.Attribute">
            <summary>The attribute data associated with the tag, or null if no attribute data was specified.</summary>
        </member>
        <member name="P:RT.Util.CuteTag.HasText">
            <summary>Determines whether this node contains any textual content.</summary>
        </member>
        <member name="P:RT.Util.CuteTag.Tag">
            <summary>The character that constitutes the tag name (e.g. <c>*</c>), or null if this is the top-level node.</summary>
        </member>
        <member name="M:RT.Util.CuteTag.#ctor(System.Nullable{System.Char},System.String,System.Int32)">
            <summary>
                Constructs a new CuteML parse-tree node that represents a CuteML tag.</summary>
            <param name="tag">
                The character that constitutes the tag name (e.g. <c>*</c>).</param>
            <param name="attribute">
                The attribute string provided with the tag, or null if none.</param>
            <param name="index">
                The index in the original string where this tag was opened.</param>
        </member>
        <member name="M:RT.Util.CuteTag.ToXml">
            <summary>Returns an XML representation of this CuteML node.</summary>
        </member>
        <member name="M:RT.Util.CuteTag.ToString">
            <summary>Converts the CuteML parse tree back into CuteML mark-up.</summary>
        </member>
        <member name="T:RT.Util.CuteText">
            <summary>Represents a node in the CuteML parse tree that corresponds to a piece of text.</summary>
        </member>
        <member name="P:RT.Util.CuteText.Text">
            <summary>The text contained in this node.</summary>
        </member>
        <member name="M:RT.Util.CuteText.#ctor(System.String,System.Int32)">
            <summary>
                Constructs a new CuteML text node.</summary>
            <param name="text">
                The text for this node to contain.</param>
            <param name="index">
                The index in the original string where this text starts.</param>
        </member>
        <member name="M:RT.Util.CuteText.ToXml">
            <summary>Returns an XML representation of this EggsML node.</summary>
        </member>
        <member name="P:RT.Util.CuteText.HasText">
            <summary>Determines whether this node contains any textual content.</summary>
        </member>
        <member name="M:RT.Util.CuteText.ToString">
            <summary>Returns the contained text in CuteML-escaped form.</summary>
        </member>
        <member name="T:RT.Util.CuteMLParseException">
            <summary>Represents a parse error encountered by the <see cref="T:RT.Util.CuteML"/> parser.</summary>
        </member>
        <member name="P:RT.Util.CuteMLParseException.Index">
            <summary>The character index into the original string where the error occurred.</summary>
        </member>
        <member name="P:RT.Util.CuteMLParseException.Length">
            <summary>The length of the text in the original string where the error occurred.</summary>
        </member>
        <member name="P:RT.Util.CuteMLParseException.FirstIndex">
            <summary>
                The character index of an earlier position in the original string where the error started (e.g. the start of a tag
                that is missing its end tag).</summary>
        </member>
        <member name="M:RT.Util.CuteMLParseException.#ctor(System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Exception)">
            <summary>
                Constructor.</summary>
            <param name="message">
                Message.</param>
            <param name="index">
                The character index into the original string where the error occurred.</param>
            <param name="length">
                The length of the text in the original string where the error occurred.</param>
            <param name="firstIndex">
                The character index of an earlier position in the original string where the error started (e.g. the start of a tag
                that is missing its end tag).</param>
            <param name="inner">
                An inner exception to pass to the base Exception class.</param>
        </member>
        <member name="T:RT.Util.EggsML">
            <summary>
                Implements a parser for the minimalist text mark-up language EggsML.</summary>
            <remarks>
                <para>
                    The “rules” of EggsML are, in summary:</para>
                <list type="bullet">
                    <item><description>
                        In EggsML, the following non-alphanumeric characters are “special” (have meaning): <c>~ @ # $ % ^ &amp; *
                        _ = + / \ | [ ] { } &lt; &gt; ` "</c></description></item>
                    <item><description>
                        All other characters are always literal.</description></item>
                    <item><description>
                        All the special characters can be escaped by doubling them.</description></item>
                    <item><description>
                        The characters <c>~ @ # $ % ^ &amp; * _ = + / \ | [ { &lt;</c> can be used to open a “tag”.</description></item>
                    <item><description>
                        Tags that start with <c>[ { &lt;</c> are closed with <c>] } &gt;</c>. All other tags are closed with the
                        same character.</description></item>
                    <item><description>
                        Tags can be nested arbitrarily. In order to start a nested tag of the same character as its immediate
                        parent, triple the tag character. For example, <c>*one ***two* three*</c> contains an asterisk tag nested
                        inside another asterisk tag, while <c>*one *two* three*</c> would be parsed as two asterisk tags, one
                        containing “one ” and the other containing “ three”.</description></item>
                    <item><description>
                        The backtick character (<c>`</c>) can be used to “unjoin” multiple copies of the same character. For
                        example, <c>**</c> is a literal asterisk, but <c>*`*</c> is an empty tag containing no text.</description></item>
                    <item><description>
                        The double-quote character (<c>"</c>) can be used to escape long strings of special characters, e.g. URLs.</description></item></list></remarks>
        </member>
        <member name="P:RT.Util.EggsML.SpecialCharacters">
            <summary>Returns all characters that have a special meaning in EggsML.</summary>
        </member>
        <member name="M:RT.Util.EggsML.Parse(System.String)">
            <summary>
                Parses the specified EggsML input.</summary>
            <param name="input">
                The EggsML text to parse.</param>
            <returns>
                The resulting parse-tree.</returns>
            <remarks>
                <list type="bullet">
                    <item><description>
                        Tags are parsed into instances of <see cref="T:RT.Util.EggsTag"/>.</description></item>
                    <item><description>
                        The top-level nodes are contained in an instance of <see cref="T:RT.Util.EggsTag"/> whose <see
                        cref="P:RT.Util.EggsTag.Tag"/> property is set to null.</description></item>
                    <item><description>
                        All the literal text is parsed into instances of <see cref="T:RT.Util.EggsText"/>. All continuous text is
                        consolidated, so there are no two consecutive EggsText instances in any list of children.</description></item></list></remarks>
            <exception cref="T:RT.Util.EggsMLParseException">
                Invalid syntax was encountered. The exception object contains the string index at which the error was
                detected.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> was null.</exception>
        </member>
        <member name="M:RT.Util.EggsML.Escape(System.String)">
            <summary>
                Escapes the input string such that it can be used in EggsML syntax. The result will either have no special
                characters in it or be entirely enclosed in double-quotes.</summary>
        </member>
        <member name="T:RT.Util.EggsML.EggRender`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.EggsML.WordWrap``1(RT.Util.EggsNode,``0,System.Int32,RT.Util.EggsML.EggMeasure{``0},RT.Util.EggsML.EggRender{``0},RT.Util.EggsML.EggNextLine{``0},RT.Util.EggsML.EggNextState{``0})"/> which renders a piece of text.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="state">
                The state (font, color, etc.) the string is in.</param>
            <param name="text">
                The string to render.</param>
            <param name="width">
                The measured width of the string.</param>
        </member>
        <member name="T:RT.Util.EggsML.EggMeasure`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.EggsML.WordWrap``1(RT.Util.EggsNode,``0,System.Int32,RT.Util.EggsML.EggMeasure{``0},RT.Util.EggsML.EggRender{``0},RT.Util.EggsML.EggNextLine{``0},RT.Util.EggsML.EggNextState{``0})"/> which measures the width of a string.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="state">
                The state (font, color etc.) of the text.</param>
            <param name="text">
                The text whose width to measure.</param>
            <returns>
                The width of the text in any arbitrary unit, as long as the “width” parameter in the call to <see
                cref="M:RT.Util.EggsML.WordWrap``1(RT.Util.EggsNode,``0,System.Int32,RT.Util.EggsML.EggMeasure{``0},RT.Util.EggsML.EggRender{``0},RT.Util.EggsML.EggNextLine{``0},RT.Util.EggsML.EggNextState{``0})"/> is in the same unit.</returns>
        </member>
        <member name="T:RT.Util.EggsML.EggNextLine`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.EggsML.WordWrap``1(RT.Util.EggsNode,``0,System.Int32,RT.Util.EggsML.EggMeasure{``0},RT.Util.EggsML.EggRender{``0},RT.Util.EggsML.EggNextLine{``0},RT.Util.EggsML.EggNextState{``0})"/> which advances to the next line.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="state">
                The state (font, color etc.) of the text.</param>
            <param name="newParagraph">
                ‘true’ if a new paragraph begins, ‘false’ if a word is being wrapped within a paragraph.</param>
            <param name="indent">
                If <paramref name="newParagraph"/> is false, the indentation of the current paragraph as measured only by its
                leading spaces; otherwise, zero.</param>
            <returns>
                The indentation for the next line. Use this to implement, for example, hanging indents.</returns>
        </member>
        <member name="T:RT.Util.EggsML.EggNextState`1">
            <summary>
                Provides a delegate for <see cref="M:RT.Util.EggsML.WordWrap``1(RT.Util.EggsNode,``0,System.Int32,RT.Util.EggsML.EggMeasure{``0},RT.Util.EggsML.EggRender{``0},RT.Util.EggsML.EggNextLine{``0},RT.Util.EggsML.EggNextState{``0})"/> which determines how the text state (font, color
                etc.) changes for a given EggsML tag character. This delegate is called for all tags except for <c>+...+</c>
                and <c>&lt;...&gt;</c>.</summary>
            <typeparam name="TState">
                The type of the text state, e.g. font or color.</typeparam>
            <param name="oldState">
                The previous state (for the parent tag).</param>
            <param name="eggTag">
                The EggsML tag character.</param>
            <param name="parameter">
                The contents of the immediately preceding <c>&lt;...&gt;</c> tag (if any), which can be used to parameterize
                other tags.</param>
            <returns>
                The next state (return the old state for all tags that should not have a meaning) and an integer indicating
                the amount by which opening this tag has advanced the text position.</returns>
        </member>
        <member name="M:RT.Util.EggsML.WordWrap``1(RT.Util.EggsNode,``0,System.Int32,RT.Util.EggsML.EggMeasure{``0},RT.Util.EggsML.EggRender{``0},RT.Util.EggsML.EggNextLine{``0},RT.Util.EggsML.EggNextState{``0})">
            <summary>
                Word-wraps a given piece of EggsML, assuming that it is linearly flowing text. Newline (<c>\n</c>) characters
                can be used to split the text into multiple paragraphs. See remarks for the special meaning of <c>+...+</c>
                and <c>&lt;...&gt;</c>.</summary>
            <typeparam name="TState">
                The type of the text state that an EggsML can change, e.g. font or color.</typeparam>
            <param name="node">
                The root node of the EggsML tree to word-wrap.</param>
            <param name="initialState">
                The initial text state.</param>
            <param name="wrapWidth">
                The maximum width at which to word-wrap. This width can be measured in any unit, as long as <paramref
                name="measure"/> uses the same unit.</param>
            <param name="measure">
                A delegate that measures the width of any piece of text.</param>
            <param name="render">
                A delegate that is called whenever a piece of text is ready to be rendered.</param>
            <param name="advanceToNextLine">
                A delegate that is called to advance to the next line.</param>
            <param name="nextState">
                A delegate that determines how each EggsML tag character modifies the state (font, color etc.).</param>
            <returns>
                The maximum width of the text.</returns>
            <remarks>
                <list type="bullet">
                    <item><description>
                        The <c>+...+</c> tag marks text that may not be broken by wrapping (effectively turning all spaces
                        into non-breaking spaces).</description></item>
                    <item><description>
                        The <c>&lt;...&gt;</c> tag marks a parameter to an immediately following tag. For example, if the
                        input EggsML contains <c>&lt;X&gt;{Foo}</c>, the text “X” will be passed as the parameter to <paramref
                        name="nextState"/> when the <c>{</c> tag is processed.</description></item></list></remarks>
        </member>
        <member name="T:RT.Util.EggsNode">
            <summary>Contains a node in the <see cref="T:RT.Util.EggsML"/> parse tree.</summary>
        </member>
        <member name="M:RT.Util.EggsNode.ToXml">
            <summary>Returns the EggsML parse tree as XML.</summary>
        </member>
        <member name="P:RT.Util.EggsNode.Index">
            <summary>The index in the original string where this node starts.</summary>
        </member>
        <member name="P:RT.Util.EggsNode.HasText">
            <summary>Determines whether this node contains any textual content.</summary>
        </member>
        <member name="P:RT.Util.EggsNode.Parent">
            <summary>
                Gets a reference to the parent node of this node. The root node is the only one for which this property is
                null.</summary>
        </member>
        <member name="M:RT.Util.EggsNode.#ctor(System.Int32)">
            <summary>
                Constructor.</summary>
            <param name="index">
                The index within the original string where this node starts.</param>
        </member>
        <member name="M:RT.Util.EggsNode.stringify(System.Collections.Generic.List{RT.Util.EggsNode},System.Nullable{System.Char})">
            <summary>
                Turns a list of child nodes into EggsML mark-up.</summary>
            <param name="children">
                List of children to turn into mark-up.</param>
            <param name="tag">
                If non-null, assumes we are directly inside a tag with the specified character, causing necessary escaping to
                be performed.</param>
            <returns>
                EggsML mark-up representing the same tree structure as this node.</returns>
        </member>
        <member name="M:RT.Util.EggsNode.ToString(System.Boolean)">
            <summary>Gets the text of this node and/or sub-nodes concatenated into one string.</summary>
        </member>
        <member name="M:RT.Util.EggsNode.ToConsoleColoredStringWordWrap(System.Int32,System.Int32)">
            <summary>
                Generates a sequence of <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>s from an EggsML parse tree by word-wrapping the
                output at a specified character width.</summary>
            <param name="wrapWidth">
                The number of characters at which to word-wrap the output.</param>
            <param name="hangingIndent">
                The number of spaces to add to each line except the first of each paragraph, thus creating a hanging
                indentation.</param>
            <returns>
                The sequence of <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>s generated from the EggsML parse tree.</returns>
            <remarks>
                <para>
                    The following EggsML tags map to the following console colors:</para>
                <list type="bullet">
                    <item><description>
                        <c>~</c> = black, or dark gray if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>/</c> = dark blue, or blue if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>$</c> = dark green, or green if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>&amp;</c> = dark cyan, or cyan if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>_</c> = dark red, or red if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>%</c> = dark magenta, or magenta if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>^</c> = dark yellow, or yellow if inside a <c>*</c> tag</description></item>
                    <item><description>
                        <c>=</c> = dark gray (independent of <c>*</c> tag)</description></item></list>
                <para>
                    Text which is not inside any of the above color tags defaults to light gray, or white if inside a <c>*</c>
                    tag.</para>
                <para>
                    Additionally, the <c>+</c> tag can be used to suppress word-wrapping within a certain stretch of text. In
                    other words, the contents of a <c>+</c> tag are treated as if they were a single word. Use this in
                    preference to U+00A0 (no-break space) as it is more explicit and more future-compatible in case
                    hyphenation is ever implemented here.</para></remarks>
        </member>
        <member name="T:RT.Util.EggsTag">
            <summary>
                Represents a node in the <see cref="T:RT.Util.EggsML"/> parse tree that corresponds to an EggsML tag or the top-level node.</summary>
        </member>
        <member name="M:RT.Util.EggsTag.Add(RT.Util.EggsNode)">
            <summary>
                Adds a new child node to this tag’s children.</summary>
            <param name="child">
                The child node to add.</param>
        </member>
        <member name="P:RT.Util.EggsTag.Children">
            <summary>The children of this node.</summary>
        </member>
        <member name="F:RT.Util.EggsTag._children">
            <summary>The underlying collection containing the children of this node.</summary>
        </member>
        <member name="P:RT.Util.EggsTag.HasText">
            <summary>Determines whether this node contains any textual content.</summary>
        </member>
        <member name="P:RT.Util.EggsTag.Tag">
            <summary>The character used to open the tag (e.g. “[”), or null if this is the top-level node.</summary>
        </member>
        <member name="M:RT.Util.EggsTag.#ctor(System.Nullable{System.Char},System.Int32)">
            <summary>
                Constructs a new EggsML parse-tree node that represents an EggsML tag.</summary>
            <param name="tag">
                The character used to open the tag (e.g. '[').</param>
            <param name="index">
                The index in the original string where this tag was opened.</param>
        </member>
        <member name="M:RT.Util.EggsTag.#ctor(System.Collections.Generic.IEnumerable{RT.Util.EggsNode})">
            <summary>
                Constructs a new top-level EggsML parse-tree node containing the specified sub-nodes.</summary>
            <param name="nodes">
                The sub-nodes contained in the root node.</param>
        </member>
        <member name="M:RT.Util.EggsTag.#ctor(System.Nullable{System.Char},System.Collections.Generic.IEnumerable{RT.Util.EggsNode})">
            <summary>
                Constructs a new EggsML parse-tree node that represents an EggsML tag containing the specified sub-nodes.</summary>
            <param name="tag">
                The character used to open the tag (e.g. '[').</param>
            <param name="nodes">
                The sub-nodes contained in the root node.</param>
        </member>
        <member name="M:RT.Util.EggsTag.ToString">
            <summary>
                Reconstructs the original EggsML that is represented by this node.</summary>
            <remarks>
                This does not necessarily return the same EggsML that was originally parsed. For example, redundant uses of
                the <c>`</c> character are removed.</remarks>
        </member>
        <member name="M:RT.Util.EggsTag.ToXml">
            <summary>Returns an XML representation of this EggsML node.</summary>
        </member>
        <member name="T:RT.Util.EggsText">
            <summary>Represents a node in the <see cref="T:RT.Util.EggsML"/> parse tree that corresponds to a piece of text.</summary>
        </member>
        <member name="P:RT.Util.EggsText.Text">
            <summary>The text contained in this node.</summary>
        </member>
        <member name="M:RT.Util.EggsText.#ctor(System.String,System.Int32)">
            <summary>
                Constructs a new EggsML text node.</summary>
            <param name="text">
                The text for this node to contain.</param>
            <param name="index">
                The index in the original string where this text starts.</param>
        </member>
        <member name="M:RT.Util.EggsText.ToString">
            <summary>
                Reconstructs the original EggsML that is represented by this node.</summary>
            <remarks>
                This does not necessarily return the same EggsML that was originally parsed. For example, redundant uses of
                the <c>`</c> character are removed.</remarks>
        </member>
        <member name="M:RT.Util.EggsText.ToXml">
            <summary>Returns an XML representation of this EggsML node.</summary>
        </member>
        <member name="P:RT.Util.EggsText.HasText">
            <summary>Determines whether this node contains any textual content.</summary>
        </member>
        <member name="T:RT.Util.EggsMLParseException">
            <summary>Represents a parse error encountered by the <see cref="T:RT.Util.EggsML"/> parser.</summary>
        </member>
        <member name="P:RT.Util.EggsMLParseException.Index">
            <summary>The character index into the original string where the error occurred.</summary>
        </member>
        <member name="P:RT.Util.EggsMLParseException.Length">
            <summary>The length of the text in the original string where the error occurred.</summary>
        </member>
        <member name="P:RT.Util.EggsMLParseException.FirstIndex">
            <summary>
                The character index of an earlier position in the original string where the error started (e.g. the start of a
                tag that is missing its end tag).</summary>
        </member>
        <member name="M:RT.Util.EggsMLParseException.#ctor(System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Exception)">
            <summary>
                Constructor.</summary>
            <param name="message">
                Message.</param>
            <param name="index">
                The character index into the original string where the error occurred.</param>
            <param name="length">
                The length of the text in the original string where the error occurred.</param>
            <param name="firstIndex">
                The character index of an earlier position in the original string where the error started (e.g. the start of a
                tag that is missing its end tag).</param>
            <param name="inner">
                An inner exception to pass to the base Exception class.</param>
        </member>
        <member name="T:RT.Util.EnumStrong">
            <summary>
            Provides generic versions of some of the static methods of the <see cref="T:System.Enum"/> class.
            </summary>
        </member>
        <member name="M:RT.Util.EnumStrong.Parse``1(System.String)">
            <summary>Returns the enum value corresponding to the specified string.</summary>
            <typeparam name="T">The enum type from which to retrieve the value.</typeparam>
            <param name="value">The string value for which to return the corresponding enum value.</param>
        </member>
        <member name="M:RT.Util.EnumStrong.Parse``1(System.String,System.Boolean)">
            <summary>Returns the enum value corresponding to the specified string.</summary>
            <typeparam name="T">The enum type from which to retrieve the value.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
        </member>
        <member name="M:RT.Util.EnumStrong.TryParse``1(System.String,``0@)">
            <summary>Finds the enum value corresponding to the specified string.</summary>
            <typeparam name="T">The enum type from which to retrieve the value.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="result">Variable receiving the converted value.</param>
            <returns>True if the value was successfully converted; false otherwise.</returns>
        </member>
        <member name="M:RT.Util.EnumStrong.TryParse``1(System.String,``0@,System.Boolean)">
            <summary>Finds the enum value corresponding to the specified string.</summary>
            <typeparam name="T">The enum type from which to retrieve the value.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="result">Variable receiving the converted value.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>True if the value was successfully converted; false otherwise.</returns>
        </member>
        <member name="M:RT.Util.EnumStrong.TryParse``1(System.String)">
            <summary>Finds the enum value corresponding to the specified string.</summary>
            <typeparam name="T">The enum type from which to retrieve the value.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>The value if it was successfully converted; null otherwise.</returns>
        </member>
        <member name="M:RT.Util.EnumStrong.TryParse``1(System.String,System.Boolean)">
            <summary>Finds the enum value corresponding to the specified string.</summary>
            <typeparam name="T">The enum type from which to retrieve the value.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>The value if it was successfully converted; null otherwise.</returns>
        </member>
        <member name="M:RT.Util.EnumStrong.GetValues``1">
            <summary>Returns the set of enum values from the specified enum type.</summary>
            <typeparam name="T">The enum type from which to retrieve the values.</typeparam>
            <returns>A strongly-typed array containing the enum values from the specified type.</returns>
        </member>
        <member name="T:RT.Util.InternalErrorException">
            <summary>
                Represents an internal error in the code. Any place where the code is able to verify its own consistency is where
                this exception should be thrown, for example in "unreachable" code safeguards.</summary>
        </member>
        <member name="M:RT.Util.InternalErrorException.#ctor(System.String)">
            <summary>Creates an exception instance with the specified message.</summary>
        </member>
        <member name="M:RT.Util.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>Creates an exception instance with the specified message and inner exception.</summary>
        </member>
        <member name="T:RT.Util.FpsCounter">
            <summary>Measures frame rate statistics (or, more generally, statistics of any event occurring multiple times in real time).</summary>
        </member>
        <member name="P:RT.Util.FpsCounter.AverageFrameTime">
            <summary>Gets the average length of one frame over the past second, in seconds.</summary>
        </member>
        <member name="P:RT.Util.FpsCounter.MinFrameTime">
            <summary>Gets the minimum length of one frame over the past second, in seconds.</summary>
        </member>
        <member name="P:RT.Util.FpsCounter.MaxFrameTime">
            <summary>Gets the maximum length of one frame over the past second, in seconds.</summary>
        </member>
        <member name="P:RT.Util.FpsCounter.LastFrameTime">
            <summary>Gets the length of the last frame, in seconds.</summary>
        </member>
        <member name="P:RT.Util.FpsCounter.AverageFps">
            <summary>Gets the average number of frames per second, over the last second.</summary>
        </member>
        <member name="M:RT.Util.FpsCounter.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.FpsCounter.CountFrame">
            <summary>Counts another frame and updates all statistics. Returns the time since the last frame,
            or null if this is the first counted frame.</summary>
        </member>
        <member name="M:RT.Util.FpsCounter.Reset">
            <summary>Resets all statistics.</summary>
        </member>
        <member name="T:RT.Util.Geometry.ArcD">
            <summary>Encapsulates a double-precision circular arc.</summary>
        </member>
        <member name="F:RT.Util.Geometry.ArcD.Circle">
            <summary>The circle on which the arc lies.</summary>
        </member>
        <member name="F:RT.Util.Geometry.ArcD.AngleStart">
            <summary>The angle at which the arc starts.</summary>
        </member>
        <member name="F:RT.Util.Geometry.ArcD.AngleSweep">
            <summary>The angle which the arc sweeps.</summary>
        </member>
        <member name="T:RT.Util.Geometry.BoundingBoxD">
            <summary>Represents a bounding box, in terms of the minimal and maximal X and Y coordinates.</summary>
        </member>
        <member name="F:RT.Util.Geometry.BoundingBoxD.Xmin">
            <summary>The smallest X coordinate.</summary>
        </member>
        <member name="F:RT.Util.Geometry.BoundingBoxD.Xmax">
            <summary>The largest X coordinate.</summary>
        </member>
        <member name="F:RT.Util.Geometry.BoundingBoxD.Ymin">
            <summary>The smallest Y coordinate.</summary>
        </member>
        <member name="F:RT.Util.Geometry.BoundingBoxD.Ymax">
            <summary>The largest Y coordinate.</summary>
        </member>
        <member name="P:RT.Util.Geometry.BoundingBoxD.Width">
            <summary>
                Gets the difference between the larger and the smaller X limits of the box, i.e. the width of the bounding
                box.</summary>
        </member>
        <member name="P:RT.Util.Geometry.BoundingBoxD.Height">
            <summary>
                Gets the difference between the larger and the smaller Y limits of the box, i.e. the height of the bounding
                box.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromPoint(System.Double,System.Double)">
            <summary>Returns a new BoundingBox bounding a single point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromPoint(RT.Util.Geometry.PointD@)">
            <summary>Returns a new BoundingBox bounding a single point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>Returns a new BoundingBox bounding the two points specified.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromPoint(RT.Util.Geometry.PointD@,RT.Util.Geometry.PointD@)">
            <summary>Returns a new BoundingBox bounding the two points specified.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromPoint(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>Returns a new BoundingBox bounding the two points specified.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromPoint(System.Collections.Generic.IEnumerable{RT.Util.Geometry.PointD})">
            <summary>Returns a new BoundingBox bounding all the points specified.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromEdge(RT.Util.Geometry.EdgeD@)">
            <summary>Returns a new BoundingBox bounding the specified edge.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromEdge(RT.Util.Geometry.EdgeD)">
            <summary>Returns a new BoundingBox bounding the specified edge.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.FromCircle(RT.Util.Geometry.PointD@,System.Double)">
            <summary>Returns a new BoundingBox bounding the specified circle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.BoundingBoxD.Empty">
            <summary>An empty bounding box - which doesn't have any bounds yet.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.AddPoint(System.Double,System.Double)">
            <summary>Updates the bounding box by extending the bounds, if necessary, to include the specified point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.AddPoint(RT.Util.Geometry.PointD)">
            <summary>Updates the bounding box by extending the bounds, if necessary, to include the specified point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.AddPoint(System.Collections.Generic.IEnumerable{RT.Util.Geometry.PointD})">
            <summary>Updates the bounding box by extending the bounds, if necessary, to include the specified points.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.AddCircle(RT.Util.Geometry.PointD@,System.Double)">
            <summary>Updates the bounding box by extending the bounds, if necessary, to include the specified circle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.AddBoundingBox(RT.Util.Geometry.BoundingBoxD)">
            <summary>Updates the bounding box by extending the bounds, if necessary, to include the specified bounding box.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.IntersectsWithRay(RT.Util.Geometry.EdgeD)">
            <summary>Returns true if this bounding box intersects with the specified ray.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.IntersectsWithBoundingBox(RT.Util.Geometry.BoundingBoxD)">
            <summary>Returns true if this bounding box intersects with the specified bounding box.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.ContainsPoint(RT.Util.Geometry.PointD@)">
            <summary>Returns true iff this bounding box contains the specified point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.ToEdges">
            <summary>Returns an array of the four edges of this bounding box.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.YminEdge">
            <summary>Returns the horizontal edge of this bounding box with the smallest Y coordinate.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.XmaxEdge">
            <summary>Returns the vertical edge of this bounding box with the largest X coordinate.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.YmaxEdge">
            <summary>Returns the horizontal edge of this bounding box with the largest Y coordinate.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.XminEdge">
            <summary>Returns the vertical edge of this bounding box with the smallest X coordinate.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.ToVertices">
            <summary>Returns an array of the four vertices of this bounding box.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.ToPolygonD">
            <summary>Converts this bounding box to a polygon.</summary>
        </member>
        <member name="M:RT.Util.Geometry.BoundingBoxD.Area">
            <summary>Returns the area of this bounding box.</summary>
        </member>
        <member name="T:RT.Util.Geometry.CircleD">
            <summary>Encapsulates a double-precision circle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.CircleD.Center">
            <summary>Center of the circle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.CircleD.Radius">
            <summary>Radius of the circle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.#ctor(System.Double,System.Double,System.Double)">
            <summary>
                Initialises a new <see cref="T:RT.Util.Geometry.CircleD"/> with the specified center co-ordinates and radius.</summary>
            <param name="x">
                Center X co-ordinate.</param>
            <param name="y">
                Center Y co-ordinate.</param>
            <param name="rad">
                Radius.</param>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.#ctor(RT.Util.Geometry.PointD,System.Double)">
            <summary>
                Initialises a new <see cref="T:RT.Util.Geometry.CircleD"/> with the specified center co-ordinates and radius.</summary>
            <param name="center">
                Center co-ordinates.</param>
            <param name="rad">
                Radius.</param>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.ToString">
            <summary>
                Provides a string representation of the current <see cref="T:RT.Util.Geometry.CircleD"/>.</summary>
            <returns>
                A string representation of the current <see cref="T:RT.Util.Geometry.CircleD"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.FindTangentCircles(RT.Util.Geometry.CircleD,System.Double)">
            <summary>
                Given this circle and another circle, tries to find a third and fourth circle with a given target radius such
                that the new circles are both tangent to the first two.</summary>
            <param name="other">
                The other circle.</param>
            <param name="targetRadius">
                Target radius for output circles.</param>
            <returns>
                The two output circles if they exist. If the input circles are further apart than twice the target radius, the
                desires circles do not exist and null is returned.</returns>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.Contains(RT.Util.Geometry.PointD)">
            <summary>
                Determines whether this circle contains the specified <paramref name="point"/>.</summary>
            <param name="point">
                Point to check.</param>
            <returns>
                <c>true</c> if the point is contained in this circle, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.GetCircumscribedCircle(System.Collections.Generic.IList{RT.Util.Geometry.PointD})">
            <summary>
                Returns the smallest circle that encloses all the given points. If 1 point is given, a circle of radius 0 is
                returned.</summary>
            <param name="points">
                The set of points to circumscribe.</param>
            <returns>
                The circumscribed circle.</returns>
            <remarks>
                <list type="bullet">
                    <item><description>
                        Runs in expected O(n) time, randomized.</description></item></list></remarks>
            <exception cref="T:System.InvalidOperationException">
                The input collection contained zero points.</exception>
        </member>
        <member name="M:RT.Util.Geometry.CircleD.ToRectangle">
            <summary>Returns the rectangle that fully encloses this circle.</summary>
        </member>
        <member name="T:RT.Util.Geometry.EdgeD">
            <summary>A double-precision class encapsulating a straight line segment connecting two points.</summary>
        </member>
        <member name="F:RT.Util.Geometry.EdgeD.Start">
            <summary>Start point of the line segment.</summary>
        </member>
        <member name="F:RT.Util.Geometry.EdgeD.End">
            <summary>End point of the line segment.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.#ctor(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>Initialises a line segment using the specified start and end point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Initialises a line segment using the start point (X1, Y1) and the end point (X2, Y2).</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.#ctor(RT.Util.Geometry.PointD,System.Double)">
            <summary>
                Initialises a line segment starting at the specified point. The ending point is 1 unit away at the specified
                angle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.EdgeD.Width">
            <summary>Returns the difference in the X-co-ordinates of the start and end point of this <see cref="T:RT.Util.Geometry.EdgeD"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.EdgeD.Height">
            <summary>Returns the difference in the Y-co-ordinates of the start and end point of this <see cref="T:RT.Util.Geometry.EdgeD"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.EdgeD.Length">
            <summary>Returns the length of this edge (the distance between <see cref="F:RT.Util.Geometry.EdgeD.Start"/> and <see cref="F:RT.Util.Geometry.EdgeD.End"/>).</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.IntersectsWith(RT.Util.Geometry.EdgeD,System.Boolean)">
            <summary>
                Determines whether two edges intersect.</summary>
            <param name="r">
                <see cref="T:RT.Util.Geometry.EdgeD"/> to compare against.</param>
            <param name="excludeVertexTouching">
                If <c>true</c>, edges that touch at the vertex are not considered to be intersecting.</param>
            <returns>
                True if both edges intersect with each other.</returns>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.Equals(RT.Util.Geometry.EdgeD)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.EdgeD"/> ignoring direction: edges are considered equal as long as they have the same
                endpoints.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.op_Equality(RT.Util.Geometry.EdgeD,RT.Util.Geometry.EdgeD)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.EdgeD"/> ignoring direction: edges are considered equal as long as they have the same
                endpoints.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.op_Inequality(RT.Util.Geometry.EdgeD,RT.Util.Geometry.EdgeD)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.EdgeD"/> ignoring direction: edges are considered equal as long as they have the same
                endpoints.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.GetHashCode">
            <summary>Returns a hash code for the current <see cref="T:RT.Util.Geometry.EdgeD"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.ToString">
            <summary>
                Provides a string representation of the current <see cref="T:RT.Util.Geometry.EdgeD"/>.</summary>
            <returns>
                A string representation of the current <see cref="T:RT.Util.Geometry.EdgeD"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.Equals(System.Object)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.EdgeD"/> objects for equality.</summary>
            <param name="obj">
                Object to compare against.</param>
            <returns>
                True if considered equal.</returns>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.PointOnEdgeNearestTo(RT.Util.Geometry.PointD)">
            <summary>Returns a point on this edge that is as near as possible to the specified point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.LambdaOfPointDroppedPerpendicularly(RT.Util.Geometry.PointD)">
            <summary> 
                Calculates the projection of the specified point onto the line defined by this edge. Returns the Lambda of
                this point P, defined by P = Start + Lambda * (End - Start). Hence the lambda is 0 if the projection falls
                exactly onto the Start point, and 1 if it falls on the End point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.Distance(RT.Util.Geometry.PointD)">
            <summary>
                Calculates the distance between the specified point and the extended straight line identified by this edge.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.ContainsPoint(RT.Util.Geometry.PointD)">
            <summary>
                Returns true if the specified point lies exactly on this edge. Accurate results are not guaranteed on edges
                which are not axis-aligned.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.CrossZ(RT.Util.Geometry.PointD)">
            <summary>
                Returns the Z component of the cross product of this edge, treated as a vector from <see cref="F:RT.Util.Geometry.EdgeD.Start"/> to
                <see cref="F:RT.Util.Geometry.EdgeD.End"/>, with a vector from <see cref="F:RT.Util.Geometry.EdgeD.Start"/> to the specified point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.EdgeD.CrossZ(RT.Util.Geometry.EdgeD)">
            <summary>
                Returns the Z component of the cross product of this edge, treated as a vector, with the specified edge, also
                treated as a vector.</summary>
        </member>
        <member name="T:RT.Util.Geometry.GeomUt">
            <summary>Contains general geometry-related utility functions.</summary>
        </member>
        <member name="M:RT.Util.Geometry.GeomUt.NormalizedAngle(System.Double)">
            <summary>"Unwinds" the specified angle so that it's in the range (-pi, pi]</summary>
        </member>
        <member name="M:RT.Util.Geometry.GeomUt.AngleDifference(System.Double,System.Double)">
            <summary>
                Returns "angle" relative to "reference". I.e. if the angles are the same, returns 0; if angle is further
                anticlockwise, returns a positive number.</summary>
        </member>
        <member name="M:RT.Util.Geometry.GeomUt.ArePointsSameSideOfLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Given a vector l, and two points pt1 and pt2, splits the space into two halves on the line defined by the
                vector l. If both points lie in the same half, returns true. If they lie in different halves, or if at least
                one point lies on the dividing line, returns false. If the vector l is of length 0, always returns false.</summary>
        </member>
        <member name="T:RT.Util.Geometry.Intersect">
            <summary>
                <para>
                    A utility class to find / test for intersections between geometric shapes.</para>
                <para>
                    In this static class, function names always have the two basic shapes ordered using the following order:</para>
                <list type="number">
                    <item>Line (infinite)</item>
                    <item>Ray (starts at a point, extends to infinity)</item>
                    <item>Segment (starts and ends on finite points)</item>
                    <item>Circle</item>
                    <item>BoundingBox (axis-aligned, ordered coords of each edge are known)</item></list>
                <para>
                    Hence it's always LineWithCircle, never CircleWithLine.</para></summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.LineWithLine(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.EdgeD@,System.Double@,System.Double@)">
            <summary>
                Finds the point of intersection of two lines. The result is in terms of lambda along each of the lines. Point
                of intersection is defined as "line.Start + lambda * line", for each line. If the lines don't intersect, the
                lambdas are set to NaN.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.LineWithLine(RT.Util.Geometry.EdgeD,RT.Util.Geometry.EdgeD)">
            <summary>
                Finds the point of intersection of two lines. If the lines don't intersect, the resulting point coordinates
                are NaN.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.intersect(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD,RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>
                <para>
                    Finds the point of intersection between two lines, specified by two points each.</para>
                <para>
                    If the lines coincide or are parallel, returns (NaN,NaN).</para></summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.LineWithCircle(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.CircleD@,System.Double@,System.Double@)">
            <summary>
                Finds the points of intersection between a line and a circle. The results are two lambdas along the line, one
                for each point, or NaN if there is no intersection.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.LineWithCircle(RT.Util.Geometry.EdgeD,RT.Util.Geometry.CircleD,System.Double@,System.Double@)">
            <summary>
                Finds the points of intersection between a line and a circle. The results are two lambdas along the line, one
                for each point, or NaN if there is no intersection.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.RayWithSegment(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.EdgeD@,System.Double@,System.Double@)">
            <summary>
                Calculates the intersection of a ray with a segment. Returns the result as the lambdas of the intersection
                point along the ray and the segment. If there is no intersection returns double.NaN in both lambdas.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.RayWithCircle(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.CircleD@,System.Double@,System.Double@)">
            <summary>
                Finds the points of intersection between a ray and a circle. The resulting lambdas along the ray are sorted in
                ascending order, so the "first" intersection is always in lambda1 (if any). Lambda may be NaN if there is no
                intersection (or no "second" intersection).</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.RayWithArc(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.ArcD@,System.Double@,System.Double@)">
            <summary>
                Finds the points of intersection between a ray and an arc. The resulting lambdas along the ray are sorted in
                ascending order, so the "first" intersection is always in lambda1 (if any). Lambda may be NaN if there is no
                intersection (or no "second" intersection).</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.RayWithRectangle(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.RectangleD@,System.Double@,System.Double@)">
            <summary>
                Finds intersections between a ray and a rectangle. Returns the lambdas of intersections, if any, or NaN
                otherwise. Guarantees that lambda1 &lt; lambda2, and if only one of them is NaN then it's lambda2. Lambda is
                such that ray.Start + lambda * (ray.End - ray.Start) gives the point of intersection.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.RayWithBoundingBox(RT.Util.Geometry.EdgeD@,RT.Util.Geometry.BoundingBoxD@)">
            <summary>
                Checks for intersections between a ray and a bounding box. Returns true if there is at least one intersection.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.SegmentWithSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                If the two specified line segments touch anywhere, returns true. Otherwise returns false. See Remarks.</summary>
            <remarks>
                Support for zero-length segments is partial - if one of the segments is of length 0 the result is correct, but
                if both are the result is always true.</remarks>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.BoundingBoxWithBoundingBox(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Checks for intersections between the two bounding boxes specified by the coordinates. Returns true if there is
                at least one intersection. Coordinates ending with "1" belong to the first box, "2" to the second one.
                Coordinates starting with "f" MUST be less than or equal to ones starting with "t".</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.BoundingBoxWithBoundingBox(RT.Util.Geometry.BoundingBoxD@,RT.Util.Geometry.BoundingBoxD@)">
            <summary>
                Checks for intersections between the two bounding boxes specified by the coordinates. Returns true if there is
                at least one intersection.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Intersect.PolygonWithConvexPolygon(RT.Util.Geometry.PolygonD,RT.Util.Geometry.PolygonD)">
            <summary>Returns a polygon formed by intersecting an arbitrary polygon with a convex polygon.</summary>
        </member>
        <member name="T:RT.Util.Geometry.PointD">
            <summary>Encapsulates a double-precision point.</summary>
        </member>
        <member name="F:RT.Util.Geometry.PointD.X">
            <summary>X-co-ordinate of the point.</summary>
        </member>
        <member name="F:RT.Util.Geometry.PointD.Y">
            <summary>Y-co-ordinate of the point.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.#ctor(System.Double,System.Double)">
            <summary>Initialises a double-precision point with the specified co-ordinates.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.#ctor(System.Double)">
            <summary>Initialises a double-precision point as a unit vector at a specified angle (in radians).</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Equals(System.Object)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.PointD"/> objects for equality.</summary>
            <param name="obj">
                Object to compare against.</param>
            <returns>
                True if considered equal.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Equals(RT.Util.Geometry.PointD)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.PointD"/> objects for equality.</summary>
            <param name="other">
                Object to compare against.</param>
            <returns>
                True if considered equal.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Equality(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.PointD"/> objects for equality.</summary>
            <param name="one">
                First object to compare.</param>
            <param name="other">
                Object to compare against.</param>
            <returns>
                True if considered equal.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Inequality(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>
                Compares two <see cref="T:RT.Util.Geometry.PointD"/> objects for inequality.</summary>
            <param name="one">
                First object to compare.</param>
            <param name="other">
                Object to compare against.</param>
            <returns>
                True if considered different.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_UnaryNegation(RT.Util.Geometry.PointD)">
            <summary>
                Performs unary vector negation (i.e. the resulting point is of the same length but pointing in the opposite
                direction).</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Addition(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>Performs vector addition, returning the result.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Subtraction(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>Performs vector subtraction, returning the result.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Multiply(System.Double,RT.Util.Geometry.PointD)">
            <summary>Scales a vector by a scalar.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Multiply(RT.Util.Geometry.PointD,System.Double)">
            <summary>Scales a vector by a scalar.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.op_Division(RT.Util.Geometry.PointD,System.Double)">
            <summary>Scales a vector by 1 / scalar (i.e. performs scalar division).</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.GetHashCode">
            <summary>Returns a hash code for the current <see cref="T:RT.Util.Geometry.PointD"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.ToPointF">
            <summary>
                Converts the current <see cref="T:RT.Util.Geometry.PointD"/> object to a <see cref="T:System.Drawing.PointF"/>. Note that doing so loses
                precision.</summary>
            <returns>
                Lower-precision <see cref="T:System.Drawing.PointF"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.#ctor(System.Drawing.PointF)">
            <summary>Converts the provided <see cref="T:System.Drawing.PointF"/> to a <see cref="T:RT.Util.Geometry.PointD"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.ToString">
            <summary>
                Provides a string representation of the current <see cref="T:RT.Util.Geometry.PointD"/>.</summary>
            <returns>
                A string representation of the current <see cref="T:RT.Util.Geometry.PointD"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Abs">
            <summary>Returns the length of the vector represented by this <see cref="T:RT.Util.Geometry.PointD"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Theta">
            <summary>Returns the theta (angle) of the vector represented by this <see cref="T:RT.Util.Geometry.PointD"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Unit">
            <summary>Returns the unit vector in the same direction as this one.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Dot(RT.Util.Geometry.PointD)">
            <summary>Returns the dot product of this vector with the specified one.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.CrossZ(RT.Util.Geometry.PointD)">
            <summary>
                Returns the Z-component of the cross product of this vector with the other one. The Z-component is equal to
                the product of: the lengths of the two vectors and the sin of the angle between them. Note that the X and Y
                components of a cross product of 2-vectors are always zero.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Normal">
            <summary>Returns a vector normal to this one.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.DecomposeAlong(RT.Util.Geometry.PointD,System.Double@,System.Double@)">
            <summary>
                Decomposes this vector into components relative to another vector.</summary>
            <param name="vector">
                Reference vector.</param>
            <param name="lenAlong">
                Length of this vector along the reference vector.</param>
            <param name="lenNormal">
                Length of this vector normal to the reference vector.</param>
        </member>
        <member name="M:RT.Util.Geometry.PointD.RecomposeAlong(RT.Util.Geometry.PointD,System.Double,System.Double)">
            <summary>
                Performs the inverse of <see cref="M:RT.Util.Geometry.PointD.DecomposeAlong(RT.Util.Geometry.PointD,System.Double@,System.Double@)"/>, modifying the current vector in place.</summary>
            <param name="vector">
                Reference vector.</param>
            <param name="lenAlong">
                Length of this vector along the reference vector.</param>
            <param name="lenNormal">
                Length of this vector normal to the reference vector.</param>
        </member>
        <member name="M:RT.Util.Geometry.PointD.LengthProjectedOnto(RT.Util.Geometry.PointD)">
            <summary>Returns the length of this vector's projection onto the specified vector.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.LengthProjectedOnto(System.Double)">
            <summary>Returns the length of this vector's projection onto a unit vector at the specified angle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.ProjectedOnto(RT.Util.Geometry.PointD)">
            <summary>
                Returns a vector representing the projection (i.e. length and direction) of this vector onto the specified
                vector.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Rotated(System.Double)">
            <summary>
                Returns a vector of the same length as this vector, but rotated by the specified <paramref name="angle"/>.</summary>
            <param name="angle">
                The angle in radians.</param>
            <returns>
                The rotated point.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Distance">
            <summary>Calculates the distance between this point and the origin.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PointD.Distance(RT.Util.Geometry.PointD)">
            <summary>Calculates the distance between this point and <paramref name="other"/>.</summary>
        </member>
        <member name="T:RT.Util.Geometry.PolygonD">
            <summary>This class encapsulates double-precision polygons.</summary>
        </member>
        <member name="P:RT.Util.Geometry.PolygonD.Vertices">
            <summary>Returns a list of vertices of the polygon.</summary>
        </member>
        <member name="P:RT.Util.Geometry.PolygonD.Edges">
            <summary>
                Enumerates the edges of this polygon in vertex order. The enumerable is "live" and reflects any changes to
                <see cref="P:RT.Util.Geometry.PolygonD.Vertices"/> immediately.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.#ctor(System.Collections.Generic.IEnumerable{RT.Util.Geometry.PointD})">
            <summary>
                Initializes a polygon from a given list of vertices.</summary>
            <param name="vertices">
                Vertices (corner points) to initialize polygon from.</param>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.#ctor(RT.Util.Geometry.PointD[])">
            <summary>
                Initializes a polygon from a given array of vertices.</summary>
            <param name="vertices">
                Vertices (corner points) to initialize polygon from.</param>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.ContainsPoint(System.Drawing.Point)">
            <summary>
                Determines whether the current <see cref="T:RT.Util.Geometry.PolygonD"/> contains the specified point.</summary>
            <param name="point">
                Point to check.</param>
            <returns>
                True if the specified point lies inside the current <see cref="T:RT.Util.Geometry.PolygonD"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.ContainsPoint(RT.Util.Geometry.PointD)">
            <summary>
                Determines whether the current <see cref="T:RT.Util.Geometry.PolygonD"/> contains the specified point. If the point lies exactly
                on one of the polygon edges, it is considered to be contained in the polygon.</summary>
            <param name="point">
                Point to check.</param>
            <returns>
                True if the specified point lies inside the current <see cref="T:RT.Util.Geometry.PolygonD"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.Area">
            <summary>
                Determines the area of the current <see cref="T:RT.Util.Geometry.PolygonD"/>.</summary>
            <returns>
                The area of the current <see cref="T:RT.Util.Geometry.PolygonD"/> in square units.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.ToPointFArray">
            <summary>
                Converts the current <see cref="T:RT.Util.Geometry.PolygonD"/> to an array of <see cref="T:System.Drawing.PointF"/> structures. Note that this
                conversion loses precision.</summary>
            <returns>
                Array of converted vertices with lower precision.</returns>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.Centroid">
            <summary>Calculates the centroid of this polygon.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.IsConvex">
            <summary>
                Determines whether this polygon is convex or concave. Throws if all vertices lie on a straight line, or if
                there are 2 or fewer vertices.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.BoundingBox">
            <summary>Returns the bounding box of this polygon.</summary>
        </member>
        <member name="M:RT.Util.Geometry.PolygonD.ToEdges">
            <summary>Returns an array containing all the edges of this polygon.</summary>
        </member>
        <member name="T:RT.Util.Geometry.RectangleD">
            <summary>A double-precision rectangle struct, representing an axis-aligned rectangle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.RectangleD.Empty">
            <summary>Represents an instance of the <see cref="T:RT.Util.Geometry.RectangleD"/> class with its members uninitialized.</summary>
        </member>
        <member name="F:RT.Util.Geometry.RectangleD.X">
            <summary>X coordinate of the minimal-X boundary</summary>
        </member>
        <member name="F:RT.Util.Geometry.RectangleD.Y">
            <summary>Y coordinate of the minimal-Y boundary</summary>
        </member>
        <member name="F:RT.Util.Geometry.RectangleD.Width">
            <summary>The width of the rectangle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.RectangleD.Height">
            <summary>The height of the rectangle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Constructs a new rectangle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.Left">
            <summary>Gets the X coordinate of the minimal-X boundary.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.Top">
            <summary>Gets the X coordinate of the minimal-Y boundary.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.Right">
            <summary>Gets the X coordinate of the maximal-X boundary.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.Bottom">
            <summary>Gets the Y coordinate of the maximal-Y boundary.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.IsEmpty">
            <summary>Returns true if this rectangle has zero extent.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.TopLeft">
            <summary>Returns the top-left point of this rectangle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.TopRight">
            <summary>Returns the top-right point of this rectangle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.BottomLeft">
            <summary>Returns the bottom-left point of this rectangle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.RectangleD.BottomRight">
            <summary>Returns the bottom-right point of this rectangle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.PerimeterIntersectsWith(RT.Util.Geometry.RectangleD)">
            <summary>
                Checks if the perimeter of this rectangle intersects with that of <paramref name="rect"/>.</summary>
            <param name="rect">
                Other rectangle to check against.</param>
            <returns>
                Returns true if the perimeter of this rectangle intersects with that of <paramref name="rect"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.IntersectsWith(RT.Util.Geometry.RectangleD)">
            <summary>
                Determines if this rectangle intersects with <paramref name="rect"/>.</summary>
            <param name="rect">
                The rectangle to test.</param>
            <returns>
                Returns true if there is any intersection, otherwise false.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.Contains(System.Double,System.Double)">
            <summary>Returns true if the specified point is contained within the rectangle (or lies exactly on a boundary).</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.Equals(RT.Util.Geometry.RectangleD)">
            <summary>Returns true if the two rectangles have identical coordinates and sizes.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Equality(RT.Util.Geometry.RectangleD,RT.Util.Geometry.RectangleD)">
            <summary>Compares two rectangles for equality using <see cref="M:RT.Util.Geometry.RectangleD.Equals(RT.Util.Geometry.RectangleD)"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Inequality(RT.Util.Geometry.RectangleD,RT.Util.Geometry.RectangleD)">
            <summary>Compares two rectangles for inequality using <see cref="M:RT.Util.Geometry.RectangleD.Equals(RT.Util.Geometry.RectangleD)"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.GetHashCode">
            <summary>Returns a hash code for the rectangle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Multiply(RT.Util.Geometry.RectangleD,System.Double)">
            <summary>Scales the rectangle’s position and size by the specified factor.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Multiply(System.Double,RT.Util.Geometry.RectangleD)">
            <summary>Scales the rectangle’s position and size by the specified factor.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Addition(RT.Util.Geometry.RectangleD,RT.Util.Geometry.PointD)">
            <summary>Moves the rectangle’s position by the specified offset.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Addition(RT.Util.Geometry.PointD,RT.Util.Geometry.RectangleD)">
            <summary>Moves the rectangle’s position by the specified offset.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Subtraction(RT.Util.Geometry.RectangleD,RT.Util.Geometry.PointD)">
            <summary>Moves the rectangle’s position by the negation of the specified offset.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.ToString">
            <summary>Converts the rectangle to a string representation.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.Equals(System.Object)">
            <summary>Compares a rectangle to any other object.</summary>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.Union(RT.Util.Geometry.RectangleD,RT.Util.Geometry.RectangleD)">
            <summary>
                Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.</summary>
            <param name="a">
                A rectangle to union.</param>
            <param name="b">
                A rectangle to union.</param>
            <returns>
                A third <see cref="T:RT.Util.Geometry.RectangleD"/> structure that contains both of the two rectangles that form the union.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.Round">
            <summary>
                Converts the current <see cref="T:RT.Util.Geometry.RectangleD"/> to a <c>System.Drawing.Rectangle</c> by rounding the
                double-precision values to the nearest integer values.</summary>
            <returns>
                A <c>System.Drawing.Rectangle</c>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.RoundOutward">
            <summary>
                Returns the smallest <c>System.Drawing.Rectangle</c> that entirely contains the current <see
                cref="T:RT.Util.Geometry.RectangleD"/>.</summary>
            <returns>
                A <c>System.Drawing.Rectangle</c>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.op_Implicit(System.Drawing.Rectangle)~RT.Util.Geometry.RectangleD">
            <summary>
                Converts the specified <c>System.Drawing.Rectangle</c> structure to a <see cref="T:RT.Util.Geometry.RectangleD"/> structure.</summary>
            <param name="self">
                The <c>System.Drawing.Rectangle</c> structure to convert.</param>
            <returns>
                The <see cref="T:RT.Util.Geometry.RectangleD"/> structure that is converted from the specified <c>System.Drawing.Rectangle</c>
                structure.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.Normalize">
            <summary>
                Returns a new <see cref="T:RT.Util.Geometry.RectangleD"/> in which the <see cref="F:RT.Util.Geometry.RectangleD.Width"/> and/or <see cref="F:RT.Util.Geometry.RectangleD.Height"/> are never
                negative, by flipping the rectangle as necessary.</summary>
            <returns>
                A normalized <see cref="T:RT.Util.Geometry.RectangleD"/>.</returns>
        </member>
        <member name="M:RT.Util.Geometry.RectangleD.ToRectangleF">
            <summary>Converts this rectangle to a <see cref="T:System.Drawing.RectangleF"/>.</summary>
        </member>
        <member name="T:RT.Util.Geometry.TriangleD">
            <summary>Encapsulates a triangle defined by vertices represented as <see cref="T:RT.Util.Geometry.PointD"/> values.</summary>
        </member>
        <member name="F:RT.Util.Geometry.TriangleD.V1">
            <summary>Vertices defining the triangle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.TriangleD.V2">
            <summary>Vertices defining the triangle.</summary>
        </member>
        <member name="F:RT.Util.Geometry.TriangleD.V3">
            <summary>Vertices defining the triangle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.TriangleD.#ctor(RT.Util.Geometry.PointD,RT.Util.Geometry.PointD,RT.Util.Geometry.PointD)">
            <summary>Instantiates a new triangle with the specified vertices.</summary>
        </member>
        <member name="M:RT.Util.Geometry.TriangleD.ToString">
            <summary>Returns a string representation of the triangle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Edge12">
            <summary>Gets the edge connecting vertices <see cref="F:RT.Util.Geometry.TriangleD.V1"/> and <see cref="F:RT.Util.Geometry.TriangleD.V2"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Edge23">
            <summary>Gets the edge connecting vertices <see cref="F:RT.Util.Geometry.TriangleD.V2"/> and <see cref="F:RT.Util.Geometry.TriangleD.V3"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Edge31">
            <summary>Gets the edge connecting vertices <see cref="F:RT.Util.Geometry.TriangleD.V3"/> and <see cref="F:RT.Util.Geometry.TriangleD.V1"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.TriangleD.HasVertex(RT.Util.Geometry.PointD)">
            <summary>Returns a value indicating whether one of the triangle vertices is equal to <paramref name="v"/>.</summary>
        </member>
        <member name="M:RT.Util.Geometry.TriangleD.HasEdge(RT.Util.Geometry.EdgeD)">
            <summary>
                Returns a value indicating whether one of the triangle edges is equal to <paramref name="e"/>. Edge equality
                is direction-insensitive.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Vertices">
            <summary>Enumerates the vertices <see cref="F:RT.Util.Geometry.TriangleD.V1"/>, <see cref="F:RT.Util.Geometry.TriangleD.V2"/> and <see cref="F:RT.Util.Geometry.TriangleD.V3"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Edges">
            <summary>Enumerates the edges <see cref="P:RT.Util.Geometry.TriangleD.Edge12"/>, <see cref="P:RT.Util.Geometry.TriangleD.Edge23"/> and <see cref="P:RT.Util.Geometry.TriangleD.Edge31"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Centroid">
            <summary>
                Gets the centroid of the triangle. This point is guaranteed to lie inside the triangle, and is the fastest way
                to obtain a point lying inside the triangle.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Circumcenter">
            <summary>Gets the circumcenter of the triangle, i.e. the center of the triangle's circumcircle.</summary>
        </member>
        <member name="M:RT.Util.Geometry.TriangleD.CircumcircleContains(RT.Util.Geometry.PointD)">
            <summary>Returns a value indicating whether the circumcircle of this triangle contains <paramref name="v"/>.</summary>
        </member>
        <member name="P:RT.Util.Geometry.TriangleD.Circumcircle">
            <summary>Returns the circumcircle of this triangle.</summary>
        </member>
        <member name="T:RT.Util.Geometry.Triangulate">
            <summary>Triangulation-related routines.</summary>
        </member>
        <member name="M:RT.Util.Geometry.Triangulate.Delaunay(System.Collections.Generic.IEnumerable{RT.Util.Geometry.PointD})">
            <summary>
                Constructs a Delaunay triangulation of the <paramref name="vertices"/>.</summary>
            <remarks>
                Adapted mainly from https://github.com/Bl4ckb0ne/delaunay-triangulation</remarks>
        </member>
        <member name="M:RT.Util.Geometry.Triangulate.DelaunayConstrained(System.Collections.Generic.IEnumerable{RT.Util.Geometry.PointD},System.Collections.Generic.IEnumerable{RT.Util.Geometry.EdgeD})">
            <summary>
                Constructs a Delaunay-like triangulation constrained to contain all edges listed in <paramref
                name="requiredEdges"/>. The implementation is naive and very slow for larger meshes, because instead of
                incrementally re-triangulating only the affected triangles upon an edge split, it performs a full
                triangulation every time.</summary>
        </member>
        <member name="T:RT.Util.IL.ILReader">
            <summary>Decodes the IL inside a specified method.</summary>
        </member>
        <member name="M:RT.Util.IL.ILReader.ReadIL(System.Reflection.MethodBase,System.Type)">
            <summary>Decodes the IL inside the specified method.</summary>
            <param name="method">The method whose IL to decode. This may be a constructor, too.</param>
            <param name="genericContext">The type in which the method is declared, to provide context to resolve members that involve generics.</param>
            <returns>The sequence of <see cref="T:RT.Util.IL.Instruction"/> instances describing the instructions in the method.</returns>
        </member>
        <member name="T:RT.Util.IL.Instruction">
            <summary>Describes an IL instruction in a method.</summary>
        </member>
        <member name="P:RT.Util.IL.Instruction.StartOffset">
            <summary>The byte offset at which this instruction starts.</summary>
        </member>
        <member name="P:RT.Util.IL.Instruction.OpCode">
            <summary>The opcode of the instruction.</summary>
        </member>
        <member name="P:RT.Util.IL.Instruction.Operand">
            <summary>The operand. Depending on the <see cref="P:RT.Util.IL.Instruction.OpCode"/>, this may be a <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.MethodBase"/>, <see cref="T:System.Type"/>, byte, short, int, long, string, float, double, or null.
            In the case of the switch instruction, it is an int[].</summary>
        </member>
        <member name="M:RT.Util.IL.Instruction.#ctor(System.Int32,System.Reflection.Emit.OpCode,System.Object)">
            <summary>Constructs an instance representing an IL instruction.</summary>
            <param name="startOffset">The byte offset at which this instruction starts.</param>
            <param name="opCode">The opcode of the instruction.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:RT.Util.IL.Instruction.ToString">
            <summary>Returns a string representation of this object.</summary>
        </member>
        <member name="T:RT.Util.LogType">
            <summary>Specifies the type of a log message logged using a subclass of <see cref="T:RT.Util.LoggerBase"/>.</summary>
        </member>
        <member name="F:RT.Util.LogType.Info">
            <summary>Specifies an informational log message.</summary>
        </member>
        <member name="F:RT.Util.LogType.Warning">
            <summary>Specifies a warning message.</summary>
        </member>
        <member name="F:RT.Util.LogType.Error">
            <summary>Specifies an error message.</summary>
        </member>
        <member name="F:RT.Util.LogType.Debug">
            <summary>Specifies a debug message.</summary>
        </member>
        <member name="T:RT.Util.LoggerBase">
            <summary>
                Abstract base class for all loggers. Implements some common functionality.</summary>
            <remarks>
                Use a lock on this object to make several consecutive logging operations atomic.</remarks>
        </member>
        <member name="F:RT.Util.LoggerBase.VerbosityLimit">
            <summary>
                Holds the current verbosity limit for each of the log types. Only messages with same or lower verbosity will
                be printed. Defaults to level 1 for all messages except debug, which defaults to 0.</summary>
            <remarks>
                Applications can print a message with a verbosity level of 0 - such messages cannot be disabled.</remarks>
        </member>
        <member name="F:RT.Util.LoggerBase.TimestampFormat">
            <summary>
                Holds a format string for printing the date/time at which a log entry was added. Defaults to a full
                ISO-formatted date/time string with milliseconds.</summary>
        </member>
        <member name="F:RT.Util.LoggerBase.MessageFormat">
            <summary>
                Holds a format string for the log information message. This will receive the following arguments: {0}:
                timestamp, {1}: message type string, {2}: message verbosity level. The actual message will be printed
                immediately after the log information message.</summary>
        </member>
        <member name="F:RT.Util.LoggerBase.IndentFormatSuffix">
            <summary>
                When printing multi-line (e.g. wrapped) messages, the indent text will consist of a number of spaces and end
                with this suffix.</summary>
        </member>
        <member name="F:RT.Util.LoggerBase.TimestampInUTC">
            <summary>If true, the timestamps will be printed in UTC. Otherwise in local time. Defaults to false.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.#ctor">
            <summary>Initialises some members to their default values.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.GetMessageTypeString(RT.Util.LogType)">
            <summary>Specifies a short string describing each log type (INFO, WARN, ERROR, or DEBUG).</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.ConfigureVerbosity(System.String)">
            <summary>
                Takes a string which encodes verbosity limit configuration, parses it and sets the limits accordingly. On
                failure throws an ArgumentException with a fairly detailed description of the string format.</summary>
            <remarks>
                <para>
                    Examples of valid strings:</para>
                <list type="table">
                    <item><term>
                        ""</term>
                    <description>
                        sets default values</description></item>
                    <item><term>
                        "3"</term>
                    <description>
                        sets all limits to 3</description></item>
                    <item><term>
                        "2d0"</term>
                    <description>
                        sets all limits to 2, then set the debug limit to 0</description></item>
                    <item><term>
                        "i0w1e2d3"</term>
                    <description>
                        sets info=0, warning=1, error=2, debug=3</description></item></list>
                <para>
                    Intended use: configuring the logger via a command-line option.</para></remarks>
        </member>
        <member name="M:RT.Util.LoggerBase.GetFormattedStrings(System.String@,System.String@,System.UInt32,RT.Util.LogType)">
            <summary>
                Helps prepare a log message to the derived classes. Takes the parameters supplied by a call to one of the Log
                methods and generates two strings: the <paramref name="fmtInfo"/> which is the message header and the
                <paramref name="indent"/> which is the indent text.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Log(System.UInt32,RT.Util.LogType,System.String)">
            <summary>
                Appends an entry to the log. Derived classes implement this to put the log data where necessary.</summary>
            <remarks>
                Note that the various specialised functions such as <see cref="M:RT.Util.LoggerBase.Warn(System.String)"/> simply call this method to do
                the work.</remarks>
            <param name="verbosity">
                Verbosity level of this message.</param>
            <param name="type">
                Message type (info, warning, error or debug).</param>
            <param name="message">
                The message itself.</param>
            <seealso cref="M:RT.Util.LoggerBase.GetFormattedStrings(System.String@,System.String@,System.UInt32,RT.Util.LogType)"/>
        </member>
        <member name="M:RT.Util.LoggerBase.Separator">
            <summary>Creates a visual separation in the log, for example if a new section starts.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.IsLogOn(System.UInt32,RT.Util.LogType)">
            <summary>Returns true if a message of the specified verbosity and type will actually end up being logged.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Info(System.String)">
            <summary>Appends an informational message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Info(System.UInt32,System.String)">
            <summary>Appends an informational message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Warn(System.String)">
            <summary>Appends a warning message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Warn(System.UInt32,System.String)">
            <summary>Appends a warning message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Error(System.String)">
            <summary>Appends an error message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Error(System.UInt32,System.String)">
            <summary>Appends an error message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Debug(System.String)">
            <summary>Appends a debug message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Debug(System.UInt32,System.String)">
            <summary>Appends a debug message to the log.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.IsInfoOn(System.UInt32)">
            <summary>Determines whether an informational message would be visible at specified verbosity.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.IsWarnOn(System.UInt32)">
            <summary>Determines whether a warning message would be visible at specified verbosity.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.IsErrorOn(System.UInt32)">
            <summary>Determines whether an error message would be visible at specified verbosity.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.IsDebugOn(System.UInt32)">
            <summary>Determines whether a debug message would be visible at specified verbosity.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Exception(System.Exception,RT.Util.LogType)">
            <summary>Logs an exception with a stack trace and verbosity 1.</summary>
        </member>
        <member name="M:RT.Util.LoggerBase.Exception(System.Exception,System.UInt32,RT.Util.LogType)">
            <summary>
                Logs an exception with a stack trace at the specified verbosity and message type. Any InnerExceptions are also
                logged as appropriate.</summary>
        </member>
        <member name="T:RT.Util.NullLogger">
            <summary>
                Implements a logger which doesn't do anything with the log messages. Use this as the default logger where no
                logging is wanted by default, to avoid checks for null in every log message.</summary>
        </member>
        <member name="F:RT.Util.NullLogger.Instance">
            <summary>Provides a preallocated instance of <see cref="T:RT.Util.NullLogger"/>.</summary>
        </member>
        <member name="M:RT.Util.NullLogger.Log(System.UInt32,RT.Util.LogType,System.String)">
            <summary>Does nothing.</summary>
        </member>
        <member name="M:RT.Util.NullLogger.Separator">
            <summary>Does nothing.</summary>
        </member>
        <member name="T:RT.Util.ConsoleLogger">
            <summary>
                Implements a logger which outputs messages to the console, word-wrapping long messages. Can use different colors
                for the different message types.</summary>
        </member>
        <member name="F:RT.Util.ConsoleLogger.WordWrap">
            <summary>Set this to false to disable the word-wrapping of messages to the width of the console window.</summary>
        </member>
        <member name="F:RT.Util.ConsoleLogger.ErrorsToStdErr">
            <summary>
                Set this to false to ensure that all messages are printed to StdOut (aka Console.Out). By default error
                messages will be printed to StdErr instead (aka Console.Error).</summary>
        </member>
        <member name="M:RT.Util.ConsoleLogger.#ctor">
            <summary>Constructs a new console logger.</summary>
        </member>
        <member name="F:RT.Util.ConsoleLogger.InterpretMessagesAsEggsML">
            <summary>Set this to true to interpret all the messages as EggsML.</summary>
        </member>
        <member name="M:RT.Util.ConsoleLogger.GetMessageTypeColor(RT.Util.LogType)">
            <summary>Gets a text color for each of the possible message types.</summary>
        </member>
        <member name="M:RT.Util.ConsoleLogger.Log(System.UInt32,RT.Util.LogType,System.String)">
            <summary>Logs a message to the console.</summary>
        </member>
        <member name="M:RT.Util.ConsoleLogger.Separator">
            <summary>Creates a visual separation in the log, for example if a new section starts.</summary>
        </member>
        <member name="T:RT.Util.StreamLogger">
            <summary>
                Implements a logger which puts messages into any <see cref="P:RT.Util.StreamLogger.Stream"/> by creating a TextWriter wrapper around it.
                Use this logger only if the stream will remain open for the duration of the execution.</summary>
        </member>
        <member name="M:RT.Util.StreamLogger.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:RT.Util.StreamLogger.#ctor(System.IO.Stream)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="P:RT.Util.StreamLogger.Stream">
            <summary>Gets or sets the stream to which messages are logged.</summary>
        </member>
        <member name="P:RT.Util.StreamLogger.StreamWriter">
            <summary>
                Gets the <see cref="T:System.IO.StreamWriter"/> used by this StreamLogger for writing text. Intended use is to
                enable the caller to write arbitrary text to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.StreamLogger.Log(System.UInt32,RT.Util.LogType,System.String)">
            <summary>Logs a message to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.StreamLogger.Separator">
            <summary>Creates a visual separation in the log, for example if a new section starts.</summary>
        </member>
        <member name="T:RT.Util.FileAppendLogger">
            <summary>
                Implements a logger which appends messages to a file by opening and closing the file each time. This is in
                contrast to <see cref="T:RT.Util.StreamLogger"/>, which keeps the stream open.</summary>
        </member>
        <member name="M:RT.Util.FileAppendLogger.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:RT.Util.FileAppendLogger.#ctor(System.String)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="P:RT.Util.FileAppendLogger.Filename">
            <summary>Gets or sets the path to the file to which messages are logged.</summary>
        </member>
        <member name="P:RT.Util.FileAppendLogger.SharingVioWait">
            <summary>Gets or sets the amount of time to wait when the log file is in use. <c>null</c> waits indefinitely.</summary>
        </member>
        <member name="M:RT.Util.FileAppendLogger.Log(System.UInt32,RT.Util.LogType,System.String)">
            <summary>Logs a message to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.FileAppendLogger.Separator">
            <summary>Creates a visual separation in the log, for example if a new section starts.</summary>
        </member>
        <member name="T:RT.Util.MulticastLogger">
            <summary>
                Implements a logger which can log messages to several other loggers. The underlying loggers can be configured as
                necessary; their settings will be respected.</summary>
        </member>
        <member name="F:RT.Util.MulticastLogger.Loggers">
            <summary>Add or remove the underlying loggers here. Every logger in this dictionary will be logged to.</summary>
        </member>
        <member name="M:RT.Util.MulticastLogger.#ctor">
            <summary>
                Initializes a <see cref="T:RT.Util.MulticastLogger"/> with initially no loggers configured. Use <see cref="F:RT.Util.MulticastLogger.Loggers"/> to
                add them.</summary>
        </member>
        <member name="M:RT.Util.MulticastLogger.Log(System.UInt32,RT.Util.LogType,System.String)">
            <summary>Logs a message to the underlying loggers.</summary>
        </member>
        <member name="M:RT.Util.MulticastLogger.Separator">
            <summary>Creates a visual separation in the log, for example if a new section starts.</summary>
        </member>
        <member name="M:RT.Util.MulticastLogger.IsLogOn(System.UInt32,RT.Util.LogType)">
            <summary>
                Returns false if logging a message with the specified settings would not actually result in any logger
                producing any output. When this is false it is safe for a program to skip logging a message with these
                settings.</summary>
        </member>
        <member name="M:RT.Util.MulticastLogger.ConfigureVerbosity(System.String)">
            <summary>
                Configures the verbosity of every underlying logger. See <see cref="M:RT.Util.LoggerBase.ConfigureVerbosity(System.String)"/> for more
                info.</summary>
        </member>
        <member name="T:RT.Util.MultipartFormDataHelper">
            <summary>
                Simplifies submitting POST requests with data encoded in the multipart/form-data format. See Remarks.</summary>
            <remarks>
                The simplest use example is to create a web request using <c>(HttpWebRequest) WebRequest.Create(...)</c>, add the data
                using <see cref="M:RT.Util.MultipartFormDataHelper.AddField(System.String,System.String)"/> and <see cref="M:RT.Util.MultipartFormDataHelper.AddFile(System.String,System.String,System.String)"/> methods, and complete the request using
                <see cref="M:RT.Util.MultipartFormDataHelper.GetResponse"/>.</remarks>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.#ctor(System.Net.HttpWebRequest)">
            <summary>
                Constructor.</summary>
            <param name="request">
                The request to be used for the form data submission. This class automatically sets several fields which should not
                be modified by the caller afterwards. These are: Method, ContentType. You MUST NOT call <see
                cref="M:System.Net.HttpWebRequest.GetRequestStream"/> or <see cref="M:System.Net.HttpWebRequest.GetResponse"/> on this request. You may
                modify request headers until the first call to an Add* method.</param>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.GetResponse">
            <summary>
                Finalizes the request and sends it to the remote host (or, if the request is not buffered, ensures the entire
                request has been sent). Waits for response and returns the response object.</summary>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.AddField(System.String,System.String)">
            <summary>
                Adds a named text value to the POST request.</summary>
            <param name="name">
                The name of the value to add. For maximum compatibility with servers, use only printable ASCII characters in this
                name. This field is encoded using UTF-8, which is supported by some modern servers, but not by others.</param>
            <param name="value">
                The content to add as the value. Note that this is interpreted as Unicode text, and is a poor choice for binary
                data. For binary data, see <see cref="M:RT.Util.MultipartFormDataHelper.AddFile(System.String,System.String,System.String)"/>.</param>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.AddFile(System.String,System.String,System.String)">
            <summary>
                Adds a named file (or, generally, a binary data field) to the POST request.</summary>
            <param name="name">
                The name of the value to add. For maximum compatibility with servers, use only printable ASCII characters in this
                name. This field is encoded using UTF-8, which is supported by some modern servers, but not by others.</param>
            <param name="filename">
                The filename to use. The server may interpret this as it pleases, but this value will often end up being exposed
                as the name of the uploaded file. For maximum compatibility with servers, use only printable ASCII characters in
                this name. This field is encoded using UTF-8, which is supported by some modern servers, but not by
                others.</param>
            <param name="contentType">
                The content type to specify for this data/file. Some servers decide whether to accept or reject an upload based on
                the content type. Specify <c>null</c> to prevent the inclusion of the Content-Type header.</param>
            <returns>
                A stream into which the binary data is to be written. You may close this stream when done, but if you don't, it
                will be closed automatically next time you add a field or a file, or if you call <see cref="M:RT.Util.MultipartFormDataHelper.GetResponse"/> (which
                prevents further writing).</returns>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.AddFile(System.String,System.String,System.Byte[],System.String)">
            <summary>
                Adds a named file (or, generally, a binary data field) to the POST request.</summary>
            <param name="name">
                The name of the value to add. For maximum compatibility with servers, use only printable ASCII characters in this
                name. This field is encoded using UTF-8, which is supported by some modern servers, but not by others.</param>
            <param name="filename">
                The filename to use. The server may interpret this as it pleases, but this value will often end up being exposed
                as the name of the uploaded file. For maximum compatibility with servers, use only printable ASCII characters in
                this name. This field is encoded using UTF-8, which is supported by some modern servers, but not by
                others.</param>
            <param name="data">
                The binary data to send as the content of this file.</param>
            <param name="contentType">
                The content type to specify for this data/file. Some servers decide whether to accept or reject an upload based on
                the content type. Specify <c>null</c> to prevent the inclusion of the Content-Type header.</param>
        </member>
        <member name="T:RT.Util.MultipartFormDataHelper.MultipartFileStream">
            <summary>
                Encapsulates a stream used for writing a file body into a multipart/form-data stream.</summary>
            <remarks>
                The main purpose is to prevent the caller accidentally closing the request stream (which results in an exception
                whose cause is pretty tricky to establish).</remarks>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.MultipartFileStream.Close">
            <summary>
                Closes the stream and prevents further writing to this stream. You may call this explicitly; you may call <see
                cref="M:System.IO.Stream.Dispose"/> instead, or you could just leave it up to <see cref="T:RT.Util.MultipartFormDataHelper"/> to
                close this stream automatically next time a new field or file is added, or when the helper itself is
                closed.</summary>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.MultipartFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes file data to the request stream.</summary>
        </member>
        <member name="P:RT.Util.MultipartFormDataHelper.MultipartFileStream.CanWrite">
            <summary>Always <c>true</c>.</summary>
        </member>
        <member name="P:RT.Util.MultipartFormDataHelper.MultipartFileStream.CanRead">
            <summary>Always <c>false</c>.</summary>
        </member>
        <member name="P:RT.Util.MultipartFormDataHelper.MultipartFileStream.CanSeek">
            <summary>Always <c>false</c>.</summary>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.MultipartFileStream.Flush">
            <summary>Flushes the request stream.</summary>
        </member>
        <member name="P:RT.Util.MultipartFormDataHelper.MultipartFileStream.Length">
            <summary>Throws a <c>NotSupportedException</c>.</summary>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.MultipartFileStream.SetLength(System.Int64)">
            <summary>Throws a <c>NotSupportedException</c>.</summary>
        </member>
        <member name="P:RT.Util.MultipartFormDataHelper.MultipartFileStream.Position">
            <summary>Throws a <c>NotSupportedException</c>.</summary>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.MultipartFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Throws a <c>NotSupportedException</c>.</summary>
        </member>
        <member name="M:RT.Util.MultipartFormDataHelper.MultipartFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Throws a <c>NotSupportedException</c>.</summary>
        </member>
        <member name="T:RT.Util.NameGenerator">
            <summary>Generates a sequence of short names starting with “a” through “z”, followed by two-letter names etc.</summary>
        </member>
        <member name="M:RT.Util.NameGenerator.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.NameGenerator.NextName">
            <summary>Generates the next name in the sequence.</summary>
        </member>
        <member name="T:RT.Util.Paths.PathManager">
            <summary>
                Maintains a selection of paths in the filesystem and offers methods for enumerating all the included paths and/or
                files.</summary>
            <remarks>
                <para>
                    Initially empty. Paths may be added to the set (with all subpaths) by calling <see cref="M:RT.Util.Paths.PathManager.AddIncludePath(System.String)"/>, and
                    removed from the set using <see cref="M:RT.Util.Paths.PathManager.AddExcludePath(System.String)"/> (again, with subpaths). The order of these calls is
                    important.</para>
                <para>
                    There is currently no support for including or excluding non-recursively, nor for including/excluding specific
                    files.</para></remarks>
        </member>
        <member name="M:RT.Util.Paths.PathManager.#ctor">
            <summary>Constructs an empty instance.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.#ctor(System.String[])">
            <summary>Constructs an instance containing all of the specified paths (with all subpaths).</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Constructs an instance containing all of the specified paths (with all subpaths).</summary>
        </member>
        <member name="T:RT.Util.Paths.PathManager.PathInfo">
            <summary>The structure used to store path information</summary>
        </member>
        <member name="P:RT.Util.Paths.PathManager.PathInfo.Path">
            <summary>An absolute path to a directory.</summary>
        </member>
        <member name="P:RT.Util.Paths.PathManager.PathInfo.Include">
            <summary>Whether everything under the specified path is included or excluded from the set.</summary>
        </member>
        <member name="P:RT.Util.Paths.PathManager.Paths">
            <summary>Contains the list of all included and excluded paths.</summary>
        </member>
        <member name="P:RT.Util.Paths.PathManager.ShouldRecurseIntoReparsePoint">
            <summary>
                If set, this callback is invoked whenever a reparse point is encountered to decide whether to process it or
                skip it. If null, reparse points are not recursed into.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.Clone">
            <summary>Creates a deep clone of this class.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.findPathEntry(System.String)">
            <summary>Returns the index of the specified path or -1 if not found</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.addPathEntry(System.String,System.Boolean)">
            <summary>Adds an include/exclude entry</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.deleteSubpathEntries(System.String)">
            <summary>Deletes all entries which are subpaths of the specified path.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.AddIncludePath(System.String)">
            <summary>
                Makes the specified path and all subpaths included into the set of paths.</summary>
            <remarks>
                The exact way in which this call affects <see cref="P:RT.Util.Paths.PathManager.Paths"/> is not part of the contract. This method only
                guarantees that this path and all subpaths will be part of the set after the call returns.</remarks>
        </member>
        <member name="M:RT.Util.Paths.PathManager.AddExcludePath(System.String)">
            <summary>
                Makes the specified path and all subpaths excluded from the set of paths.</summary>
            <remarks>
                The exact way in which this call affects <see cref="P:RT.Util.Paths.PathManager.Paths"/> is not part of the contract. This method only
                guarantees that this path and all subpaths will not be part of the set after the call returns.</remarks>
        </member>
        <member name="M:RT.Util.Paths.PathManager.Include(System.String)">
            <summary>A synonym for <see cref="M:RT.Util.Paths.PathManager.AddIncludePath(System.String)"/>, only chainable (returns <c>this</c>).</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.Exclude(System.String)">
            <summary>A synonym for <see cref="M:RT.Util.Paths.PathManager.AddExcludePath(System.String)"/>, only chainable (returns <c>this</c>).</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.Reset">
            <summary>Resets the set of paths to a state where all paths are excluded.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.IsPathIncluded(System.String)">
            <summary>Returns true iff the specified path is part of the path set.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.IsPathIncludedWithAllSubpaths(System.String)">
            <summary>Returns true iff the specified path and all the subpaths are part of the path set.</summary>
        </member>
        <member name="F:RT.Util.Paths.PathManager.ReportFail">
            <summary>
                If assigned, this delegate will be called whenever a directory cannot be enumerated, e.g. due to being unreadable
                etc. This function must return "false" in order to terminate scanning or "true" to continue.</summary>
        </member>
        <member name="F:RT.Util.Paths.PathManager.FailedFiles">
            <summary>Paths which could not be read while enumerating PathManager. Automatically cleared before each enumeration.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.GetEntries">
            <summary>
                Enumerates all files and directories according to the paths that were added using <see cref="M:RT.Util.Paths.PathManager.AddIncludePath(System.String)"/> and
                <see cref="M:RT.Util.Paths.PathManager.AddExcludePath(System.String)"/>. If any paths cannot be enumerated, they are added to the <see cref="F:RT.Util.Paths.PathManager.FailedFiles"/>
                list, which is cleared before enumeration begins.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.GetFiles">
            <summary>
                Enumerates all files (not folders) according to the paths that were added using <see cref="M:RT.Util.Paths.PathManager.AddIncludePath(System.String)"/> and
                <see cref="M:RT.Util.Paths.PathManager.AddExcludePath(System.String)"/>. If any paths cannot be enumerated, they are added to the <see cref="F:RT.Util.Paths.PathManager.FailedFiles"/>
                list, which is cleared before enumeration begins.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.GetDirectories">
            <summary>
                Enumerates all directories (not files) according to the paths that were added using <see cref="M:RT.Util.Paths.PathManager.AddIncludePath(System.String)"/>
                and <see cref="M:RT.Util.Paths.PathManager.AddExcludePath(System.String)"/>. If any paths cannot be enumerated, they are added to the <see
                cref="F:RT.Util.Paths.PathManager.FailedFiles"/> list, which is cleared before enumeration begins.</summary>
        </member>
        <member name="M:RT.Util.Paths.PathManager.pathLevelDistance(System.String,System.String)">
            <summary>
                Determines the number of sublevels <paramref name="path"/> is away from <paramref name="ref_path"/>. Positive
                numbers indicate that <paramref name="path"/> is deeper than <paramref name="ref_path"/>; negative that it's above
                <paramref name="ref_path"/>.</summary>
            <param name="ref_path">
                Reference path</param>
            <param name="path">
                Path to be compared</param>
            <returns>
                The number of sublevels, or int.MaxValue if neither path is a subpath of the other.</returns>
        </member>
        <member name="T:RT.Util.PathException">
            <summary>Represents a path-related exception.</summary>
        </member>
        <member name="M:RT.Util.PathException.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.PathException.#ctor(System.String)">
            <summary>
                Constructor.</summary>
            <param name="message">
                Exception message.</param>
        </member>
        <member name="T:RT.Util.PathUtil">
            <summary>Provides path-related utilities.</summary>
        </member>
        <member name="F:RT.Util.PathUtil._cachedAppPath">
            <summary>Stores a copy of the value generated by AppPath. This way AppPath only needs to generate it once.</summary>
        </member>
        <member name="P:RT.Util.PathUtil.AppPath">
            <summary>
                Returns the full path to the directory containing the application's entry assembly. Will succeed for the main
                AppDomain of an application started as an .exe; will throw for anything that doesn't have an entry assembly,
                such as a manually created AppDomain.</summary>
            <seealso cref="M:RT.Util.PathUtil.AppPathCombine(System.String[])"/>
        </member>
        <member name="M:RT.Util.PathUtil.AppPathCombine(System.String)">
            <summary>
                Combines the full path containing the running executable with the specified string. Ensures that only a single
                <see cref="F:System.IO.Path.DirectorySeparatorChar"/> separates the two.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.AppPathCombine(System.String[])">
            <summary>
                Combines the full path containing the running executable with one or more strings. Ensures that only a single
                <see cref="F:System.IO.Path.DirectorySeparatorChar"/> separates the executable path and every string.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.OverrideAppPath(System.String)">
            <summary>Makes all AppPath* functions of PathUtil use the specified value as the application path.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.NormPath(System.String)">
            <summary>
                Normalises the specified path. A "normalised path" is a path to a directory (not a file!) which always ends
                with a slash.</summary>
            <param name="path">
                Path to be normalised.</param>
            <returns>
                Normalised version of <paramref name="path"/>, or null if the input was null.</returns>
        </member>
        <member name="M:RT.Util.PathUtil.IsSubpathOf(System.String,System.String)">
            <summary>Checks whether <paramref name="subpath"/> refers to a subdirectory inside <paramref name="parentPath"/>.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.IsSubpathOfOrSame(System.String,System.String)">
            <summary>
                Checks whether <paramref name="subpath"/> refers to a subdirectory inside <paramref name="parentPath"/> or the
                same directory.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.ExpandPath(System.String)">
            <summary>
                Expands all occurrences of "$(NAME)" in the specified string with the special folder path for the current
                machine/user. See remarks for details.</summary>
            <remarks>
                <para>
                    Expands all occurrences of "$(NAME)", where NAME is the name of one of the values of the <see
                    cref="T:System.Environment.SpecialFolder"/> enum. There is no support for escaping such a replacement, and invalid
                    names are ignored.</para>
                <para>
                    The following additional names are also recognised:</para>
                <list type="table">
                    <item><term>
                        $(Temp)</term>
                    <description>
                        expands to the system's temporary folder path (Path.GetTempPath()).</description></item>
                    <item><term>
                        $(AppPath)</term>
                    <description>
                        expands to the directory containing the entry assembly (Assembly.GetEntryAssembly()). Throws an <see
                        cref="T:System.InvalidOperationException"/> if there is no entry assembly (e.g. in a secondary app domain).</description></item></list></remarks>
        </member>
        <member name="M:RT.Util.PathUtil.UnexpandPath(System.String)">
            <summary>
                Checks to see whether the specified path starts with any of the standard paths supported by <see
                cref="M:RT.Util.PathUtil.ExpandPath(System.String)"/>, and if so, replaces the prefix with a "$(NAME)" string and returns the resulting value.
                The value passed in should be an absolute path for the substitution to work.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.DeleteEmptyDirs(System.String)">
            <summary>
                Deletes the specified directory only if it is empty, and then checks all parents to see if they have become
                empty too. If so, deletes them too. Does not throw any exceptions.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.ExtractParent(System.String)">
            <summary>
                Returns the "parent" path of the specified path by removing the last name from the path, separated by either
                forward or backslash. If the original path ends in slash, the returned path will also end with a slash.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.ExtractParent(System.String,System.Char)">
            <summary>
                Returns the "parent" path of the specified path by removing the last group from the path, separated by the
                "separator" character. If the original path ends in slash, the returned path will also end with a slash.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.ExtractNameAndExt(System.String)">
            <summary>
                Returns the name and extension of the last group in the specified path, separated by either of the two
                slashes.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.Combine(System.String,System.String)">
            <summary>
                Joins the two paths using the OS separator character. If the second path is absolute, only the second path is
                returned.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.Combine(System.String,System.String,System.String[])">
            <summary>
                Joins multiple paths using the OS separator character. If any of the paths is absolute, all preceding paths
                are discarded.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.CreatePathToFile(System.String)">
            <summary>
                Creates all directories in the path to the specified file if they don't exist. Accepts filenames relative to
                the current directory.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.StripTrailingSeparator(System.String)">
            <summary>
                Strips a single trailing directory separator, whether it's the forward- or backslash. Preserves the single
                separator at the end of paths referring to the root of a drive, such as "C:\". Removes at most a single
                separator, never more.</summary>
        </member>
        <member name="M:RT.Util.PathUtil.ToggleRelative(System.String,System.String)">
            <summary>
                Changes a relative <paramref name="toggledPath"/> to an absolute and vice versa, with respect to <paramref
                name="basePath"/>. Neither path must be an empty string. Any trailing slashes are ignored and the result won't
                have one except for root "C:\"-style paths. Forward slashes, multiple repeated slashes, and any redundant "."
                or ".." elements are correctly interpreted and eliminated. See Remarks for some special cases.</summary>
            <remarks>
                Relative paths that specify a drive letter "C:thing" are not supported and result in undefined behaviour. If
                the toggled path is relative then all ".." levels that expand beyond the root directory are silently
                discarded.</remarks>
            <param name="basePath">
                An absolute path to the directory which serves as the base for absolute/relative conversion.</param>
            <param name="toggledPath">
                An absolute or a relative path to be converted.</param>
            <returns>
                The converted path.</returns>
            <exception cref="T:RT.Util.ToggleRelativeException">
                Conversion could not be performed for the reason specified in the exception object.</exception>
        </member>
        <member name="M:RT.Util.PathUtil.AppendBeforeExtension(System.String,System.String)">
            <summary>
                Appends the specified value to the filename part before extension.</summary>
            <param name="filename">
                Filename to which the value should be appended.</param>
            <param name="value">
                The value to append.</param>
        </member>
        <member name="M:RT.Util.PathUtil.ExpandWildcards(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Given a filename or a pattern containing * or ? wildcards, enumerates all names matching the wildcard.</summary>
            <param name="filenameOrPattern">
                The filename or pattern to expand. If this doesn't contain any wildcards, it is returned unchanged, even if
                the named file/directory does not exist in the file system. The pattern may include an absolute or a relative
                path, or contain just a name; the results will be relative iff the pattern was relative, and will contain no
                path iff the pattern didn't.</param>
            <param name="matchFiles">
                Specifies that the pattern should match existing files.</param>
            <param name="matchDirectories">
                Specifies that the pattern should match existing directories.</param>
            <param name="includeSubdirectories">
                Indicates that files contained in subdirectories should be included.</param>
        </member>
        <member name="M:RT.Util.PathUtil.GetFullPath(System.String)">
            <summary>
                Returns the full path pointing to the same file/directory as <paramref name="path"/>. Converts relative paths
                to absolute paths where necessary, relative to the current working directory. This is the same as <see
                cref="M:System.IO.Path.GetFullPath(System.String)"/>, except that this function returns the actual on-disk capitalization for each
                segment, regardless of how they are capitalized in <paramref name="path"/>. If the path does not exist in
                full, corrects the capitalization of the segments that do exist. Always capitalizes the drive letter.</summary>
        </member>
        <member name="T:RT.Util.ToggleRelativeProblem">
            <summary>Details a problem that occurred while using <see cref="M:RT.Util.PathUtil.ToggleRelative(System.String,System.String)"/>.</summary>
        </member>
        <member name="F:RT.Util.ToggleRelativeProblem.BasePathNotAbsolute">
            <summary>The base path is not an absolute path.</summary>
        </member>
        <member name="F:RT.Util.ToggleRelativeProblem.PathsOnDifferentDrives">
            <summary>
                The two paths are both absolute and on different drives, making it impossible to make one of them relative to
                the other.</summary>
        </member>
        <member name="F:RT.Util.ToggleRelativeProblem.InvalidBasePath">
            <summary>The base path is not a valid path and/or contains invalid characters.</summary>
        </member>
        <member name="F:RT.Util.ToggleRelativeProblem.InvalidToggledPath">
            <summary>The toggled path is not a valid path and/or contains invalid characters.</summary>
        </member>
        <member name="T:RT.Util.ToggleRelativeException">
            <summary>Indicates an error that occurred while using <see cref="M:RT.Util.PathUtil.ToggleRelative(System.String,System.String)"/>.</summary>
        </member>
        <member name="P:RT.Util.ToggleRelativeException.Problem">
            <summary>Details the problem that occurred.</summary>
        </member>
        <member name="M:RT.Util.ToggleRelativeException.#ctor(RT.Util.ToggleRelativeProblem)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.Util.Rnd">
            <summary>This class offers static functions which generate random numbers in a thread-safe manner.</summary>
        </member>
        <member name="M:RT.Util.Rnd.Reset(System.Int32)">
            <summary>Resets the random number generator using the specified <paramref name="seed"/>.</summary>
        </member>
        <member name="M:RT.Util.Rnd.NextDouble">
            <summary>Returns a random double between 0.0 and 1.0.</summary>
        </member>
        <member name="M:RT.Util.Rnd.NextDouble(System.Double,System.Double)">
            <summary>
                Returns a random double between <paramref name="min"/> and <paramref name="max"/>. It is unclear whether
                <paramref name="min"/> or <paramref name="max"/> can ever be returned.</summary>
        </member>
        <member name="M:RT.Util.Rnd.Next">
            <summary>Returns a random non-negative integer.</summary>
        </member>
        <member name="M:RT.Util.Rnd.Next(System.Int32)">
            <summary>Returns a non-negative random number less than <paramref name="max"/>.</summary>
        </member>
        <member name="M:RT.Util.Rnd.Next(System.Int32,System.Int32)">
            <summary>
                Returns a random integer between <paramref name="min"/> (inclusive) and <paramref name="max"/> (exclusive).</summary>
        </member>
        <member name="M:RT.Util.Rnd.NextBoolean">
            <summary>Returns a random boolean.</summary>
        </member>
        <member name="M:RT.Util.Rnd.NextBytes(System.Byte[])">
            <summary>Fills the specified buffer with random bytes.</summary>
        </member>
        <member name="M:RT.Util.Rnd.NextBytes(System.Int32)">
            <summary>Returns a new array with the specified number of elements, filled with random bytes.</summary>
        </member>
        <member name="M:RT.Util.Rnd.NextLong">
            <summary>Returns a random non-negative 64-bit integer.</summary>
        </member>
        <member name="M:RT.Util.Rnd.GenerateString(System.Int32,System.String,System.Random)">
            <summary>
                Generates a random string of the specified length, taking characters from the specified arsenal of characters.</summary>
            <param name="length">
                Length of the string to generate.</param>
            <param name="takeCharactersFrom">
                Arsenal to take random characters from. (Default is upper- and lower-case letters and digits.)</param>
            <param name="rnd">
                If not <c>null</c>, uses the specified random number generator.</param>
        </member>
        <member name="T:RT.Util.RndCrypto">
            <summary>
                This class offers static functions which generate cryptographically-strong random numbers in a thread-safe manner.</summary>
        </member>
        <member name="F:RT.Util.RndCrypto._rnd">
            <summary>This class is documented to be completely thread-safe, so no locking is required.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.NextBytes(System.Byte[])">
            <summary>Fills the specified buffer with cryptographically-strong random bytes.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.NextBytes(System.Int32)">
            <summary>
                Returns a new array with the specified number of elements, filled with cryptographically-strong random bytes.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.Next">
            <summary>Returns a random non-negative integer.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.Next(System.Int32)">
            <summary>Returns a non-negative random number less than <paramref name="max"/>.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.Next(System.Int32,System.Int32)">
            <summary>
                Returns a random integer between <paramref name="min"/> (inclusive) and <paramref name="max"/> (exclusive).</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.NextLong">
            <summary>Returns a random non-negative 64-bit integer.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.NextDouble">
            <summary>Returns a random double between 0.0 and 1.0.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.NextDouble(System.Double,System.Double)">
            <summary>
                Returns a random double between <paramref name="min"/> and <paramref name="max"/>. It is unclear whether
                <paramref name="min"/> or <paramref name="max"/> can ever be returned.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.NextBoolean">
            <summary>Returns a random boolean.</summary>
        </member>
        <member name="M:RT.Util.RndCrypto.GenerateString(System.Int32,System.String)">
            <summary>
                Generates a random string of the specified length, taking characters from the specified arsenal of characters.</summary>
            <param name="length">
                Length of the string to generate.</param>
            <param name="takeCharactersFrom">
                Arsenal to take random characters from. (Default is upper- and lower-case letters and digits.)</param>
        </member>
        <member name="T:RT.Util.RhoML">
            <summary>
                Exposes methods related to the RhoML language. See Remarks.</summary>
            <remarks>
                <para>
                    RhoML is a language which parses into a tree somewhat reminiscent of XML. The document is represented by a
                    root <see cref="T:RT.Util.RhoElement"/>, and consists of a tree of <see cref="T:RT.Util.RhoNode"/>s. Two types of nodes exist:
                    elements, which have a name and may have attributes, and text nodes, which simply contain raw text. Only
                    elements may contain sub-nodes.</para>
                <para>
                    Except for the root element, all elements must have a name, which can be an arbitrary string. The root
                    element's name is null. An element may have a default attribute value, as well as any number of additional
                    named attribute/value pairs. The attribute names and values can also be arbitrary strings. A named attribute
                    is not required to have a value.</para>
                <para>
                    Syntactically, an element is delimited by an opening and a closing tag. The closing tag is always <c>{}</c>
                    for all elements. The opening tag begins with a <c>{</c>, followed by the element name, the default attribute
                    value (<c>=</c> followed by the value), any number of named attributes (name, <c>=</c>, value, delimited by
                    <c>,</c>), and ends with a <c>}</c>.</para>
                <para>
                    The following is an example of valid RhoML with an explanation of what is represented:</para>
                <code>
                    Basic {font=Times New Roman}example{}: element named "font" with the default attribute set.
                     Another {blah,foo=bar,stuff}example{}: element named "blah", no default attribute, two named attributes
                     ("foo" and "stuff"), the first of which has the value "bar" while the second one has no value. Other than the
                     two elements, the rest of this RhoML is literal text.</code>
                <para>
                    The element name and attribute names/values can all be specified using either quoted or unquoted syntax.
                    Unquoted syntax is limited in what strings can be expressed, while quoted syntax allows every possible string
                    to be represented:</para>
                <list type="bullet">
                    <item><description>
                        Unquoted values always terminate at <c>{</c>, <c>}</c>, <c>=</c>, <c>,</c>, <c>`</c>, newlines and tabs,
                        and these cannot be escaped. All other characters are allowed and are interpreted literally. Spaces are
                        allowed but leading and trailing spaces will be ignored.</description></item>
                    <item><description>
                        Quoted values begin and end with a <c>`</c>. Actual backticks can be represented by <c>``</c>. All other
                        characters are interpreted literally inside a quoted value, and there are no special escape sequences for
                        newlines or other non-printing characters.</description></item></list>
                <para>
                    Whitespace is significant in all contexts, with some exceptions inside the opening tag of an element.
                    Specifically, whitespace is ignored inside the opening tag between all syntactic elements (but not inside
                    names/values), with the sole exception of immediately after <c>{</c>: this character must be followed by a
                    <c>`</c> (beginning the element name in quoted syntax) or a Unicode letter or digit (beginning the tag name in
                    unquoted syntax). Otherwise the <c>{</c> character is interpreted as a literal opening curly bracket.</para>
                <para>
                    Within a run of text, only the <c>{</c> character needs special attention; all other characters are
                    interpreted literally. The <c>{</c> character is also interpreted literally unless followed by a <c>{</c> (in
                    which case the two are interpreted as a single literal curly bracket), <c>}</c> (interpreted as the closing
                    tag), or a <c>`</c>/letter/digit (interpreted as the start of an opening tag).</para>
                <para>
                    A more complex example (the entire example is valid RhoML):</para>
                <code>
                    This curly bracket { is interpreted literally, as is this } one. This {{ is a single open curly.
                    Here {` is ``{ `}an element{} whose name is " is `{ ", containing a text node with the text "an element".
                    Here's an element with some generous {use = of spaces ,   you   =   see}.{}; this represents an element named
                    "use", with a default attribute value "of spaces", and an attribute named "you" with a value "see".</code></remarks>
        </member>
        <member name="M:RT.Util.RhoML.Parse(System.String)">
            <summary>
                Parses the specified string as RhoML.</summary>
            <param name="input">
                The string to parse.</param>
            <returns>
                The root element of the parse tree. The root element has a null name, and contains the RhoML content as child
                nodes, even if the parsed content has a single top-level node.</returns>
        </member>
        <member name="M:RT.Util.RhoML.Escape(System.String)">
            <summary>
                Escapes the specified string so that when parsed as RhoML, the result is a single text node containing the
                string passed in.</summary>
        </member>
        <member name="T:RT.Util.RhoNode">
            <summary>Encapsulates one of the two possible types of RhoML nodes.</summary>
        </member>
        <member name="M:RT.Util.RhoNode.AppendTo(System.Text.StringBuilder)">
            <summary>
                Appends this node and all children to the specified string builder, converting them to RhoML format that would
                parse back into this tree.</summary>
        </member>
        <member name="M:RT.Util.RhoNode.ToString">
            <summary>Converts this node to a RhoML string.</summary>
        </member>
        <member name="T:RT.Util.RhoText">
            <summary>Encapsulates a text node in a RhoML tree.</summary>
        </member>
        <member name="P:RT.Util.RhoText.Text">
            <summary>Gets or sets the text string represented by this instance. Not null.</summary>
        </member>
        <member name="M:RT.Util.RhoText.#ctor(System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.RhoText.AppendTo(System.Text.StringBuilder)">
            <summary>
                Appends this node and all children to the specified string builder, converting them to RhoML format that would
                parse back into this tree.</summary>
        </member>
        <member name="T:RT.Util.RhoElement">
            <summary>Encapsulates an element node in a RhoML tree.</summary>
        </member>
        <member name="P:RT.Util.RhoElement.Name">
            <summary>Gets or sets the name of the element. Null for the root element, otherwise non-null.</summary>
        </member>
        <member name="P:RT.Util.RhoElement.Value">
            <summary>Gets or sets the value of the default attribute. Null if the default attribute was omitted.</summary>
        </member>
        <member name="P:RT.Util.RhoElement.Attributes">
            <summary>
                Gets or sets a dictionary of attributes. Not null. There is a key for each named attribute specified on the
                element. Attributes whose value was omitted will have the value of null in this dictionary.</summary>
        </member>
        <member name="P:RT.Util.RhoElement.Children">
            <summary>
                Gets or sets a read-only list of child elements. Not null. May be empty, or contain any <see cref="T:RT.Util.RhoNode"/>
                instance in any order.</summary>
        </member>
        <member name="M:RT.Util.RhoElement.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.RhoElement.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Util.RhoElement.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{RT.Util.RhoNode})">
            <summary>Constructor.</summary>
        </member>
        <member name="P:RT.Util.RhoElement.Descendants">
            <summary>Enumerates all descendants of this node, in an unspecified order.</summary>
        </member>
        <member name="M:RT.Util.RhoElement.AppendTo(System.Text.StringBuilder)">
            <summary>
                Appends this node and all children to the specified string builder, converting them to RhoML format that would
                parse back into this tree.</summary>
        </member>
        <member name="T:RT.Util.RhoParseException">
            <summary>Represents a RhoML parsing exception.</summary>
        </member>
        <member name="P:RT.Util.RhoParseException.Line">
            <summary>Gets the line number at which the parse error occurred.</summary>
        </member>
        <member name="P:RT.Util.RhoParseException.Column">
            <summary>Gets the column number at which the parse error occurred.</summary>
        </member>
        <member name="P:RT.Util.RhoParseException.Snippet">
            <summary>A snippet of the JSON string at which the parse error occurred.</summary>
        </member>
        <member name="T:RT.Util.RummageNoRemoveAttribute">
            <summary>Instructs Rummage to keep a specific type, method, constructor or field.</summary>
        </member>
        <member name="T:RT.Util.RummageNoRenameAttribute">
            <summary>Instructs Rummage to keep the original name of a specific element.</summary>
        </member>
        <member name="T:RT.Util.RummageNoRenameAnythingAttribute">
            <summary>
                Instructs Rummage to keep the original name of a specific type, all of its members, and all the members in all of
                its nested types.</summary>
        </member>
        <member name="T:RT.Util.RummageNoUnnestAttribute">
            <summary>Instructs rummage to avoid un-nesting the specified type.</summary>
        </member>
        <member name="T:RT.Util.RummageNoMarkPublicAttribute">
            <summary>Instructs rummage to keep the original access modifier of a specific element.</summary>
        </member>
        <member name="T:RT.Util.RummageNoInlineAttribute">
            <summary>
                Instructs Rummage not to inline a specific method or property that would otherwise be automatically inlined. This
                attribute takes precedence over <see cref="T:RT.Util.RummageInlineAttribute"/> if both are specified on the same method or
                property.</summary>
        </member>
        <member name="T:RT.Util.RummageInlineAttribute">
            <summary>Instructs Rummage to inline a specific method or property that would otherwise not be automatically inlined.</summary>
        </member>
        <member name="T:RT.Util.RummageKeepReflectionSafeAttribute">
            <summary>Instructs Rummage to refrain from making any changes to a specific type.</summary>
        </member>
        <member name="T:RT.Util.RummageKeepArgumentsReflectionSafeAttribute">
            <summary>Instructs Rummage to keep all the types reflection-safe which are passed in for the given generic parameter.</summary>
        </member>
        <member name="T:RT.Util.RummageKeepUsersReflectionSafeAttribute">
            <summary>
                Use only on custom-attribute class declarations. Instructs Rummage to keep everything reflection-safe that uses
                the given custom attribute.</summary>
        </member>
        <member name="T:RT.Util.RummageAssumeTypeSafeAttribute">
            <summary>
                Use on a method or constructor parameter of type "Type". Instructs Rummage that this method uses the Type passed
                in in a way that is fully compatible with all obfuscations, including removing members not directly referenced,
                renaming members, unnesting types and so on.</summary>
        </member>
        <member name="T:RT.Util.RummageNoMarkDerivedTypesReflectionSafeAttribute">
            <summary>
                Instructs Rummage not to mark derived types as reflection-safe if it determines that this type needs to be kept
                reflection-safe.</summary>
        </member>
        <member name="T:RT.Util.RummageNoInferReflectionSafeFromBaseAttribute">
            <summary>
                Instructs Rummage not to mark this type as reflection-safe if it determines that the base type needs to be kept
                reflection-safe.</summary>
        </member>
        <member name="T:RT.Util.Rummage">
            <summary>Contains methods used to augment the program with Rummage-related information.</summary>
        </member>
        <member name="M:RT.Util.Rummage.Safe(System.Type)">
            <summary>
                Returns the type passed in. Use around a <c>typeof(SomeType)</c> to override Rummage's reflection safety
                analysis and make Rummage believe that this particular use is entirely safe.</summary>
        </member>
        <member name="T:RT.Util.SoundPlayerAsync">
            <summary>The way SoundPlayer was meant to be, but someone screwed it up. This is the official MS workaround.</summary>
        </member>
        <member name="P:RT.Util.SoundPlayerAsync.BytesToPlay">
            <summary>Gets or sets the bytes representing the wave data to be played.</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.#ctor(System.IO.Stream)">
            <summary>Creates a new player using the specified stream as the source of wave data to play.</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.#ctor">
            <summary>Creates a new player.</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.LoadStream(System.IO.Stream)">
            <summary>Loads the wave data to play from the specified stream. The stream can be closed immediately afterwards.</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.Play">
            <summary>Plays the loaded file once, asynchronously.</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.PlayLoop">
            <summary>Plays the loaded file forever in a loop, asynchronously. This class provides no methods for stopping this.</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.Dispose">
            <summary>Disposes of the class</summary>
        </member>
        <member name="M:RT.Util.SoundPlayerAsync.Finalize">
            <summary>Destroys the class</summary>
        </member>
        <member name="T:RT.Util.StopwatchElement">
            <summary>
            Encapsulates a single entry in a <see cref="T:RT.Util.Stopwatch"/> log.
            </summary>
        </member>
        <member name="F:RT.Util.StopwatchElement.Milliseconds">
            <summary>Number of milliseconds between the start of the stopwatch and this event.</summary>
        </member>
        <member name="F:RT.Util.StopwatchElement.Event">
            <summary>Text describing the event.</summary>
        </member>
        <member name="T:RT.Util.Stopwatch">
            <summary>
            Abstract base class to encapsulate a stopwatch - an object that remembers events as they happen
            and when they happen and outputs a report with timing information at the end.
            </summary>
        </member>
        <member name="P:RT.Util.Stopwatch.GlobalStopwatch">
            <summary>Provides access to a global instance of <see cref="T:RT.Util.StopwatchReal"/>.</summary>
        </member>
        <member name="M:RT.Util.Stopwatch.Log(System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="msg">Message to log.</param>
        </member>
        <member name="M:RT.Util.Stopwatch.SaveToFile(System.String)">
            <summary>
            Outputs the stopwatch report with timing information to the specified file.
            </summary>
            <param name="filePath">File to save stopwatch output to. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="T:RT.Util.StopwatchReal">
            <summary>
            Concrete implementation of <see cref="T:RT.Util.Stopwatch"/>. This class provides an object that remembers events
            as they happen and when they happen and outputs a report with timing information at the end.
            </summary>
        </member>
        <member name="F:RT.Util.StopwatchReal.StartTime">
            <summary>
            Remembers when the stopwatch was started.
            </summary>
        </member>
        <member name="F:RT.Util.StopwatchReal.Elements">
            <summary>
            Remembers the events as they happen.
            </summary>
        </member>
        <member name="M:RT.Util.StopwatchReal.Log(System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="msg">Message to log.</param>
        </member>
        <member name="M:RT.Util.StopwatchReal.ToString">
            <summary>
            Generates a report with timing information detailling when each logged event happened relative to the <see cref="F:RT.Util.StopwatchReal.StartTime"/>.
            </summary>
            <returns>A report with timing information detailling when each logged event happened relative to the <see cref="F:RT.Util.StopwatchReal.StartTime"/>.</returns>
        </member>
        <member name="M:RT.Util.StopwatchReal.SaveToFile(System.String)">
            <summary>
            Outputs the stopwatch report with timing information to the specified file.
            </summary>
            <param name="filePath">File to save stopwatch output to. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="T:RT.Util.StopwatchConsole">
            <summary>
            Implementation of <see cref="T:RT.Util.Stopwatch"/> that logs messages to the console.
            </summary>
        </member>
        <member name="M:RT.Util.StopwatchConsole.Log(System.String)">
            <summary>Logs the message to the console.</summary>
        </member>
        <member name="M:RT.Util.StopwatchConsole.SaveToFile(System.String)">
            <summary>Doesn't do anything.</summary>
        </member>
        <member name="T:RT.Util.StopwatchDummy">
            <summary>
            Implementation of <see cref="T:RT.Util.Stopwatch"/> that doesn't do anything.
            </summary>
        </member>
        <member name="M:RT.Util.StopwatchDummy.Log(System.String)">
            <summary>
            Doesn't do anything.
            </summary>
            <param name="msg">Is ignored.</param>
        </member>
        <member name="M:RT.Util.StopwatchDummy.ToString">
            <summary>
            Returns an empty string.
            </summary>
            <returns>An empty string.</returns>
        </member>
        <member name="M:RT.Util.StopwatchDummy.SaveToFile(System.String)">
            <summary>
            Doesn't do anything.
            </summary>
            <param name="filePath">Is ignored.</param>
        </member>
        <member name="T:RT.Util.Streams.BinaryStream">
            <summary>Reads/writes various data types as binary values in a specific encoding.</summary>
            <remarks><para>This class does not use any buffering of its own.</para>
            <para>It is permissible to seek, read from, and write to the underlying stream.</para></remarks>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.#ctor(System.IO.Stream)">
            <summary>Constructs a <see cref="T:RT.Util.Streams.BinaryStream"/> instance.</summary>
            <param name="underlyingStream">Provides an underlying stream from which to read and to which to write.</param>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the stream and optionally releases the managed resources.</summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.reader">
            <summary>Gets an instance of <see cref="T:System.IO.BinaryReader"/> for the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.writer">
            <summary>Gets an instance of <see cref="T:System.IO.BinaryWriter"/> for the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.CanRead">
            <summary>Gets a value indicating whether the underlying stream supports reading.</summary>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.CanSeek">
            <summary>Gets a value indicating whether the underlying stream supports seeking.</summary>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.CanWrite">
            <summary>Gets a value indicating whether the underlying stream supports writing.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.Flush">
            <summary>Flushes the underlying stream. Note that <see cref="T:RT.Util.Streams.BinaryStream"/> does not use any buffering of its own that requires flushing.</summary>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.Length">
            <summary>Gets the length in bytes of the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.BinaryStream.Position">
            <summary>Gets or sets the position within the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the underlying stream.</summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value indicating the reference point used.</param>
            <returns>The new position within the underlying stream.</returns>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.SetLength(System.Int64)">
            <summary>Sets the length of the underlying stream.</summary>
            <param name="value">The desired length of the underlying stream in bytes.</param>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a sequence of bytes from the underlying stream and advances the position
            within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced
            by the bytes read from the underlying source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read
            from the underlying stream.</param>
            <param name="count">The maximum number of bytes to be read from the underlying stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the current position within
            this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buffer"/> to the underlying stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the
            underlying stream.</param>
            <param name="count">The number of bytes to be written to the underlying stream.</param>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadBytes(System.Int32)">
            <summary>Reads the specified number of bytes from the stream.</summary>
            <param name="count">Number of bytes to read from the stream.</param>
            <returns>A byte array containing exactly the number of bytes requested.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream was reached before the requested number of bytes could be read.</exception>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteBytes(System.Byte[])">
            <summary>Writes the specified byte array into the stream.</summary>
            <param name="data">Data to write to the stream.</param>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadBool">
            <summary>Reads a boolean value from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteBool(System.Boolean)">
            <summary>Writes a boolean value to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadByte">
            <summary>Reads a byte from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteByte(System.Byte)">
            <summary>Writes a byte to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadSByte">
            <summary>Reads a signed byte from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteSByte(System.SByte)">
            <summary>Writes a signed byte to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadShort">
            <summary>Reads a 16-bit signed integer from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteShort(System.Int16)">
            <summary>Writes a 16-bit signed integer to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadUShort">
            <summary>Reads a 16-bit unsigned integer from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteUShort(System.UInt16)">
            <summary>Writes a 16-bit unsigned integer to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadInt">
            <summary>Reads a 32-bit signed integer from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteInt(System.Int32)">
            <summary>Writes a 32-bit signed integer to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadUInt">
            <summary>Reads a 32-bit unsigned integer from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteUInt(System.UInt32)">
            <summary>Writes a 32-bit unsigned integer to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadLong">
            <summary>Reads a 64-bit signed integer from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteLong(System.Int64)">
            <summary>Writes a 64-bit signed integer to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadULong">
            <summary>Reads a 64-bit unsigned integer from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteULong(System.UInt64)">
            <summary>Writes a 64-bit unsigned integer to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadFloat">
            <summary>Reads a single-precision floating-point number from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteFloat(System.Single)">
            <summary>Writes a single-precision floating-point number to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadDouble">
            <summary>Reads a double-precision floating-point number from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteDouble(System.Double)">
            <summary>Writes a double-precision floating-point number to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadDecimal">
            <summary>Reads a decimal number from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteDecimal(System.Decimal)">
            <summary>Writes a decimal number to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadVarInt">
            <summary>Reads a 32-bit signed integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.ReadInt32Optim(System.IO.Stream)"/>) from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteVarInt(System.Int32)">
            <summary>Writes a 32-bit signed integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt32Optim(System.IO.Stream,System.Int32)"/>) to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadVarUInt">
            <summary>Reads a 32-bit unsigned integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.ReadUInt32Optim(System.IO.Stream)"/>) from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteVarUInt(System.UInt32)">
            <summary>Writes a 32-bit unsigned integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt32Optim(System.IO.Stream,System.UInt32)"/>) to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadVarLong">
            <summary>Reads a 64-bit signed integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.ReadInt64Optim(System.IO.Stream)"/>) from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteVarLong(System.Int64)">
            <summary>Writes a 64-bit signed integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteInt64Optim(System.IO.Stream,System.Int64)"/>) to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadVarULong">
            <summary>Reads a 64-bit unsigned integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.ReadUInt64Optim(System.IO.Stream)"/>) from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteVarULong(System.UInt64)">
            <summary>Writes a 64-bit unsigned integer using optim encoding (see <see cref="M:RT.Util.ExtensionMethods.StreamExtensions.WriteUInt64Optim(System.IO.Stream,System.UInt64)"/>) to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadChar">
            <summary>Reads a character from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteChar(System.Char)">
            <summary>Writes a character to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadString">
            <summary>Reads a string from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteString(System.String)">
            <summary>Writes a string to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadDateTime">
            <summary>Reads a DateTime from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteDateTime(System.DateTime)">
            <summary>Writes a DateTime to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadTimeSpan">
            <summary>Reads a TimeSpan from the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteTimeSpan(System.TimeSpan)">
            <summary>Writes a TimeSpan to the stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.WriteMemoryStream(System.IO.MemoryStream)">
            <summary>Writes the data contained in the specified <see cref="T:System.IO.MemoryStream"/> to the stream as a length-prefixed block of bytes.</summary>
        </member>
        <member name="M:RT.Util.Streams.BinaryStream.ReadMemoryStream">
            <summary>Reads a length-prefixed block of bytes from the stream (for example, one produced by <see cref="M:RT.Util.Streams.BinaryStream.WriteMemoryStream(System.IO.MemoryStream)"/>).</summary>
        </member>
        <member name="T:RT.Util.Streams.ConsoleLoggingStream">
            <summary>
            Implements a stream that passes through all operations to the underlying stream, but also prints
            the bytes read or written to the console.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.ConsoleLoggingStream.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="underlyingStream">The underlying stream on which all operations are to be performed.</param>
            <param name="readPrefix">If not null, all calls to <see cref="M:RT.Util.Streams.ConsoleLoggingStream.Read(System.Byte[],System.Int32,System.Int32)"/> will print a single line to the console starting with this prefix and showing a hex dump of the bytes read.</param>
            <param name="writePrefix">If not null, all calls to <see cref="M:RT.Util.Streams.ConsoleLoggingStream.Read(System.Byte[],System.Int32,System.Int32)"/> will print a single line to the console starting with this prefix and showing a hex dump of the bytes written.</param>
        </member>
        <member name="T:RT.Util.Streams.CRC32Stream">
            <summary>
            Calculates CRC32 checksum of all values that are read/written via this stream.
            Seeking is ignored. All the bytes seeked over will be ignored.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.CRC32Stream.BaseStream">
            <summary>
            The underlying stream to/from which writing/reading is performed.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.CRC32Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a chunk of bytes from the underlying stream. Updates the CRC with the
            data read.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.CRC32Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a chunk of bytes to the underlying stream. Updates the CRC with the
            data written.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.CRC32Stream.CRC">
            <summary>
            Gets the current value of the CRC32 for all the bytes that passed through this stream.
            </summary>
        </member>
        <member name="T:RT.Util.Streams.DoNotCloseStream">
            <summary>
                Passes through every operation to the underlying stream. When disposed, leaves the
                underlying stream alone instead of closing it. Intended for use with certain streams
                which do not have the "do not close the underlying stream" option built-in, such
                as the CryptoStream for example.</summary>
        </member>
        <member name="M:RT.Util.Streams.DoNotCloseStream.#ctor(System.IO.Stream)">
            <summary>
                Constructor.</summary>
        </member>
        <member name="P:RT.Util.Streams.DoNotCloseStream.CanWrite">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.DoNotCloseStream.CanRead">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.DoNotCloseStream.CanSeek">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.DoNotCloseStream.Flush">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.DoNotCloseStream.Length">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.DoNotCloseStream.SetLength(System.Int64)">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.DoNotCloseStream.Position">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.DoNotCloseStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.DoNotCloseStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.DoNotCloseStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Passes through this operation to the underlying stream.</summary>
        </member>
        <member name="T:RT.Util.Streams.DynamicContentStream">
            <summary>
            Provides a read-only stream that can “read from” an <c>IEnumerable&lt;string&gt;</c> or <c>IEnumerable&lt;byte[]&gt;</c>.
            In particular, an intended application is to “read from” a method that uses <c>yield return</c> to return strings or data as execution proceeds.
            This enables generation of, for example, HTML for dynamic web pages.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.DynamicContentStream.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Instantiates a <see cref="T:RT.Util.Streams.DynamicContentStream"/> that reads strings (which are converted to UTF-8)
            and lets you configure whether it’s buffered or not.</summary>
            <param name="enumerable">The object that provides the content for this stream to read from.</param>
            <param name="buffered">Provides an initial value for the <see cref="P:RT.Util.Streams.DynamicContentStream.Buffered"/> property.</param>
        </member>
        <member name="M:RT.Util.Streams.DynamicContentStream.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]},System.Boolean)">
            <summary>Instantiates a <see cref="T:RT.Util.Streams.DynamicContentStream"/> that reads raw bytes
            and lets you configure whether it’s buffered or not.</summary>
            <param name="enumerable">The object that provides the content for this stream to read from.</param>
            <param name="buffered">Provides an initial value for the <see cref="P:RT.Util.Streams.DynamicContentStream.Buffered"/> property.</param>
        </member>
        <member name="M:RT.Util.Streams.DynamicContentStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by this stream and optionally releases the managed resources.</summary>
        </member>
        <member name="P:RT.Util.Streams.DynamicContentStream.Buffered">
            <summary>
            If true, each call to <see cref="M:RT.Util.Streams.DynamicContentStream.Read(System.Byte[],System.Int32,System.Int32)"/> will move the enumerator forward as far as necessary to fill the buffer.
            If false, each call to <see cref="M:RT.Util.Streams.DynamicContentStream.Read(System.Byte[],System.Int32,System.Int32)"/> returns only the text produced by a single MoveNext() of the enumerator.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.DynamicContentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads some text or data into the specified buffer. The behaviour depends on the <see cref="P:RT.Util.Streams.DynamicContentStream.Buffered"/> property.
            The bytes returned respresent the text or data returned by the underlying enumerator. In the case of UTF-8-encoded
            text, DynamicContentStream may potentially return incomplete multi-byte sequences; however, all output will be
            valid UTF-8 when concatenated.
            </summary>
            <param name="buffer">The buffer to copy the data into.</param>
            <param name="offset">The offset at which to start copying into buffer.</param>
            <param name="count">The maximum number of bytes to copy. The stream may return less than this.</param>
            <returns>The number of bytes actually copied into the buffer.</returns>
        </member>
        <member name="T:RT.Util.Streams.HashingStream">
            <summary>
            Calculates MD5 checksum of all values that are read/written via this stream.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.HashingStream.BaseStream">
            <summary>
            This is the underlying stream. All reads/writes and most other operations
            on this class are performed on this underlying stream.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.HashingStream.#ctor(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initialises a hash calculation stream, with the specified stream as the underlying stream.
            </summary>
            <param name="stream">The underlying stream.</param>
            <param name="hasher">The hash algorithm to use. For example, <c>System.Security.Cryptography.MD5.Create("MD5")</c>.</param>
        </member>
        <member name="M:RT.Util.Streams.HashingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is ignored (but propagated to the underlying stream).
            All the bytes seeked over will be ignored.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.HashingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the underlying stream. Updates the hash with the bytes read.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.HashingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the underlying stream. Updates the hash with the bytes written.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.HashingStream.Hash">
            <summary>
            Retrieves the hash of all data that has been read/written through this
            stream so far. Due to the implementation of the underlying hash algorithm this
            must be called only after all data has been hashed. No further calls to Read/Write
            are allowed after a single call to this.
            </summary>
        </member>
        <member name="T:RT.Util.Streams.NewlineNormalizerStream8bit">
            <summary>Provides functionality to replace the three different newlines (\r, \n, and \r\n) while reading from a stream containing textual data,
            without caring about the text encoding, as long as it is an encoding in which the newline characters are 8-bit ASCII (e.g. UTF-8).</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream8bit.CanSeek">
            <summary>Returns false.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.Flush">
            <summary>Does nothing.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream8bit.Length">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream8bit.Position">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.SetLength(System.Int64)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream8bit.CanRead">
            <summary>Returns true.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream8bit.CanWrite">
            <summary>Returns true.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.Close">
            <summary>Closes the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.#ctor(System.IO.Stream,System.Byte[])">
            <summary>Constructs a <see cref="T:RT.Util.Streams.NewlineNormalizerStream8bit"/>.</summary>
            <param name="underlyingStream">Stream to read textual data from.</param>
            <param name="newline">Normalised newline to use. If not specified, uses <c>Environment.NewLine</c>, encoded to UTF-8.</param>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream
            by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified
                byte array with the values between offset and (offset + count - 1) replaced
                by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read
                from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the
                number of bytes requested if that many bytes are not currently available,
                or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream8bit.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the
            current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:RT.Util.Streams.NewlineNormalizerStream16bit">
            <summary>Provides functionality to replace the three different newlines (\r, \n, and \r\n) while reading from a stream containing textual data,
            without caring about the text encoding, as long as it is an encoding in which the newline characters are made of 16-bit characters (e.g. UTF-16).</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream16bit.CanSeek">
            <summary>Returns false.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.Flush">
            <summary>Does nothing.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream16bit.Length">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream16bit.Position">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.SetLength(System.Int64)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream16bit.CanRead">
            <summary>Returns true.</summary>
        </member>
        <member name="P:RT.Util.Streams.NewlineNormalizerStream16bit.CanWrite">
            <summary>Returns true.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.Close">
            <summary>Closes the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.#ctor(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>Constructs a <see cref="T:RT.Util.Streams.NewlineNormalizerStream16bit"/>.</summary>
            <param name="underlyingStream">Stream to read textual data from.</param>
            <param name="newline">Normalised newline to use.</param>
            <param name="bigEndian">Specifies whether the byte order is big-endian (true) or little-endian (false).</param>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream
            by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified
                byte array with the values between offset and (offset + count - 1) replaced
                by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read
                from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the
                number of bytes requested if that many bytes are not currently available,
                or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:RT.Util.Streams.NewlineNormalizerStream16bit.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the
            current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:RT.Util.Streams.RSyncChecksumCalculator">
            <summary>
            Calculates RSync checksums over bytes.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumCalculator.#ctor(System.Int32)">
            <summary>
            Initialises the checksum calculator. Window Size determines the number of bytes
            which are hashed (see rsync algorithm details if this is unclear).
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumCalculator.ProcessBytes(System.Byte[])">
            <summary>
            Passes all bytes in the array through the rsync hash algorithm.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumCalculator.ProcessBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Passes the specified bytes in the array through the rsync hash algorithm.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.RSyncChecksumCalculator.CurrentChecksum">
            <summary>
            Returns the rsync checksum calculated so far.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.RSyncChecksumCalculator.CurrentChecksumBytes">
            <summary>
            Returns the rsync checksum calculated so far.
            </summary>
        </member>
        <member name="T:RT.Util.Streams.RSyncChecksumCalculatorTimwi">
            <summary>
            Timwi's version of the RSync checksum calculator. Based on the generic queue class.
            May or may not be noticeably slower than the much longer version above.
            </summary>
        </member>
        <member name="T:RT.Util.Streams.RSyncChecksumStream">
            <summary>
            Calculates rsync checksum of all values that are read/written via this stream.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.RSyncChecksumStream.BaseStream">
            <summary>
            This is the underlying stream. All reads/writes and most other operations
            on this class are performed on this underlying stream.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialises an rsync calculation stream using the specified stream as the
            underlying stream and the specified rsync window size (number of bytes)
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is ignored (but propagated to the underlying stream).
            All the bytes seeked over will be ignored.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the underlying stream. Updates the RSync with the bytes read.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.RSyncChecksumStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the underlying stream. Updates the RSync with the bytes written.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.RSyncChecksumStream.CurrentChecksum">
            <summary>
            Returns the rsync checksum calculated so far for all the bytes read/written.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.RSyncChecksumStream.CurrentChecksumBytes">
            <summary>
            Returns the rsync checksum calculated so far for all the bytes read/written.
            </summary>
        </member>
        <member name="T:RT.Util.Streams.SlowStream">
            <summary>
            Provides methods to read from a stream in small chunks at a time. Optionally suspends
            the thread for a specified interval on every chunk.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.SlowStream.ChunkSize">
            <summary>Gets or sets the current chunk size (number of bytes read at a time).</summary>
        </member>
        <member name="P:RT.Util.Streams.SlowStream.SleepInterval">
            <summary>Gets or sets the current interval, in ms, for which the reading thread is suspended on every chunk. Defaults to 0, which means no delay.</summary>
        </member>
        <member name="M:RT.Util.Streams.SlowStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Initialises a new SlowStream instance.</summary>
            <param name="stream">The underlying stream to read in chunks from.</param>
            <param name="chunkSize">The number of bytes to read per chunk. Defaults to 1 KB.</param>
        </member>
        <member name="M:RT.Util.Streams.SlowStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads at most <see cref="P:RT.Util.Streams.SlowStream.ChunkSize"/> bytes from the underlying stream.</summary>
            <param name="buffer">Buffer to store results into.</param>
            <param name="offset">Offset in buffer to store results at.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="T:RT.Util.Streams.TimeoutableStream">
            <summary>
            Implements a stream whose synchronous read/write operations respect the <see cref="P:System.IO.Stream.ReadTimeout"/>and <see cref="P:System.IO.Stream.WriteTimeout"/>
            properties. Useful for wrapping streams which do not directly support these properties.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.#ctor(System.IO.Stream)">
            <summary>Constructor.</summary>
            <param name="underlyingStream">The underlying stream on which all operations are to be performed.</param>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.Dispose(System.Boolean)">
            <summary>Disposes of this stream and the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.CanWrite">
            <summary>Indicates whether the underlying stream, and hence this stream, supports writing.</summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.CanRead">
            <summary>Indicates whether the underlying stream, and hence this stream, supports reading.</summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.CanSeek">
            <summary>Indicates whether the underlying stream, and hence this stream, supports seeking.</summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.CanTimeout">
            <summary>Always returns true.</summary>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.Flush">
            <summary>Flushes the underlying stream.</summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.Length">
            <summary>Gets the length of the underlying stream, if supported by it.</summary>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.SetLength(System.Int64)">
            <summary>Sets the length of the underlying stream, if supported by it.</summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.Position">
            <summary>Gets or sets the current position in the stream, if supported by the underlying stream.</summary>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Seeks to the specified position in the underlying stream, if the underlying stream supports it.</summary>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to <paramref name="count"/> bytes into <paramref name="buffer"/> starting  at <paramref name="offset"/>
            from the underlying stream, if it supports this. Will block waiting for the read to complete for at most <see cref="P:System.IO.Stream.ReadTimeout"/>
            milliseconds; afterwards, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
        </member>
        <member name="M:RT.Util.Streams.TimeoutableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes <paramref name="count"/> bytes from <paramref name="buffer"/> starting at <paramref name="offset"/>
            to the underlying stream, if it supports this. Will block waiting for the write to complete for at most <see cref="P:System.IO.Stream.WriteTimeout"/>
            milliseconds; afterwards, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            Specify <see cref="F:System.Threading.Timeout.Infinite"/> to suppress the time-out (which is the default value).
            </summary>
        </member>
        <member name="P:RT.Util.Streams.TimeoutableStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            Specify <see cref="F:System.Threading.Timeout.Infinite"/> to suppress the time-out (which is the default value).
            </summary>
        </member>
        <member name="T:RT.Util.Streams.VoidStream">
            <summary>
            A stream that discards everything that goes in; all reads result in 0's.
            Can be used as the underlying stream for things like <see cref="T:RT.Util.Streams.CRC32Stream"/>.
            Pretends to be a zero-length stream that can swallow writes and length changes.
            </summary>
        </member>
        <member name="T:RT.Util.Text.HorizontalTextAlignment">
            <summary>Provides values to specify a horizontal alignment of text.</summary>
        </member>
        <member name="F:RT.Util.Text.HorizontalTextAlignment.Left">
            <summary>Specifies alignment to the left edge.</summary>
        </member>
        <member name="F:RT.Util.Text.HorizontalTextAlignment.Center">
            <summary>Specifies horizontally centered alignment.</summary>
        </member>
        <member name="F:RT.Util.Text.HorizontalTextAlignment.Right">
            <summary>Specifies alignment to the right edge.</summary>
        </member>
        <member name="T:RT.Util.Text.OffsetToLineCol">
            <summary>
            Encapsulates a class that offers efficient conversion of a string offset into line/column number. The class
            is best suited for multiple lookups on a single fixed string, and is suboptimal for single lookups into many
            different strings. All common newline styles are supported.
            </summary>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.#ctor(System.String)">
            <summary>Constructor: precomputes certain information to enable efficient lookups.</summary>
            <param name="input">The string on which the lookups will be performed.</param>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.GetLine(System.Int32)">
            <summary>Gets the number of the line containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <returns>The number of the line containing the specified character (first line is number 1).</returns>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.GetColumn(System.Int32)">
            <summary>Gets the number of the column containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <returns>The number of the column containing the specified character (first column is number 1).</returns>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>Gets the numbers of the line and column containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <param name="line">The number of the line containing the specified character (first line is number 1).</param>
            <param name="column">The number of the column containing the specified character (first column is number 1).</param>
        </member>
        <member name="T:RT.Util.Text.TextTable">
            <summary>Produces a table in a fixed-width character environment.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.ColumnSpacing">
            <summary>Gets or sets the number of characters to space each column apart from the next.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.RowSpacing">
            <summary>Gets or sets the number of characters to space each row apart from the next.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.MaxWidth">
            <summary>
                Gets or sets the maximum width of the table, including all column spacing. If <see cref="P:RT.Util.Text.TextTable.UseFullWidth"/> is
                false, the table may be narrower. If this is null, the table width depends on which method is used to generate
                it.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.HorizontalRules">
            <summary>
                Gets or sets a value indicating whether horizontal rules are rendered between rows. The horizontal rules are
                rendered only if <see cref="P:RT.Util.Text.TextTable.RowSpacing"/> is greater than zero.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.VerticalRules">
            <summary>
                Gets or sets a value indicating whether vertical rules are rendered between columns. The vertical rules are
                rendered only if <see cref="P:RT.Util.Text.TextTable.ColumnSpacing"/> is greater than zero.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.HeaderRows">
            <summary>
                Gets or sets a value indicating the number of rows from the top that are considered table headers. The only
                effect of this is that the horizontal rule (if any) after the header rows is rendered using '=' characters
                instead of '-'.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.UseFullWidth">
            <summary>
                If true, the table will be expanded to fill the <see cref="P:RT.Util.Text.TextTable.MaxWidth"/>. If false, the table will fill the
                whole width only if any cells need to be word-wrapped.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.DefaultAlignment">
            <summary>
                Specifies the default alignment to use for cells where the alignment is not explicitly set. Default is <see
                cref="F:RT.Util.Text.HorizontalTextAlignment.Left"/>.</summary>
        </member>
        <member name="P:RT.Util.Text.TextTable.LeftMargin">
            <summary>
                Gets or sets a value indicating the number of spaces to add left of the table. This does not count towards the
                <see cref="P:RT.Util.Text.TextTable.MaxWidth"/>.</summary>
        </member>
        <member name="M:RT.Util.Text.TextTable.SetCell(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{RT.Util.Text.HorizontalTextAlignment},System.Nullable{System.ConsoleColor})">
            <summary>
                Places the specified content into the cell at the specified co-ordinates.</summary>
            <param name="col">
                Column where to place the content.</param>
            <param name="row">
                Row where to place the content.</param>
            <param name="content">
                The content to place.</param>
            <param name="colSpan">
                The number of columns to span.</param>
            <param name="rowSpan">
                The number of rows to span.</param>
            <param name="noWrap">
                If true, indicates that this cell should not be automatically word-wrapped except at explicit newlines in
                <paramref name="content"/>. The cell is word-wrapped only if doing so is necessary to fit all no-wrap cells
                into the table's total width. If false, the cell is automatically word-wrapped to optimise the table's layout.</param>
            <param name="alignment">
                How to align the contents within the cell, or null to use <see cref="P:RT.Util.Text.TextTable.DefaultAlignment"/>.</param>
            <param name="background">
                Specifies a background color for the whole cell.</param>
        </member>
        <member name="M:RT.Util.Text.TextTable.SetCell(System.Int32,System.Int32,RT.Util.Consoles.ConsoleColoredString,System.Int32,System.Int32,System.Boolean,System.Nullable{RT.Util.Text.HorizontalTextAlignment},System.Nullable{System.ConsoleColor})">
            <summary>
                Places the specified content into the cell at the specified co-ordinates.</summary>
            <param name="col">
                Column where to place the content.</param>
            <param name="row">
                Row where to place the content.</param>
            <param name="content">
                The content to place.</param>
            <param name="colSpan">
                The number of columns to span.</param>
            <param name="rowSpan">
                The number of rows to span.</param>
            <param name="noWrap">
                If true, indicates that this cell should not be automatically word-wrapped except at explicit newlines in
                <paramref name="content"/>. The cell is word-wrapped only if doing so is necessary to fit all no-wrap cells
                into the table's total width. If false, the cell is automatically word-wrapped to optimise the table's layout.</param>
            <param name="alignment">
                How to align the contents within the cell, or null to use <see cref="P:RT.Util.Text.TextTable.DefaultAlignment"/>.</param>
            <param name="background">
                Specifies a background color for the whole cell, including its empty space. Characters with background colors
                in the input string take precedence for those characters only.</param>
        </member>
        <member name="M:RT.Util.Text.TextTable.ToString">
            <summary>
                Generates the table.</summary>
            <returns>
                The complete rendered table as a single string.</returns>
        </member>
        <member name="M:RT.Util.Text.TextTable.ToColoredString">
            <summary>
                Generates the table.</summary>
            <returns>
                The complete rendered table as a single <see cref="T:RT.Util.Consoles.ConsoleColoredString"/>.</returns>
        </member>
        <member name="M:RT.Util.Text.TextTable.WriteToConsole">
            <summary>Outputs the entire table to the console.</summary>
        </member>
        <member name="M:RT.Util.Text.TextTable.SetRowBackground(System.Int32,System.Nullable{System.ConsoleColor})">
            <summary>
                Sets a background color for an entire row within the table, including the vertical rules if <see
                cref="P:RT.Util.Text.TextTable.VerticalRules"/> is <c>true</c>. Background colors for individual cells take precedence within the
                bounds of that cell. Background colors in the input string take precendence for those characters.</summary>
            <param name="row">
                The index of the row. If during rendering the table turns out to have fewer rows, the background color is
                ignored.</param>
            <param name="backgroundColor">
                The background color to set the row to, or <c>null</c> to reset the color.</param>
        </member>
        <member name="M:RT.Util.Text.TextTable.RemoveEmptyColumns">
            <summary>Removes columns that contain only empty cells. Subsequent columns are moved to the left accordingly.</summary>
        </member>
        <member name="M:RT.Util.Text.TextTable.AddRow(System.String[])">
            <summary>
                Adds a new row to the end of the table, using default cell settings for each cell.</summary>
            <param name="values">
                Values to add, one for each column.</param>
        </member>
        <member name="M:RT.Util.Text.TextTable.AddRow(RT.Util.Consoles.ConsoleColoredString[])">
            <summary>
                Adds a new row to the end of the table, using default cell settings for each cell.</summary>
            <param name="values">
                Values to add, one for each column.</param>
        </member>
        <member name="T:RT.Util.Threading.Periodic">
            <summary>
            Encapsulates a class performing a certain activity periodically, which can be initiated once
            and then permanently shut down, but not paused/resumed. The class owns its own separate
            thread, and manages this thread all by itself. The periodic task is executed on this thread.
            <para>The chief differences to <see cref="T:System.Threading.Timer"/> are as follows. This
            class will never issue overlapping activities, even if an activity takes much longer than the interval;
            the interval is between the end of the previous occurrence of the activity and the start of the next.
            The activity is executed on a foreground thread (by default), and thus will complete once started,
            unless a catastrophic abort occurs. When shutting down the activity, it's possible to wait until the
            last occurrence, if any, has completed fully.</para>
            <para>Threading: unsafe (call public methods on the creating thread only) - or is it?</para>
            </summary>
        </member>
        <member name="P:RT.Util.Threading.Periodic.FirstInterval">
            <summary>
            Override to indicate how long to wait between the call to <see cref="M:RT.Util.Threading.Periodic.Start(System.Boolean)"/> and the first occurrence
            of the periodic activity.
            </summary>
        </member>
        <member name="P:RT.Util.Threading.Periodic.SubsequentInterval">
            <summary>
            Override to indicate how long to wait between second and subsequent occurrences of the periodic activity.
            </summary>
        </member>
        <member name="M:RT.Util.Threading.Periodic.PeriodicActivity">
            <summary>
            Override with a method that performs the desired periodic activity. If this method throws an exception
            the thread will terminate, but the <see cref="M:RT.Util.Threading.Periodic.LastActivity"/> will occur nevertheless.
            </summary>
        </member>
        <member name="M:RT.Util.Threading.Periodic.LastActivity">
            <summary>
            Override with a method that performs an activity on the same thread as <see cref="M:RT.Util.Threading.Periodic.PeriodicActivity"/> during
            shutdown, just before signalling that the shutdown is complete. The default implementation of this method
            does nothing. This method is guaranteed to be called during a shutdown, even if the shutdown is due to an
            exception propagating outside of <see cref="M:RT.Util.Threading.Periodic.PeriodicActivity"/>.
            </summary>
        </member>
        <member name="P:RT.Util.Threading.Periodic.IsRunning">
            <summary>
            Returns false before the first call to <see cref="M:RT.Util.Threading.Periodic.Start(System.Boolean)"/> and after the first call to <see cref="M:RT.Util.Threading.Periodic.Shutdown(System.Boolean)"/>;
            true between them.
            </summary>
        </member>
        <member name="M:RT.Util.Threading.Periodic.Start(System.Boolean)">
            <summary>
            Schedules the periodic activity to start occurring. This method may only be called once.
            </summary>
            <param name="backgroundThread">By default (false) the class will use a foreground thread, preventing application shutdown until the thread has terminated. If true, a background thread will be created instead.</param>
        </member>
        <member name="M:RT.Util.Threading.Periodic.Shutdown(System.Boolean)">
            <summary>
            Causes the periodic activity to stop occurring. If called while the activity is being performed,
            will wait until the activity has completed before returning. Ensures that <see cref="P:RT.Util.Threading.Periodic.IsRunning"/>
            is false once this method returns.
            </summary>
        </member>
        <member name="T:RT.Util.Threading.PeriodicMultiple">
            <summary>
            <para>Encapsulates a class performing multiple related yet independent tasks on the same thread
            at a certain minimum interval each. Schedules the activity that is the most late at every opportunity,
            but will never execute more than one activity at a time (as they all share the same thread).</para>
            <para>Threading: unsafe (call public methods on the creating thread only)</para>
            </summary>
        </member>
        <member name="T:RT.Util.Threading.PeriodicMultiple.Task">
            <summary>
            Used to define the activities to be executed periodically.
            </summary>
        </member>
        <member name="F:RT.Util.Threading.PeriodicMultiple.Task.Action">
            <summary>The activity to be performed.</summary>
        </member>
        <member name="F:RT.Util.Threading.PeriodicMultiple.Task.MinInterval">
            <summary>The mimimum interval at which this activity should be repeated. May be delayed arbitrarily though.</summary>
        </member>
        <member name="F:RT.Util.Threading.PeriodicMultiple.Task.LastExecuted">
            <summary>Stores the last time this activity was executed.</summary>
        </member>
        <member name="M:RT.Util.Threading.PeriodicMultiple.Task.DelayedBy">
            <summary>Calculates by how much this activity has been delayed. Is used internally to pick the next activity to run. Returns negative values for activities that aren't due yet.</summary>
        </member>
        <member name="P:RT.Util.Threading.PeriodicMultiple.SubsequentInterval">
            <summary>If desired, override to provide a custom interval at which the scheduler
            should re-check whether any activity is due to start. Defaults to 1 second.</summary>
        </member>
        <member name="F:RT.Util.Threading.PeriodicMultiple.Tasks">
            <summary>Initialise this with the list of activities to be executed.</summary>
        </member>
        <member name="M:RT.Util.Threading.PeriodicMultiple.PeriodicActivity">
            <summary>For internal use.</summary>
        </member>
        <member name="T:RT.Util.Threading.RateLimitedAction">
            <summary>
            Simplifies the task of performing a certain action on an arbitrary thread with a certain minimum interval
            between two invocations. Only a single thread will execute the task; no threads will block waiting for that.
            </summary>
        </member>
        <member name="P:RT.Util.Threading.RateLimitedAction.MinActionInterval">
            <summary>Gets/sets the minimum interval between two invocations.</summary>
        </member>
        <member name="M:RT.Util.Threading.RateLimitedAction.#ctor(System.TimeSpan)">
            <summary>Constructor.</summary>
            <param name="minActionInterval">The minimum interval between two invocations.</param>
        </member>
        <member name="M:RT.Util.Threading.RateLimitedAction.Check(System.Action)">
            <summary>
            Checks whether it is time to execute the action. If so, executes it on the calling thread and returns only when
            the action is complete. If not, returns very quickly without blocking. If another thread is currently executing the
            action, returns very quickly without blocking.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:RT.Util.Threading.RateLimitedAction.Postpone">
            <summary>
            Makes it so that the next action will occur no earlier than the <see cref="P:RT.Util.Threading.RateLimitedAction.MinActionInterval"/>.
            If action is already in progress, it will complete as usual.
            </summary>
        </member>
        <member name="M:RT.Util.Threading.RateLimitedAction.Expire">
            <summary>
            Makes it so that the action will occur as soon as possible - namely, the next time a thread
            invokes the <see cref="M:RT.Util.Threading.RateLimitedAction.Check(System.Action)"/> method.
            </summary>
        </member>
        <member name="T:RT.Util.Tmr`1">
            <summary>
                Base class for a timer with particularly self-explanatory method names which are chainable. See Remarks.</summary>
            <typeparam name="T">
                The type of the values that the timer returns. This may be a reference type if need be, as long as the descendant
                fully supports a zero being equal to <c>default(T)</c>.</typeparam>
            <remarks>
                Idiomatic use example: <c>var tmr = new TmrSeconds().StartAndZero();</c></remarks>
        </member>
        <member name="M:RT.Util.Tmr`1.read(`0)">
            <summary>
                Expected to return the amount of time elapsed since the last call to <see cref="M:RT.Util.Tmr`1.zero"/>, plus the specified
                additional amount of time.</summary>
            <param name="add">
                A length of time to be added to the actual time elapsed since the last call to <see cref="M:RT.Util.Tmr`1.zero"/>.</param>
        </member>
        <member name="M:RT.Util.Tmr`1.zero">
            <summary>
                Expected to zero the timer, so that future calls to <see cref="M:RT.Util.Tmr`1.read(`0)"/> return a value relative to the last time
                this method was called.</summary>
        </member>
        <member name="P:RT.Util.Tmr`1.Current">
            <summary>
                Gets the current reading of the timer. This value increases between consecutive reads while the timer is running,
                and remains fixed while it's paused.</summary>
        </member>
        <member name="P:RT.Util.Tmr`1.Last">
            <summary>
                Gets the reading the timer had just before the last call to any of the methods of this class related to zeroing,
                pausing and resuming the timer.</summary>
        </member>
        <member name="M:RT.Util.Tmr`1.#ctor">
            <summary>Instantiates the timer. The timer will be zeroed, and it will not be running.</summary>
        </member>
        <member name="M:RT.Util.Tmr`1.Zero">
            <summary>Resets the timer back to zero.</summary>
        </member>
        <member name="M:RT.Util.Tmr`1.StartAndZero">
            <summary>Resets the timer and makes sure it's running. The current state of the timer is irrelevant.</summary>
        </member>
        <member name="M:RT.Util.Tmr`1.StopAndZero">
            <summary>Makes sure the timer is not running and zeroes it. The current state of the timer is irrelevant.</summary>
        </member>
        <member name="M:RT.Util.Tmr`1.Pause">
            <summary>
                Pauses the timer without zeroing it. This method may be called while the timer is already paused, but a single
                call to <see cref="M:RT.Util.Tmr`1.Continue"/> is always sufficient to resume the timer.</summary>
        </member>
        <member name="M:RT.Util.Tmr`1.Continue">
            <summary>
                Makes sure the timer is running without zeroing the time reading. If the reading is non-zero, it will continue
                growing. This method may be called while the timer is already running.</summary>
        </member>
        <member name="T:RT.Util.TmrSeconds">
            <summary>
                A timer measuring the number of real-time seconds elapsed between the calls. See Remarks on <see
                cref="T:RT.Util.Tmr`1"/>.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.read(System.Double)">
            <summary>Override; see base.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.zero">
            <summary>Override; see base.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.Zero">
            <summary>Resets the timer back to zero.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.StartAndZero">
            <summary>Resets the timer and makes sure it's running. The current state of the timer is irrelevant.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.StopAndZero">
            <summary>Makes sure the timer is not running and zeroes it. The current state of the timer is irrelevant.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.Pause">
            <summary>
                Pauses the timer without zeroing it. This method may be called while the timer is already paused, but a single
                call to <see cref="M:RT.Util.TmrSeconds.Continue"/> is always sufficient to resume the timer.</summary>
        </member>
        <member name="M:RT.Util.TmrSeconds.Continue">
            <summary>
                Makes sure the timer is running without zeroing the time reading. If the reading is non-zero, it will continue
                growing. This method may be called while the timer is already running.</summary>
        </member>
        <member name="T:RT.Util.TmrCycles">
            <summary>
                A timer measuring the number of CPU clock cycles consumed by the calling thread between the calls. To ensure correct
                operation, the timer must be instantiated on the same thread on which the measurements will be performed. See Remarks
                on <see cref="T:RT.Util.Tmr`1"/>.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.read(System.Int64)">
            <summary>Override; see base.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.#ctor">
            <summary>
                Constructor. Calibrates the timer. To ensure correct operation, the timer must be instantiated on the same thread
                on which the measurements will be performed.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.zero">
            <summary>Override; see base.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.Zero">
            <summary>Resets the timer back to zero.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.StartAndZero">
            <summary>Resets the timer and makes sure it's running. The current state of the timer is irrelevant.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.StopAndZero">
            <summary>Makes sure the timer is not running and zeroes it. The current state of the timer is irrelevant.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.Pause">
            <summary>
                Pauses the timer without zeroing it. This method may be called while the timer is already paused, but a single
                call to <see cref="M:RT.Util.TmrCycles.Continue"/> is always sufficient to resume the timer.</summary>
        </member>
        <member name="M:RT.Util.TmrCycles.Continue">
            <summary>
                Makes sure the timer is running without zeroing the time reading. If the reading is non-zero, it will continue
                growing. This method may be called while the timer is already running.</summary>
        </member>
        <member name="T:RT.Util.Ut">
            <summary>Provides extension methods that apply to all types.</summary>
            <summary>This class offers some generic static functions which are hard to categorize under any more specific classes.</summary>
        </member>
        <member name="M:RT.Util.Ut.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.ValueTuple{``0,RT.Util.DiffOp}}})">
            <summary>
                Computes a representation of the differences between <paramref name="old"/> and <paramref name="new"/> using
                the specified options.</summary>
            <typeparam name="T">
                The type of items to compare.</typeparam>
            <param name="old">
                The first sequence of elements. Elements only in this sequence are considered "deleted".</param>
            <param name="new">
                The second sequence of elements. Elements only in this sequence are considered "inserted".</param>
            <param name="comparer">
                The equality comparer to use to compare items in the two sequences, or null to use the default comparer.</param>
            <param name="predicate">
                If not null, determines which elements are "hard matches" (true) and which are "soft matches" (false). A "hard
                match" element is one that can always be matched. A "soft match" element is only matched if it is adjacent to
                a hard match.</param>
            <param name="postProcessor">
                If not null, provides a post-processing step for parts of the diff in between consecutive matches. Without a
                post-processing step, or when the post-processor returns null, these parts are returned as a sequence of
                deletes followed by a sequence of inserts.</param>
            <returns>
                An <c>IEnumerable&lt;Tuple&lt;T, DiffOp&gt;&gt;</c> representing the differences between <paramref
                name="old"/> and <paramref name="new"/>. Each element in the returned <c>IEnumerable&lt;Tuple&lt;T,
                DiffOp&gt;&gt;</c> corresponds either to an element present only in <paramref name="old"/> (the element is
                considered “deleted”), an element present only in <paramref name="new"/> (the element is considered
                “inserted”) or an element present in both.</returns>
        </member>
        <member name="M:RT.Util.Ut.NullOr``2(``0,RT.Util.FuncClassClass{``0,``1})">
            <summary>Returns null if the input is null, otherwise the result of the specified lambda when applied to the input.</summary>
            <typeparam name="TInput">Type of the input value.</typeparam>
            <typeparam name="TResult">Type of the result from the lambda.</typeparam>
            <param name="input">Input value to check for null.</param>
            <param name="lambda">Function to apply the input value to if it is not null.</param>
        </member>
        <member name="M:RT.Util.Ut.NullOr``2(``0,RT.Util.FuncClass{``0,System.Nullable{``1}})">
            <summary>Returns null if the input is null, otherwise the result of the specified lambda when applied to the input.</summary>
            <typeparam name="TInput">Type of the input value.</typeparam>
            <typeparam name="TResult">Type of the result from the lambda.</typeparam>
            <param name="input">Input value to check for null.</param>
            <param name="lambda">Function to apply the input value to if it is not null.</param>
        </member>
        <member name="M:RT.Util.Ut.NullOr``2(``0,RT.Util.FuncClassStruct{``0,``1})">
            <summary>Returns null if the input is null, otherwise the result of the specified lambda when applied to the input.</summary>
            <typeparam name="TInput">Type of the input value.</typeparam>
            <typeparam name="TResult">Type of the result from the lambda.</typeparam>
            <param name="input">Input value to check for null.</param>
            <param name="lambda">Function to apply the input value to if it is not null.</param>
        </member>
        <member name="M:RT.Util.Ut.NullOr``2(System.Nullable{``0},RT.Util.FuncStructClass{``0,``1})">
            <summary>Returns null if the input is null, otherwise the result of the specified lambda when applied to the input.</summary>
            <typeparam name="TInput">Type of the input value.</typeparam>
            <typeparam name="TResult">Type of the result from the lambda.</typeparam>
            <param name="input">Input value to check for null.</param>
            <param name="lambda">Function to apply the input value to if it is not null.</param>
        </member>
        <member name="M:RT.Util.Ut.NullOr``2(System.Nullable{``0},RT.Util.FuncStruct{``0,System.Nullable{``1}})">
            <summary>Returns null if the input is null, otherwise the result of the specified lambda when applied to the input.</summary>
            <typeparam name="TInput">Type of the input value.</typeparam>
            <typeparam name="TResult">Type of the result from the lambda.</typeparam>
            <param name="input">Input value to check for null.</param>
            <param name="lambda">Function to apply the input value to if it is not null.</param>
        </member>
        <member name="M:RT.Util.Ut.NullOr``2(System.Nullable{``0},RT.Util.FuncStructStruct{``0,``1})">
            <summary>Returns null if the input is null, otherwise the result of the specified lambda when applied to the input.</summary>
            <typeparam name="TInput">Type of the input value.</typeparam>
            <typeparam name="TResult">Type of the result from the lambda.</typeparam>
            <param name="input">Input value to check for null.</param>
            <param name="lambda">Function to apply the input value to if it is not null.</param>
        </member>
        <member name="M:RT.Util.Ut.Nullable``1(``0)">
            <summary>Turns the specified value into a nullable value.</summary>
            <typeparam name="TInput">Any non-nullable value type.</typeparam>
            <param name="input">Any value.</param>
            <returns>The same value cast as nullable.</returns>
        </member>
        <member name="M:RT.Util.Ut.GetFieldValue``1(System.Object,System.String)">
            <summary>Searches the specified object’s type for a field of the specified name and returns that field’s value.</summary>
            <typeparam name="T">Expected type of the field.</typeparam>
            <param name="instance">Instance from which to retrieve the field value.</param>
            <param name="fieldName">Name of the field to return the value of.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The field is of a different type than specified.</description></item>
            <item><description>There is no field with the specified name.</description></item>
            </list>
            </exception>
            <remarks>This method is intended to be used only for debugging. Do not rely on it in production code.</remarks>
        </member>
        <member name="M:RT.Util.Ut.SizeToString(System.Int64)">
            <summary>
                Converts file size in bytes to a string that uses KB, MB, GB or TB.</summary>
            <param name="size">
                The file size in bytes.</param>
            <returns>
                The converted string.</returns>
        </member>
        <member name="M:RT.Util.Ut.Min``1(``0,``0)">
            <summary>Returns the smaller of the two IComparable values. If the values are equal, returns the first one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Min``1(``0,``0,``0)">
            <summary>Returns the smaller of the three IComparable values. If two values are equal, returns the earlier one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Min``1(``0[])">
            <summary>Returns the smallest of all arguments passed in. Uses the Linq .Min extension method to do the work.</summary>
        </member>
        <member name="M:RT.Util.Ut.Max``1(``0,``0)">
            <summary>Returns the larger of the two IComparable values. If the values are equal, returns the first one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Max``1(``0,``0,``0)">
            <summary>Returns the larger of the three IComparable values. If two values are equal, returns the earlier one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Max``1(``0[])">
            <summary>Returns the largest of all arguments passed in. Uses the Linq .Max extension method to do the work.</summary>
        </member>
        <member name="M:RT.Util.Ut.Sha1(System.String)">
            <summary>
                Reads the specified file and computes the SHA1 hash function from its contents.</summary>
            <param name="path">
                Path to the file to compute SHA1 hash function from.</param>
            <returns>
                Result of the SHA1 hash function as a string of hexadecimal digits.</returns>
        </member>
        <member name="M:RT.Util.Ut.Md5(System.String)">
            <summary>
                Reads the specified file and computes the MD5 hash function from its contents.</summary>
            <param name="path">
                Path to the file to compute MD5 hash function from.</param>
            <returns>
                Result of the MD5 hash function as a string of hexadecimal digits.</returns>
        </member>
        <member name="M:RT.Util.Ut.VersionOfExe">
            <summary>Returns the version of the entry assembly (the .exe file) in a standard format.</summary>
        </member>
        <member name="M:RT.Util.Ut.Assert(System.Boolean,System.String)">
            <summary>
                Checks the specified condition and causes the debugger to break if it is false. Throws an <see
                cref="T:System.Exception"/> afterwards.</summary>
        </member>
        <member name="M:RT.Util.Ut.AssertAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Checks the specified condition and causes the debugger to break if it is false. Throws an <see
                cref="T:System.Exception"/> afterwards.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda(System.Action)">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``1(System.Action{``0})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``2(System.Action{``0,``1})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``3(System.Action{``0,``1,``2})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``4(System.Action{``0,``1,``2,``3})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``1(System.Func{``0})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``2(System.Func{``0,``1})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``3(System.Func{``0,``1,``2})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``4(System.Func{``0,``1,``2,``3})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.KeyValuePair``2(``0,``1)">
            <summary>Allows the use of type inference when creating .NET’s KeyValuePair&lt;TK,TV&gt;.</summary>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(``0[])">
            <summary>
                Returns the parameters as a new array.</summary>
            <remarks>
                Useful to circumvent Visual Studio’s bug where multi-line literal arrays are not auto-formatted.</remarks>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
                Instantiates a fully-initialized array with the specified dimensions.</summary>
            <param name="size">
                Size of the first dimension.</param>
            <param name="initialiser">
                Function to initialise the value of every element.</param>
            <typeparam name="T">
                Type of the array element.</typeparam>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>
                Instantiates a fully-initialized rectangular jagged array with the specified dimensions.</summary>
            <param name="size1">
                Size of the first dimension.</param>
            <param name="size2">
                Size of the second dimension.</param>
            <param name="initialiser">
                Optional function to initialise the value of every element.</param>
            <typeparam name="T">
                Type of the array element.</typeparam>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Int32,``0})">
            <summary>
                Instantiates a fully-initialized "rectangular" jagged array with the specified dimensions.</summary>
            <param name="size1">
                Size of the first dimension.</param>
            <param name="size2">
                Size of the second dimension.</param>
            <param name="size3">
                Size of the third dimension.</param>
            <param name="initialiser">
                Optional function to initialise the value of every element.</param>
            <typeparam name="T">
                Type of the array element.</typeparam>
        </member>
        <member name="M:RT.Util.Ut.ParseInt32(System.String)">
            <summary>
                Returns the integer represented by the specified string, or null if the string does not represent a valid
                32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseInt64(System.String)">
            <summary>
                Returns the integer represented by the specified string, or null if the string does not represent a valid
                64-bit integer.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseDouble(System.String)">
            <summary>
                Returns the floating-point number represented by the specified string, or null if the string does not
                represent a valid double-precision floating-point number.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseDateTime(System.String)">
            <summary>
                Returns the date/time stamp represented by the specified string, or null if the string does not represent a
                valid date/time stamp.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseEnum``1(System.String,System.Boolean)">
            <summary>
                Returns the enum value represented by the specified string, or null if the string does not represent a valid
                enum value.</summary>
        </member>
        <member name="M:RT.Util.Ut.Apply``2(``0,System.Func{``0,``1})">
            <summary>
                Executes the specified function with the specified argument.</summary>
            <typeparam name="TSource">
                Type of the argument to the function.</typeparam>
            <typeparam name="TResult">
                Type of the result of the function.</typeparam>
            <param name="source">
                The argument to the function.</param>
            <param name="func">
                The function to execute.</param>
            <returns>
                The result of the function.</returns>
        </member>
        <member name="M:RT.Util.Ut.Apply``1(``0,System.Action{``0})">
            <summary>
                Executes the specified action with the specified argument.</summary>
            <typeparam name="TSource">
                Type of the argument to the action.</typeparam>
            <param name="source">
                The argument to the action.</param>
            <param name="action">
                The action to execute.</param>
            <returns>
                The result of the function.</returns>
        </member>
        <member name="M:RT.Util.Ut.WaitSharingVio(System.Action,System.Nullable{System.TimeSpan},System.Action)">
            <summary>
                Executes the specified action. If the action results in a file sharing violation exception, the action will be
                repeatedly retried after a short delay (which increases after every failed attempt).</summary>
            <param name="action">
                The action to be attempted and possibly retried.</param>
            <param name="maximum">
                Maximum amount of time to keep retrying for. When expired, any sharing violation exception will propagate to
                the caller of this method. Use null to retry indefinitely.</param>
            <param name="onSharingVio">
                Action to execute when a sharing violation does occur (is called before the waiting).</param>
        </member>
        <member name="M:RT.Util.Ut.WaitSharingVio``1(System.Func{``0},System.Nullable{System.TimeSpan},System.Action)">
            <summary>
                Executes the specified function. If the function results in a file sharing violation exception, the function
                will be repeatedly retried after a short delay (which increases after every failed attempt).</summary>
            <param name="func">
                The function to be attempted and possibly retried.</param>
            <param name="maximum">
                Maximum amount of time to keep retrying for. When expired, any sharing violation exception will propagate to
                the caller of this method. Use null to retry indefinitely.</param>
            <param name="onSharingVio">
                Action to execute when a sharing violation does occur (is called before the waiting).</param>
        </member>
        <member name="M:RT.Util.Ut.ThreadPool(System.Action)">
            <summary>
                Queues the specified action to be executed on the thread pool. This is just a shortcut for
                <c>ThreadPool.QueueUserWorkItem</c>, and also does not require the method to accept a parameter (which has
                been useless ever since C# gained support for lambdas).</summary>
        </member>
        <member name="M:RT.Util.Ut.Swap``1(``0@,``0@)">
            <summary>Swaps the values of the specified two variables.</summary>
        </member>
        <member name="M:RT.Util.Ut.GetLongestCommonSubstring(System.String[])">
            <summary>
                Finds the longest substring that all of the specified input strings contain.</summary>
            <param name="strings">
                Strings to examine.</param>
            <returns>
                The longest shared substring. This may be the empty string, but not will not be <c>null</c>.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToUShort(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 16-bit unsigned integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 16-bit unsigned integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToShort(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 16-bit signed integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 16-bit signed integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToUInt(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 32-bit unsigned integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 32-bit unsigned integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToInt(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 32-bit signed integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 32-bit signed integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToULong(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 64-bit unsigned integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 64-bit unsigned integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToLong(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 64-bit signed integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 64-bit signed integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.ArrayHash(System.Object[])">
            <summary>
                Computes a hash value from an array of elements.</summary>
            <param name="input">
                The array of elements to hash.</param>
            <returns>
                The computed hash value.</returns>
        </member>
        <member name="M:RT.Util.Ut.ArrayHash(System.Array)">
            <summary>
                Computes a hash value from an array of elements.</summary>
            <param name="input">
                The array of elements to hash.</param>
            <returns>
                The computed hash value.</returns>
        </member>
        <member name="M:RT.Util.Ut.Range(System.Double,System.Double,System.Double)">
            <summary>
                Generates a sequence of floating-point numbers within a specified range.</summary>
            <param name="start">
                The first value to produce.</param>
            <param name="end">
                The last value to produce.</param>
            <param name="step">
                The difference between the values to generate, except that the difference between the last and second-last may
                be smaller if the interval between <paramref name="start"/> and <paramref name="end"/> isn’t exactly divisible
                by <paramref name="step"/>.</param>
        </member>
        <member name="M:RT.Util.Ut.ToHex(System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>Generates a representation of the specified byte sequence as hexadecimal numbers (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.Ut.ToHex(System.Byte[])">
            <summary>Generates a representation of the specified byte array as hexadecimal numbers (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.Ut.ToHex(System.UInt32[])">
            <summary>Generates a representation of the specified uint array as hexadecimal numbers (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.Ut.OnException``2(System.Func{``1},System.Func{``0,``1})">
            <summary>
                Evaluates the specified code and returns its result. If the code throws an exception of the specified type, runs
                <paramref name="onException"/> instead.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="onException">
                The code to be executed in case of failure.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionIgnore(System.Action)">
            <summary>
                Evaluates the specified code. If the code throws any exceptions, catches and suppresses them.</summary>
            <param name="action">
                The code to be executed.</param>
            <returns>
                True if <paramref name="action"/> returned without exceptions, false otherwise.</returns>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionIgnore``1(System.Action)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws <typeparamref name="TException"/>, catches
                and suppresses it. Doesn't catch any other exceptions.</summary>
            <param name="action">
                The code to be executed.</param>
            <returns>
                True if <paramref name="action"/> returned without exceptions, false if <typeparamref name="TException"/> was caught and
                suppressed.</returns>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionDefault``1(System.Func{``0},``0)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws any exceptions, returns <paramref
                name="default"/> instead.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="default">
                Value to return in case of failure.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionDefault``2(System.Func{``0},``0)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws <typeparamref name="TException"/>, returns
                <paramref name="default"/> instead. Doesn't catch any other exceptions.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="default">
                Value to return in case of failure.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetry(System.Action,System.Int32,System.Int32,System.Action)">
            <summary>
                Evaluates the specified code. If the code throws any exceptions, retries the specified number of times. The final
                attempt is executed without any exception handlers.</summary>
            <param name="action">
                The code to be executed.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="action"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="action"/>.</param>
            <param name="onException">
                Optional action to execute when an exception occurs and the waiting period starts.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetry``1(System.Action,System.Int32,System.Int32)">
            <summary>
                Evaluates the specified code. If the code throws <typeparamref name="TException"/>, retries the specified number
                of times. The final attempt is executed without any exception handlers.</summary>
            <param name="action">
                The code to be executed.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="action"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="action"/>.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetry``1(System.Func{``0},System.Int32,System.Int32,System.Action)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws any exceptions, retries the specified
                number of times. The final attempt is executed without any exception handlers.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="func"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="func"/>.</param>
            <param name="onException">
                Optional action to execute when an exception occurs and the waiting period starts.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetry``2(System.Func{``0},System.Int32,System.Int32)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws <typeparamref name="TException"/>, retries
                the specified number of times. The final attempt is executed without any exception handlers.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="func"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="func"/>.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetryThenIgnore(System.Action,System.Int32,System.Int32)">
            <summary>
                Evaluates the specified code. If the code throws any exceptions, retries the specified number of times. If the
                code still throws on the final attempt, suppresses the exception.</summary>
            <param name="action">
                The code to be executed.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="action"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="action"/>.</param>
            <returns>
                True if <paramref name="action"/> returned without exceptions, false if an exception was caught and suppressed on every
                attempt.</returns>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetryThenIgnore``1(System.Action,System.Int32,System.Int32)">
            <summary>
                Evaluates the specified code. If the code throws <typeparamref name="TException"/>, retries the specified number
                of times. If the code still throws <typeparamref name="TException"/> on the final attempt, suppresses the
                exception. Doesn't catch any other exceptions.</summary>
            <param name="action">
                The code to be executed.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="action"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="action"/>.</param>
            <returns>
                True if <paramref name="action"/> returned without exceptions, false if <typeparamref name="TException"/> was caught and
                suppressed on every attempt.</returns>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetryThenDefault``1(System.Func{``0},``0,System.Int32,System.Int32)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws any exceptions, retries the specified
                number of times. If the code still throws on the final attempt, returns <paramref name="default"/>
                instead.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="default">
                Value to return in case of failure.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="func"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="func"/>.</param>
        </member>
        <member name="M:RT.Util.Ut.OnExceptionRetryThenDefault``2(System.Func{``0},``0,System.Int32,System.Int32)">
            <summary>
                Evaluates the specified code and returns its result. If the code throws <typeparamref name="TException"/>, retries
                the specified number of times. If the code still throws <typeparamref name="TException"/> on the final attempt,
                returns <paramref name="default"/> instead. Doesn't catch any other exceptions.</summary>
            <param name="func">
                The code to be executed.</param>
            <param name="default">
                Value to return in case of failure.</param>
            <param name="attempts">
                The maximum number of times to retry <paramref name="func"/> before giving up.</param>
            <param name="delayMs">
                Delay, in milliseconds, before retrying <paramref name="func"/>.</param>
        </member>
        <member name="M:RT.Util.Ut.Parallel(System.Action[])">
            <summary>
                Runs all of the specified actions in parallel, each in a thread of its own.</summary>
            <param name="actions">
                Actions to run.</param>
        </member>
        <member name="M:RT.Util.Ut.Parallel(System.Int32,System.Action[])">
            <summary>
                Runs the specified actions partly in parallel by using no more than the specified maximum number of threads.</summary>
            <param name="maxSimultaneous">
                Maximum number of concurrent threads allowed.</param>
            <param name="actions">
                Actions to run.</param>
        </member>
        <member name="M:RT.Util.Ut.ParallelForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Runs the specified action in parallel for each item in the input collection.</summary>
            <typeparam name="T">
                Type of the items in the collection.</typeparam>
            <param name="items">
                Input collection of items to pass to the action.</param>
            <param name="action">
                Action to run for each element.</param>
        </member>
        <member name="M:RT.Util.Ut.ParallelForEach``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0})">
            <summary>
                Runs the specified action in parallel for each item in the input collection, using no more than the specified
                maximum number of threads.</summary>
            <typeparam name="T">
                Type of the items in the collection.</typeparam>
            <param name="items">
                Input collection of items to pass to the action.</param>
            <param name="maxSimultaneous">
                Maximum number of concurrent threads allowed.</param>
            <param name="action">
                Action to run for each element.</param>
        </member>
        <member name="M:RT.Util.Ut.ParallelSelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
                Runs the specified function in parallel for each item in the input collection and returns a collection
                containing the concatenation of all the results of the function calls.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="items"/>.</typeparam>
            <typeparam name="TResult">
                The type of the elements of the sequence returned by <paramref name="selector"/>.</typeparam>
            <param name="items">
                Input collection of items to pass to the function.</param>
            <param name="selector">
                Function that returns a collection for each input item.</param>
        </member>
        <member name="M:RT.Util.Ut.ParallelSelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
                Runs the specified function in parallel for each item in the input collection and returns a collection
                containing the concatenation of all the results of the function calls.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="items"/>.</typeparam>
            <typeparam name="TResult">
                The type of the elements of the sequence returned by <paramref name="selector"/>.</typeparam>
            <param name="items">
                Input collection of items to pass to the function.</param>
            <param name="maxSimultaneous">
                Maximum number of concurrent threads allowed.</param>
            <param name="selector">
                Function that returns a collection for each input item.</param>
        </member>
        <member name="M:RT.Util.Ut.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Runs the specified function in parallel for each item in the input collection and returns a collection
                containing the results of the function calls.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="items"/>.</typeparam>
            <typeparam name="TResult">
                The type of the elements returned by <paramref name="selector"/>.</typeparam>
            <param name="items">
                Input collection of items to pass to the function.</param>
            <param name="selector">
                Function that returns a result object for each input item.</param>
        </member>
        <member name="M:RT.Util.Ut.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1})">
            <summary>
                Runs the specified function in parallel for each item in the input collection and returns a collection
                containing the results of the function calls.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="items"/>.</typeparam>
            <typeparam name="TResult">
                The type of the elements returned by <paramref name="selector"/>.</typeparam>
            <param name="items">
                Input collection of items to pass to the function.</param>
            <param name="maxSimultaneous">
                Maximum number of concurrent threads allowed.</param>
            <param name="selector">
                Function that returns a result object for each input item.</param>
        </member>
        <member name="M:RT.Util.Ut.ReduceRequiredSet``1(System.Collections.Generic.IEnumerable{``0},System.Func{RT.Util.Ut.ReduceRequiredSetState{``0},System.Boolean},System.Boolean,System.Boolean)">
            <summary>
                Given a set of values and a function that returns true when given this set, will efficiently remove items from
                this set which are not essential for making the function return true. The relative order of items is
                preserved. This method cannot generally guarantee that the result is optimal, but for some types of functions
                the result will be guaranteed optimal.</summary>
            <typeparam name="T">
                Type of the values in the set.</typeparam>
            <param name="items">
                The set of items to reduce.</param>
            <param name="test">
                The function that examines the set. Must always return the same value for the same set.</param>
            <param name="breadthFirst">
                A value selecting a breadth-first or a depth-first approach. Depth-first is best at quickly locating a single
                value which will be present in the final required set. Breadth-first is best at quickly placing a lower bound
                on the total number of individual items in the required set.</param>
            <param name="skipConsistencyTest">
                When the function is particularly slow, you might want to set this to true to disable calls which are not
                required to reduce the set and are only there to ensure that the function behaves consistently.</param>
            <returns>
                A hopefully smaller set of values that still causes the function to return true.</returns>
        </member>
        <member name="T:RT.Util.Ut.ReduceRequiredSetState`1">
            <summary>
                Encapsulates the state of the <see cref="M:RT.Util.Ut.ReduceRequiredSet``1(System.Collections.Generic.IEnumerable{``0},System.Func{RT.Util.Ut.ReduceRequiredSetState{``0},System.Boolean},System.Boolean,System.Boolean)"/> algorithm and exposes statistics about it.</summary>
        </member>
        <member name="F:RT.Util.Ut.ReduceRequiredSetState`1.Ranges">
            <summary>Internal; do not use.</summary>
        </member>
        <member name="F:RT.Util.Ut.ReduceRequiredSetState`1.Items">
            <summary>Internal; do not use.</summary>
        </member>
        <member name="F:RT.Util.Ut.ReduceRequiredSetState`1.ExcludedRange">
            <summary>Internal; do not use.</summary>
        </member>
        <member name="F:RT.Util.Ut.ReduceRequiredSetState`1.IncludedRange">
            <summary>Internal; do not use.</summary>
        </member>
        <member name="P:RT.Util.Ut.ReduceRequiredSetState`1.DefinitelyRequired">
            <summary>
                Enumerates every item that is known to be in the final required set. "Definitely" doesn't mean that there
                exists no subset resulting in "true" without these members. Rather, it means that the algorithm will
                definitely return these values, and maybe some others too.</summary>
        </member>
        <member name="P:RT.Util.Ut.ReduceRequiredSetState`1.PartitionsCount">
            <summary>
                Gets the current number of partitions containing uncertain items. The more of these, the slower the
                algorithm will converge from here onwards.</summary>
        </member>
        <member name="P:RT.Util.Ut.ReduceRequiredSetState`1.SmallestPartitionSize">
            <summary>
                Gets the number of items in the smallest partition. This is the value that is halved upon a successful
                depth-first iteration.</summary>
        </member>
        <member name="P:RT.Util.Ut.ReduceRequiredSetState`1.LargestPartitionSize">
            <summary>
                Gets the number of items in the largest partition. This is the value that is halved upon a successful
                breadth-first iteration.</summary>
        </member>
        <member name="P:RT.Util.Ut.ReduceRequiredSetState`1.ItemsRemaining">
            <summary>Gets the total number of items about which the algorithm is currently undecided.</summary>
        </member>
        <member name="P:RT.Util.Ut.ReduceRequiredSetState`1.SetToTest">
            <summary>Gets the set of items for which the function should be evaluated in the current step.</summary>
        </member>
        <member name="M:RT.Util.Ut.GetCustomAttributes``1(System.Enum)">
            <summary>
                Returns the set of custom attributes of the specified <typeparamref name="TAttribute"/> type that are attached
                to the declaration of the enum value represented by <paramref name="enumValue"/>.</summary>
            <typeparam name="TAttribute">
                The type of the custom attributes to retrieve.</typeparam>
            <param name="enumValue">
                The enum value for which to retrieve the custom attributes.</param>
            <returns>
                An array containing the custom attributes, or <c>null</c> if <paramref name="enumValue"/> does not correspond
                to a declared value.</returns>
            <remarks>
                This method keeps an internal cache forever.</remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="enumValue"/> is <c>null</c>.</exception>
        </member>
        <member name="M:RT.Util.Ut.GetCustomAttribute``1(System.Enum)">
            <summary>
                Returns the single custom attribute of the specified <typeparamref name="TAttribute"/> type that is attached
                to the declaration of the enum value represented by <paramref name="enumValue"/>, or <c>null</c> if there is
                no such attribute.</summary>
            <typeparam name="TAttribute">
                The type of the custom attribute to retrieve.</typeparam>
            <param name="enumValue">
                The enum value for which to retrieve the custom attribute.</param>
            <returns>
                The custom attribute, or <c>null</c> if the enum value does not have a custom attribute of the specified type
                attached to it. If <paramref name="enumValue"/> does not correspond to a declared enum value, or there is more
                than one custom attribute of the same type, an exception is thrown.</returns>
            <remarks>
                This method uses <see cref="M:RT.Util.Ut.GetCustomAttributes``1(System.Enum)"/>, which keeps an internal cache
                forever.</remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="enumValue"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                There is more than one custom attribute of the specified type attached to the enum value declaration.</exception>
        </member>
        <member name="M:RT.Util.Ut.IsDefault``1(``0)">
            <summary>Returns true if this value is equal to the default value for this type.</summary>
        </member>
        <member name="M:RT.Util.Ut.CreateDelegate(System.Object,System.Reflection.MethodInfo)">
            <summary>
                Creates a delegate using Action&lt;,*&gt; or Func&lt;,*&gt; depending on the number of parameters of the
                specified method.</summary>
            <param name="firstArgument">
                Object to call the method on, or null for static methods.</param>
            <param name="method">
                The method to call.</param>
        </member>
        <member name="M:RT.Util.Ut.RunMain(System.Action,System.Action{System.Exception},System.Action{System.Exception})">
            <summary>
                Execute the core of the application. In debug mode, exceptions are passed through untouched. In release mode, all
                exceptions are caught, including those on other threads, and passed on to the specified handlers. Also, the main thread
                is given the name "Main".</summary>
            <param name="main">
                A method which executes the core of the application.</param>
            <param name="onUnhandledMain">
                Method called in case the main method throws an unhandled exception.</param>
            <param name="onUnhandledThread">
                Method called in case a thread other than the one executing the main method throws an unhandled exception. If null,
                <paramref name="onUnhandledMain"/> will be called instead.</param>
        </member>
        <member name="M:RT.Util.Ut.RunMain(System.Func{System.Int32},System.Func{System.Exception,System.Int32},System.Action{System.Exception})">
            <summary>
                Execute the core of the application. In debug mode, exceptions are passed through untouched. In release mode, all
                exceptions are caught, including those on other threads, and passed on to the specified handlers. Also, the main thread
                is given the name "Main".</summary>
            <param name="main">
                A method which executes the core of the application.</param>
            <param name="onUnhandledMain">
                Method called in case the main method throws an unhandled exception. The return value is what this method will return.</param>
            <param name="onUnhandledThread">
                Method called in case a thread other than the one executing the main method throws an unhandled exception. If null,
                <paramref name="onUnhandledMain"/> will be called instead, and its return value will be ignored.</param>
        </member>
        <member name="M:RT.Util.Ut.Tic">
            <summary>
                Starts / resets a simple performance timer. Returns the number of seconds elapsed since the last call to <see
                cref="M:RT.Util.Ut.Tic"/>, or zero if this is the first call. See also <see cref="M:RT.Util.Ut.Toc"/>.</summary>
        </member>
        <member name="M:RT.Util.Ut.Toc">
            <summary>Returns the number of seconds elapsed since the last call to <see cref="M:RT.Util.Ut.Tic"/>.</summary>
        </member>
        <member name="T:RT.Util.DiffOp">
            <summary>Indicates insertions and deletions in the output of <see cref="M:RT.Util.Ut.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.ValueTuple{``0,RT.Util.DiffOp}}})"/>.</summary>
        </member>
        <member name="F:RT.Util.DiffOp.Del">
            <summary>Indicates that the relevant item has been deleted.</summary>
        </member>
        <member name="F:RT.Util.DiffOp.None">
            <summary>Indicates that the relevant item has not changed.</summary>
        </member>
        <member name="F:RT.Util.DiffOp.Ins">
            <summary>Indicates that the relevant item has been inserted.</summary>
        </member>
        <member name="T:RT.Util.FuncStructStruct`2">
            <summary>Provides a function delegate that accepts only value types as input and return types.</summary>
        </member>
        <member name="T:RT.Util.FuncStructClass`2">
            <summary>Provides a function delegate that accepts only value types as input and only reference types as return types.</summary>
        </member>
        <member name="T:RT.Util.FuncClassStruct`2">
            <summary>Provides a function delegate that accepts only reference types as input and only value types as return types.</summary>
        </member>
        <member name="T:RT.Util.FuncClassClass`2">
            <summary>Provides a function delegate that accepts only reference types as input and return types.</summary>
        </member>
        <member name="T:RT.Util.FuncClass`2">
            <summary>Provides a function delegate that accepts only reference types as input.</summary>
        </member>
        <member name="T:RT.Util.FuncStruct`2">
            <summary>Provides a function delegate that accepts only value types as input.</summary>
        </member>
        <member name="T:RT.Util.TicTocCycles">
            <summary>
                Provides a more accurate way to measure the amount of CPU time consumed by a thread, using the new
                QueryThreadCycleTime call introduced in Vista. Unlike <see cref="M:RT.Util.Ut.Tic"/>, this measures in unspecified units,
                and only counts the times when this thread is actually in possession of a CPU time slice.</summary>
        </member>
        <member name="M:RT.Util.TicTocCycles.#ctor">
            <summary>
                Constructor. For the results to be valid, this class must be instantiated on the same thread on which the
                measurements are to be made.</summary>
        </member>
        <member name="M:RT.Util.TicTocCycles.Tic">
            <summary>
                Starts / resets the timer. Returns the the amount of CPU time consumed by this thread only since the last call
                to <see cref="M:RT.Util.TicTocCycles.Tic"/>, or zero if this is the first call.</summary>
        </member>
        <member name="M:RT.Util.TicTocCycles.Toc">
            <summary>Returns the amount of CPU time consumed by this thread only since the last call to <see cref="M:RT.Util.TicTocCycles.Tic"/>.</summary>
        </member>
        <member name="T:RT.Util.Waiter">
            <summary>
                Helps limit the rate of an action to be within all of the defined rate limits, by suspending the calling thread until
                the action may be executed without exceeding any of the limits. Warning: this class is not thread-safe!</summary>
        </member>
        <member name="F:RT.Util.Waiter.Limits">
            <summary>A list of limits to be observed. The waiter will ensure that *all* of these limits are satisfied.</summary>
        </member>
        <member name="P:RT.Util.Waiter.Log">
            <summary>Whenever a wait is triggered, a warning is reported through this logger.</summary>
        </member>
        <member name="M:RT.Util.Waiter.#ctor(RT.Util.WaiterLimit[])">
            <summary>
                Constructor.</summary>
            <param name="limits">
                The limits to be observed.</param>
        </member>
        <member name="M:RT.Util.Waiter.#ctor(RT.Util.LoggerBase,RT.Util.WaiterLimit[])">
            <summary>
                Constructor.</summary>
            <param name="log">
                Whenever a wait is triggered, a warning is reported through this logger.</param>
            <param name="limits">
                The limits to be observed.</param>
        </member>
        <member name="M:RT.Util.Waiter.WaitIfNecessary">
            <summary>
                Call this method every time before performing the limited action. If the action would exceed any of the limits,
                the call will block until the action can be performed without exceeding any limits.</summary>
        </member>
        <member name="T:RT.Util.WaiterLimit">
            <summary>
                Defines a rate limit for use with <see cref="T:RT.Util.Waiter"/>, as an absolute maximum number of occurrences permitted in the
                specified time interval.</summary>
        </member>
        <member name="P:RT.Util.WaiterLimit.Interval">
            <summary>Time interval to which the limit applies.</summary>
        </member>
        <member name="P:RT.Util.WaiterLimit.MaxOccurrences">
            <summary>Maximum number of occurrences allowed per time interval.</summary>
        </member>
        <member name="M:RT.Util.WaiterLimit.#ctor(System.TimeSpan,System.Int32)">
            <summary>
                Constructor.</summary>
            <param name="interval">
                Time interval to which the limit applies.</param>
            <param name="maxOccurrences">
                Maximum number of occurrences allowed per time interval.</param>
        </member>
        <member name="T:RT.Util.WinAPI">
            <summary>WinAPI function wrappers</summary>
        </member>
        <member name="F:RT.Util.WinAPI.PerformanceFreq">
            <summary>
                This field is statically initialised by calling QueryPerformanceFrequency. It contains the frequency of the
                performance counter for the current system.</summary>
        </member>
        <member name="M:RT.Util.WinAPI.DisableGeneralProtectionFaultErrorBox">
            <summary>
                Normally an unhandled exception will result in Windows showing a generic error dialog, while keeping the process
                alive and stopped. This method will disable that: an unhandled exception will result in the process terminating
                quietly.</summary>
        </member>
        <member name="T:RT.Util.WinAPI.MessageBeepType">
            <summary>Specifies a sound to be played back when displaying a message dialog.</summary>
        </member>
        <member name="F:RT.Util.WinAPI.MessageBeepType.Default">
            <summary>Specifies the default sound.</summary>
        </member>
        <member name="F:RT.Util.WinAPI.MessageBeepType.Ok">
            <summary>Specifies the OK sound.</summary>
        </member>
        <member name="F:RT.Util.WinAPI.MessageBeepType.Error">
            <summary>Specifies the error sound.</summary>
        </member>
        <member name="F:RT.Util.WinAPI.MessageBeepType.Question">
            <summary>Specifies the question sound.</summary>
        </member>
        <member name="F:RT.Util.WinAPI.MessageBeepType.Warning">
            <summary>Specifies the warning sound.</summary>
        </member>
        <member name="F:RT.Util.WinAPI.MessageBeepType.Information">
            <summary>Specifies the information sound.</summary>
        </member>
        <member name="T:RT.Util.WinAPI.KeyboardHookProc">
            <summary>Defines the callback type for a keyboard hook procedure.</summary>
        </member>
        <member name="M:RT.Util.WinAPI.SetWindowsHookEx(System.Int32,RT.Util.WinAPI.KeyboardHookProc,System.IntPtr,System.UInt32)">
            <summary>
                Sets the windows hook, do the desired event, one of hInstance or threadId must be non-null</summary>
            <param name="idHook">
                The id of the event you want to hook</param>
            <param name="callback">
                The callback.</param>
            <param name="hInstance">
                The handle you want to attach the event to, can be null</param>
            <param name="threadId">
                The thread you want to attach the event to, can be null</param>
            <returns>
                a handle to the desired hook</returns>
        </member>
        <member name="M:RT.Util.WinAPI.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Unhooks the windows hook.</summary>
            <param name="hInstance">
                The hook handle that was returned from SetWindowsHookEx</param>
            <returns>
                True if successful, false otherwise</returns>
        </member>
        <member name="M:RT.Util.WinAPI.CallNextHookEx(System.IntPtr,System.Int32,System.Int32,RT.Util.WinAPI.KeyboardHookStruct@)">
            <summary>
                Calls the next hook.</summary>
            <param name="idHook">
                The hook id</param>
            <param name="nCode">
                The hook code</param>
            <param name="wParam">
                The wparam.</param>
            <param name="lParam">
                The lparam.</param>
            <returns/>
        </member>
        <member name="M:RT.Util.WinAPI.LoadLibrary(System.String)">
            <summary>
                Loads the library.</summary>
            <param name="lpFileName">
                Name of the library</param>
            <returns>
                A handle to the library</returns>
        </member>
        <member name="M:RT.Util.WinAPI.GetConsoleWindow">
            <summary>
                Returns the window handle of the console window associated with the current process, or IntPtr.Zero if there is no
                console window.</summary>
        </member>
        <member name="M:RT.Util.WinAPI.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
                Shows or hides the window identified by <paramref name="hWnd"/>. For <paramref name="nCmdShow"/>, use <see
                cref="F:RT.Util.WinAPI.SW_SHOW"/> et al.</summary>
        </member>
        <member name="M:RT.Util.WinAPI.GetFocusedControlInActiveWindow(System.IntPtr)">
            <summary>
                Retrieves the window handle of the focused control in the currently active window.</summary>
            <param name="ownHandle">
                The handle to one of your own windows.</param>
        </member>
    </members>
</doc>
