<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RT.Serialization</name>
    </assembly>
    <members>
        <member name="T:RT.Serialization.Classify">
            <summary>
                Provides static methods to represent objects of (almost) arbitrary classes in various formats (such as XML or
                JSON) and to restore such objects again. See the remarks section for features and limitations.</summary>
            <remarks>
                <para>
                    By default, when serializing a custom class, Classify persists the value of all instance fields, including
                    private, inherited and compiler-generated ones. It does not persist static members or the result of property
                    getters. Each field is persisted under a name that is the field’s name minus any leading underscores.
                    Compiler-generated fields for automatically-implemented properties are instead named after the
                    automatically-implemented property’s name minus any leading underscores.</para>
                <para>
                    Classify can also generate representations of basic types such as <c>string</c>, <c>int</c>, <c>bool</c>, etc.</para>
                <para>
                    Features:</para>
                <list type="bullet">
                    <item><description>
                        Classify fully supports all the built-in types which are keywords in C# except <c>object</c> and
                        <c>dynamic</c>. It also supports <c>DateTime</c>, all enum types, <c>Tuple&lt;...&gt;</c> and <see
                        cref="T:System.Collections.Generic.KeyValuePair`2"/>.</description></item>
                    <item><description>
                        Classify fully supports classes and structs that contain only fields of the above types as well as fields
                        whose type is itself such a class or struct.</description></item>
                    <item><description>
                        Classify has special handling for classes that implement <see cref="T:System.Collections.Generic.IDictionary`2"/>, where
                        <c>TKey</c> and <c>TValue</c> must be type also supported by Classify. If a field containing a dictionary
                        is of a concrete type, that type is maintained, but its extra fields are not persisted. If the field is of
                        the interface type <see cref="T:System.Collections.Generic.IDictionary`2"/> itself, the type <see cref="T:System.Collections.Generic.Dictionary`2"/> is used to reconstruct the object.</description></item>
                    <item><description>
                        Classify has special handling for classes that implement <see cref="T:System.Collections.Generic.ICollection`1"/>, where <c>T</c> must
                        be a type also supported by Classify. If the field is of a concrete type, that type is maintained, but its
                        extra fields are not persisted. If the field is of the interface type <see cref="T:System.Collections.Generic.ICollection`1"/> or <see
                        cref="T:System.Collections.Generic.IList`1"/>, the type <see cref="T:System.Collections.Generic.List`1"/> is used to reconstruct the object. If the type also
                        implements <see cref="T:System.Collections.Generic.IDictionary`2"/>, the special handling for that takes precedence.</description></item>
                    <item><description>
                        Classify also specially handles <see cref="T:System.Collections.Generic.Stack`1"/> and <see cref="T:System.Collections.Generic.Queue`1"/> because they do not
                        implement <see cref="T:System.Collections.Generic.ICollection`1"/>. Types derived from these are not supported (but are serialized as
                        if they weren’t a derived type).</description></item>
                    <item><description>
                        Classify supports fields of declared type <c>object</c> just as long as the value stored in it is of a
                        supported type.</description></item>
                    <item><description>
                        Classify handles values of the type of the serialized form specially. For example, if you are serializing
                        to XML using <see cref="T:System.Xml.Linq.XElement"/>, serializing an actual <see
                        cref="T:System.Xml.Linq.XElement"/> object generates the XML directly; if you are classifying to JSON, the
                        same goes for JSON value objects, etc.</description></item>
                    <item><description>
                        For classes that don’t implement any of the above-mentioned collection interfaces, Classify supports
                        polymorphism. The actual type of an instance is persisted if it is different from the declared type.</description></item>
                    <item><description>
                        Classify supports auto-implemented properties. It uses the name of the property rather than the hidden
                        auto-generated field, although the field’s value is persisted. All other properties are ignored.</description></item>
                    <item><description>
                        Classify ignores the order of fields in a class. For example, XML tags or JSON dictionary keys are mapped
                        to fields by their names; their order is considered immaterial.</description></item>
                    <item><description>
                        Classify silently discards unrecognized XML tags/JSON dictionary keys instead of throwing errors. This is
                        by design because it enables the programmer to remove a field from a class without invalidating objects
                        previously persisted.</description></item>
                    <item><description>
                        Classify silently ignores missing elements. A field whose element is missing retains the value assigned to
                        it by the parameterless constructor. This is by design because it enables the programmer to add a new
                        field to a class (and to specify a default initialization value for it) without invalidating objects
                        previously persisted.</description></item>
                    <item><description>
                        The following custom attributes can be used to alter Classify’s behavior. See the custom attribute class’s
                        documentation for more information: <see cref="T:RT.Serialization.ClassifyIgnoreAttribute"/>, <see
                        cref="T:RT.Serialization.ClassifyIgnoreIfAttribute"/>, <see cref="T:RT.Serialization.ClassifyIgnoreIfDefaultAttribute"/>, <see
                        cref="T:RT.Serialization.ClassifyIgnoreIfEmptyAttribute"/>. Any attribute that can be used on a field, can equally well be
                        used on an auto-implemented property, but not on any other properties.</description></item>
                    <item><description>
                        Classify maintains object identity and correctly handles cycles in the object graph. Only <c>string</c>s
                        are exempt from this.</description></item>
                    <item><description>
                        Classify can make use of type substitutions. See <see cref="T:RT.Serialization.IClassifySubstitute`2"/> for
                        more information.</description></item>
                    <item><description>
                        Classify allows you to pre-/post-process the serialized form and/or the serialized objects. See <see
                        cref="T:RT.Serialization.IClassifyObjectProcessor"/>, <see cref="T:RT.Serialization.IClassifyObjectProcessor`1"/>, <see
                        cref="T:RT.Serialization.IClassifyTypeProcessor"/> and <see cref="T:RT.Serialization.IClassifyTypeProcessor`1"/> for more information.</description></item></list>
                <para>
                    Limitations:</para>
                <list type="bullet">
                    <item><description>
                        Classify requires that every type involved have a parameterless constructor, although it can be private.
                        This parameterless constructor is executed with all its side-effects before each object is reconstructed.
                        An exception is made when a field in an object already has a non-null instance assigned to it by the
                        constructor; in such cases, the object is reused.</description></item>
                    <item><description>
                        If a field is of type <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/>, or any class that implements either of these, polymorphism is not supported, and nor is any
                        information stored in those classes. In particular, this means that the comparer used by a <see
                        cref="T:System.Collections.Generic.SortedDictionary`2"/> is not persisted. However, if the containing class’s constructor
                        assigned a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> with a comparer, that instance, and hence its
                        comparer, is reused.</description></item>
                    <item><description>
                        Classify is not at all optimized for speed or memory efficiency.</description></item></list></remarks>
        </member>
        <member name="F:RT.Serialization.Classify.DefaultOptions">
            <summary>
                Options used when null is passed to methods that take options. Make sure not to modify this instance if any
                thread in the application might be in the middle of using <see cref="T:RT.Serialization.Classify"/>; ideally the options shoud be
                set once during startup and never changed after that.</summary>
        </member>
        <member name="M:RT.Serialization.Classify.DeserializeFile``2(System.String,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Reconstructs an object of the specified type from the specified file.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <typeparam name="T">
                Type of object to read.</typeparam>
            <param name="filename">
                Path and filename of the file to read from.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.Classify.DeserializeFile``1(System.Type,System.String,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Reconstructs an object of the specified type from the specified file.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <param name="type">
                Type of object to read.</param>
            <param name="filename">
                Path and filename of the file to read from.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.Classify.Deserialize``2(``0,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Reconstructs an object of the specified type from the specified serialized form.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <typeparam name="T">
                Type of object to reconstruct.</typeparam>
            <param name="elem">
                Serialized form to reconstruct object from.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.Classify.Deserialize``1(System.Type,``0,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Reconstructs an object of the specified type from the specified serialized form.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <param name="type">
                Type of object to reconstruct.</param>
            <param name="elem">
                Serialized form to reconstruct object from.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.Classify.DeserializeIntoObject``2(``0,``1,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Reconstructs an object of the specified type from the specified serialized form by applying the values to an
                existing instance of the type.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <typeparam name="T">
                Type of object to reconstruct.</typeparam>
            <param name="element">
                Serialized form to reconstruct object from.</param>
            <param name="intoObject">
                Object to assign values to in order to reconstruct the original object.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
        </member>
        <member name="M:RT.Serialization.Classify.DeserializeFileIntoObject``1(System.String,System.Object,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Reconstructs an object from the specified file by applying the values to an existing instance of the desired
                type. The type of object is inferred from the object passed in.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <param name="filename">
                Path and filename of the file to read from.</param>
            <param name="intoObject">
                Object to assign values to in order to reconstruct the original object. Also determines the type of object
                expected.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
        </member>
        <member name="M:RT.Serialization.Classify.SerializeToFile``2(``1,System.String,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Stores the specified object in a file with the given path and filename.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <typeparam name="T">
                Type of the object to store.</typeparam>
            <param name="saveObject">
                Object to store in a file.</param>
            <param name="filename">
                Path and filename of the file to be created. If the file already exists, it is overwritten.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
        </member>
        <member name="M:RT.Serialization.Classify.SerializeToFile``1(System.Type,System.Object,System.String,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Stores the specified object in a file with the given path and filename.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <param name="saveType">
                Type of the object to store.</param>
            <param name="saveObject">
                Object to store in a file.</param>
            <param name="filename">
                Path and filename of the file to be created. If the file already exists, it is overwritten.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
        </member>
        <member name="M:RT.Serialization.Classify.Serialize``2(``1,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Converts the specified object into a serialized form.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <typeparam name="T">
                Type of object to convert.</typeparam>
            <param name="saveObject">
                Object to be serialized.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
            <returns>
                The serialized form generated from the object.</returns>
        </member>
        <member name="M:RT.Serialization.Classify.Serialize``1(System.Type,System.Object,RT.Serialization.IClassifyFormat{``0},RT.Serialization.ClassifyOptions)">
            <summary>
                Converts the specified object into a serialized form.</summary>
            <typeparam name="TElement">
                Type of the serialized form (see <paramref name="format"/>).</typeparam>
            <param name="saveType">
                Type of object to convert.</param>
            <param name="saveObject">
                Object to be serialized.</param>
            <param name="format">
                Implementation of a Classify format.</param>
            <param name="options">
                Options.</param>
            <returns>
                The serialized form generated from the object.</returns>
        </member>
        <member name="F:RT.Serialization.Classify.Classifier`1.CollectionCategory.Array">
            <summary>Array types such as <c>T[]</c>, <c>T[,]</c> etc.</summary>
        </member>
        <member name="F:RT.Serialization.Classify.Classifier`1.CollectionCategory.Stack">
            <summary><see cref="T:System.Collections.Generic.Stack`1"/>.</summary>
        </member>
        <member name="F:RT.Serialization.Classify.Classifier`1.CollectionCategory.Queue">
            <summary><see cref="T:System.Collections.Generic.Queue`1"/>.</summary>
        </member>
        <member name="F:RT.Serialization.Classify.Classifier`1.CollectionCategory.SimpleKeyedDictionary">
            <summary>
                <see cref="T:System.Collections.Generic.Dictionary`2"/>, where <c>TKey</c> is something that <see cref="T:RT.Serialization.ExactConvert"/>
                can convert to and from <c>string</c>. This is the only <see cref="T:RT.Serialization.Classify.Classifier`1.CollectionCategory"/> that is
                serialized by <see cref="M:RT.Serialization.IClassifyFormat`1.FormatDictionary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,`0}})"/> instead of <see
                cref="M:RT.Serialization.IClassifyFormat`1.FormatList(System.Boolean,System.Collections.Generic.IEnumerable{`0})"/>.</summary>
        </member>
        <member name="F:RT.Serialization.Classify.Classifier`1.CollectionCategory.Other">
            <summary>
                All other implementations of <see cref="T:System.Collections.Generic.ICollection`1"/>, including any <see cref="T:System.Collections.Generic.Dictionary`2"/> not already covered by <see cref="F:RT.Serialization.Classify.Classifier`1.CollectionCategory.SimpleKeyedDictionary"/>.</summary>
        </member>
        <member name="M:RT.Serialization.Classify.Classifier`1.deserialize(System.Type,`0,System.Object,System.Boolean)">
            <summary>
                Deserializes an object from its serialized form.</summary>
            <param name="declaredType">
                The type to deserialize to.</param>
            <param name="elem">
                The serialized form.</param>
            <param name="already">
                An object that we may potentially re-use (e.g. the object already stored in the field when deserializing a
                field inside an outer object).</param>
            <param name="enforceEnums">
                <c>true</c> if <c>[ClassifyEnforceEnums]</c> semantics are in effect for this object.</param>
        </member>
        <member name="M:RT.Serialization.Classify.Classifier`1.deserializeIntoDictionary(System.Type,System.Type,`0,System.Object,System.Boolean)">
            <summary>
                Deserializes a simple-keyed dictionary from its serialized form.</summary>
            <param name="keyType">
                The type of the keys in the dictionary.</param>
            <param name="valueType">
                The type of the values in the dictionary.</param>
            <param name="elem">
                The serialized form.</param>
            <param name="already">
                A dictionary instance to populate. This must not be <c>null</c>.</param>
            <param name="enforceEnums">
                <c>true</c> if <c>[ClassifyEnforceEnums]</c> semantics are in effect for this object.</param>
        </member>
        <member name="M:RT.Serialization.Classify.Classifier`1.deserializeIntoArray(System.Type,System.Type,`0,System.Array,System.Boolean)">
            <summary>
                Deserializes a (single- or multi-dimensional) array from its serialized form.</summary>
            <param name="type">
                The array type.</param>
            <param name="valueType">
                The type of the values in the array.</param>
            <param name="elem">
                The serialized form.</param>
            <param name="already">
                An array to populate. This may be <c>null</c>, in which case a new array is instantiated.</param>
            <param name="enforceEnums">
                <c>true</c> if <c>[ClassifyEnforceEnums]</c> semantics are in effect for this object.</param>
        </member>
        <member name="M:RT.Serialization.Classify.Classifier`1.deserializeIntoCollection(System.Type,RT.Serialization.Classify.Classifier{`0}.CollectionCategory,`0,System.Object,System.Boolean)">
            <summary>
                Deserializes a collection from its serialized form. This includes dictionaries not already covered by <see
                cref="M:RT.Serialization.Classify.Classifier`1.deserializeIntoDictionary(System.Type,System.Type,`0,System.Object,System.Boolean)"/>, but not arrays, which are covered by <see
                cref="M:RT.Serialization.Classify.Classifier`1.deserializeIntoArray(System.Type,System.Type,`0,System.Array,System.Boolean)"/>.</summary>
            <param name="valueType">
                The type of the values in the array.</param>
            <param name="cat">
                The category of collection.</param>
            <param name="elem">
                The serialized form.</param>
            <param name="already">
                A collection instance to populate. This must not be <c>null</c>.</param>
            <param name="enforceEnums">
                <c>true</c> if <c>[ClassifyEnforceEnums]</c> semantics are in effect for this object.</param>
        </member>
        <member name="M:RT.Serialization.Classify.Classifier`1.tryGetCollectionInfo(System.Type,System.Type@,System.Type@)">
            <summary>
                Determines whether <paramref name="type"/> is a supported collection type, and if so, which category of
                collections it belongs to.</summary>
            <param name="type">
                The type to examine.</param>
            <param name="keyType">
                Receives the type of the keys if <paramref name="type"/> turns out to be a dictionary.</param>
            <param name="valueType">
                Receives the type of the values if <paramref name="type"/> turns out to be a collection.</param>
            <returns>
                <c>null</c> if the type is not a supported collection type, otherwise the category of collection.</returns>
        </member>
        <member name="M:RT.Serialization.Classify.PostBuildStep``1(RT.PostBuild.IPostBuildReporter)">
            <summary>
                Performs safety checks to ensure that a specific type doesn't cause Classify exceptions. Run this method as a
                post-build step to ensure reliability of execution. For an example of use, see <see
                cref="M:RT.PostBuild.PostBuildChecker.RunPostBuildChecks(System.String,System.Reflection.Assembly[])"/>.</summary>
            <typeparam name="T">
                The type that must be Classify-able.</typeparam>
            <param name="rep">
                Object to report post-build errors to.</param>
        </member>
        <member name="M:RT.Serialization.Classify.PostBuildStep(System.Type,RT.PostBuild.IPostBuildReporter)">
            <summary>
                Performs safety checks to ensure that a specific type doesn't cause Classify exceptions. Run this method as a
                post-build step to ensure reliability of execution. For an example of use, see <see
                cref="M:RT.PostBuild.PostBuildChecker.RunPostBuildChecks(System.String,System.Reflection.Assembly[])"/>.</summary>
            <param name="type">
                The type that must be Classify-able.</param>
            <param name="rep">
                Object to report post-build errors to.</param>
        </member>
        <member name="T:RT.Serialization.IClassifyObjectProcessor`1">
            <summary>
                Contains methods to process an object and/or the associated serialized form before or after <see cref="T:RT.Serialization.Classify"/>
                (de)serializes it. To have effect, this interface must be implemented by the object being serialized.</summary>
            <typeparam name="TElement">
                Type of the serialized form.</typeparam>
            <remarks>
                This interface requires that the object type being serialized or deserialized implements it. If this is not
                possible, use <see cref="T:RT.Serialization.IClassifyTypeProcessor`1"/> instead.</remarks>
            <seealso cref="T:RT.Serialization.IClassifyObjectProcessor"/>
        </member>
        <member name="M:RT.Serialization.IClassifyObjectProcessor`1.BeforeSerialize">
            <summary>
                Pre-processes this object before <see cref="T:RT.Serialization.Classify"/> serializes it. This method is automatically invoked by
                <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
        </member>
        <member name="M:RT.Serialization.IClassifyObjectProcessor`1.AfterSerialize(`0)">
            <summary>
                Post-processes the serialization produced by <see cref="T:RT.Serialization.Classify"/> for this object. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="element">
                The serialized form produced for this object. All changes made to it are final and will appear in <see
                cref="T:RT.Serialization.Classify"/>’s output.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyObjectProcessor`1.BeforeDeserialize(`0)">
            <summary>
                Pre-processes a serialized form before <see cref="T:RT.Serialization.Classify"/> restores the object from it. The object’s fields
                have not yet been populated when this method is called. This method is automatically invoked by <see
                cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="element">
                The serialized form from which this object is about to be restored. All changes made to it will affect how the
                object is restored.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyObjectProcessor`1.AfterDeserialize(`0)">
            <summary>
                Post-processes this object after <see cref="T:RT.Serialization.Classify"/> has restored it from serialized form. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="element">
                The serialized form from which this object was restored. Changes made to this will have no effect on the
                deserialization.</param>
        </member>
        <member name="T:RT.Serialization.IClassifyObjectProcessor">
            <summary>
                Contains methods to process an object before or after <see cref="T:RT.Serialization.Classify"/> (de)serializes it, irrespective of
                the serialization format used. To have effect, this interface must be implemented by the object being serialized.</summary>
            <remarks>
                This interface requires that the object type being serialized or deserialized implements it. If this is not
                possible, use <see cref="T:RT.Serialization.IClassifyTypeProcessor"/> instead.</remarks>
            <seealso cref="T:RT.Serialization.IClassifyObjectProcessor`1"/>
        </member>
        <member name="M:RT.Serialization.IClassifyObjectProcessor.BeforeSerialize">
            <summary>
                Pre-processes this object before <see cref="T:RT.Serialization.Classify"/> serializes it. This method is automatically invoked by
                <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
        </member>
        <member name="M:RT.Serialization.IClassifyObjectProcessor.AfterDeserialize">
            <summary>
                Post-processes this object after <see cref="T:RT.Serialization.Classify"/> has restored it from serialized form. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
        </member>
        <member name="T:RT.Serialization.IClassifyTypeProcessor`1">
            <summary>
                Contains methods to process all objects of a specific type and/or their serialized forms before or after <see
                cref="T:RT.Serialization.Classify"/> serializes/deserializes them to/from a specific Classify format. To use this, create a type that
                implements this interface and then pass an instance of that type to <see
                cref="M:RT.Serialization.ClassifyOptions.AddTypeProcessor``1(System.Type,RT.Serialization.IClassifyTypeProcessor{``0})"/>.</summary>
            <typeparam name="TElement">
                Type of the serialized form. For example, for an XML-based ClassifyFormat, this might be <see
                cref="T:System.Xml.Linq.XElement"/>.</typeparam>
            <remarks>
                This interface has no effect when implemented by the object being serialized or deserialized. For that, use <see
                cref="T:RT.Serialization.IClassifyObjectProcessor`1"/>.</remarks>
            <seealso cref="T:RT.Serialization.IClassifyTypeProcessor"/>
        </member>
        <member name="M:RT.Serialization.IClassifyTypeProcessor`1.BeforeSerialize(System.Object)">
            <summary>
                Pre-processes the object before <see cref="T:RT.Serialization.Classify"/> serializes it. This method is automatically invoked by
                <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="obj">
                The object about to be serialized.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyTypeProcessor`1.AfterSerialize(System.Object,`0)">
            <summary>
                Post-processes the serialization produced by <see cref="T:RT.Serialization.Classify"/> for this object. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="obj">
                The object that has just been serialized.</param>
            <param name="element">
                The serialized form produced for this object. All changes made to it are final and will appear in <see
                cref="T:RT.Serialization.Classify"/>’s output.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyTypeProcessor`1.BeforeDeserialize(`0)">
            <summary>
                Pre-processes a serialized form before <see cref="T:RT.Serialization.Classify"/> restores the object from it. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="element">
                The serialized form from which this object is about to be restored. All changes made to it will affect how the
                object is restored.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyTypeProcessor`1.AfterDeserialize(System.Object,`0)">
            <summary>
                Post-processes an object after <see cref="T:RT.Serialization.Classify"/> has restored it from serialized form. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="obj">
                The deserialized object.</param>
            <param name="element">
                The serialized form from which this object was restored. Changes made to this will have no effect on the
                deserialization.</param>
        </member>
        <member name="T:RT.Serialization.IClassifyTypeProcessor">
            <summary>
                Contains methods to process all objects of a specific type and/or their serialized forms before or after <see
                cref="T:RT.Serialization.Classify"/> serializes/deserializes them, regardless of the Classify format. To use this, create a type that
                implements this interface and then pass an instance of that type to <see
                cref="M:RT.Serialization.ClassifyOptions.AddTypeProcessor(System.Type,RT.Serialization.IClassifyTypeProcessor)"/>.</summary>
            <remarks>
                This interface has no effect when implemented by the object being serialized or deserialized. For that, use <see
                cref="T:RT.Serialization.IClassifyObjectProcessor"/>.</remarks>
            <seealso cref="T:RT.Serialization.IClassifyTypeProcessor`1"/>
        </member>
        <member name="M:RT.Serialization.IClassifyTypeProcessor.BeforeSerialize(System.Object)">
            <summary>
                Pre-processes the object before <see cref="T:RT.Serialization.Classify"/> serializes it. This method is automatically invoked by
                <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="obj">
                The object about to be serialized.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyTypeProcessor.AfterDeserialize(System.Object)">
            <summary>
                Post-processes an object after <see cref="T:RT.Serialization.Classify"/> has restored it from serialized form. This method is
                automatically invoked by <see cref="T:RT.Serialization.Classify"/> and should not be called directly.</summary>
            <param name="obj">
                The deserialized object.</param>
        </member>
        <member name="T:RT.Serialization.IClassifySubstitute`2">
            <summary>
                Defines how to substitute a type for another type during Classify serialization/deserialization. Pass an instance
                of a type implementing this interface to <see cref="M:RT.Serialization.ClassifyOptions.AddTypeSubstitution``2(RT.Serialization.IClassifySubstitute{``0,``1})"/> to
                use the substitution throughout a serialization or deserialization, or use it in a <see
                cref="T:RT.Serialization.ClassifySubstituteAttribute"/> to limit it to a specific field or automatically-implemented property.</summary>
            <typeparam name="TTrue">
                The type that is actually used for instances in memory.</typeparam>
            <typeparam name="TSubstitute">
                The substitute type to be used for purposes of classifying and declassifying.</typeparam>
        </member>
        <member name="M:RT.Serialization.IClassifySubstitute`2.ToSubstitute(`0)">
            <summary>
                Converts an instance of the “real” type to a substitute instance to be classified.</summary>
            <param name="instance">
                An instance of the “real” type to be substituted.</param>
            <returns>
                The converted object to use in classifying.</returns>
        </member>
        <member name="M:RT.Serialization.IClassifySubstitute`2.FromSubstitute(`1)">
            <summary>
                Converts a substitute instance, generated by declassifying, back to the “real” type.</summary>
            <param name="instance">
                An instance of the substituted type, provided by Classify.</param>
            <returns>
                The converted object to put into the real type.</returns>
            <exception cref="T:RT.Serialization.ClassifyDesubstitutionFailedException">
                Implementors may throw this exception to communicate to Classify that the value is invalid and should be
                disregarded, rather than causing the entire deserialization to fail.</exception>
        </member>
        <member name="T:RT.Serialization.ClassifyDesubstitutionFailedException">
            <summary>
                When thrown by an implementation of <see cref="M:RT.Serialization.IClassifySubstitute`2.FromSubstitute(`1)"/>, communicates to Classify that the value is invalid and should be
                disregarded. Any other exception would be passed on by Classify and would thus cause the entire deserialization to
                fail.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifyDesubstitutionFailedException.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifyEqualityComparer">
            <summary>
                Provides an equality comparer that implements the default behavior for <see
                cref="P:RT.Serialization.ClassifyOptions.SerializationEqualityComparer"/>.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyEqualityComparer.Instance">
            <summary>Provides the singleton instance of this class.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifyEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
                Compares two arbitrary objects.</summary>
            <param name="x">
                First object to compare.</param>
            <param name="y">
                Second object to compare.</param>
            <returns>
                <c>false</c> for strings and object reference equality for everything else.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyEqualityComparer.GetHashCode(System.Object)">
            <summary>
                Returns a hash code for the specified object.</summary>
            <param name="obj">
                The object to generate a hash code for.</param>
            <returns>
                The object’s own hash code.</returns>
        </member>
        <member name="T:RT.Serialization.ClassifyOptions">
            <summary>Provides the ability to specify some options for use by <see cref="T:RT.Serialization.Classify"/>.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyOptions.EnforceEnums">
            <summary>
                This option is only relevant if the value you are deserializing is an enum value or a collection or dictionary
                involving enum keys or values. If <c>true</c>, only enum values declared in the enum type are allowed (as if
                it were a field with <see cref="T:RT.Serialization.ClassifyEnforceEnumAttribute"/>). Enum values inside of objects are not
                affected by this option (but only by <see cref="T:RT.Serialization.ClassifyEnforceEnumAttribute"/>).</summary>
            <seealso cref="T:RT.Serialization.ClassifyEnforceEnumAttribute"/>
        </member>
        <member name="P:RT.Serialization.ClassifyOptions.SerializationEqualityComparer">
            <summary>
                Provides a means to customize Classify’s definition of object equality, i.e. to control which objects are
                serialized as references to each other and which ones are duplicated in the serialized form.</summary>
            <remarks>
                <para>
                    The default comparer treats all strings as different, thus causing them to be re-serialized each time even
                    if they are in fact equal. All other objects are tested for reference equality. This way, object reference
                    equality is preserved across serializing and deserializing.</para>
                <para>
                    An alternative may be, for example, to assign <c>EqualityComparer&lt;object&gt;.Default</c> here. This
                    would treat objects as equal if they implement <c>IEquatable&lt;T&gt;</c> and deem each other as equal.
                    Such a strategy would improve deduplication of information in the serialized form, but would cause the
                    deserialized form to re-use object instances more than the original did.</para></remarks>
        </member>
        <member name="M:RT.Serialization.ClassifyOptions.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifyOptions.AddTypeSubstitution``2(RT.Serialization.IClassifySubstitute{``0,``1})">
            <summary>
                Adds a type substitution, instructing <see cref="T:RT.Serialization.Classify"/> to use a different type when serializing or
                deserializing a specific type.</summary>
            <typeparam name="TTrue">
                The true type to be replaced by a substitute type.</typeparam>
            <typeparam name="TSubstitute">
                The substitute type to use during serialization/deserialization instead of <typeparamref name="TTrue"/>.</typeparam>
            <param name="substitutor">
                An implementation of <see cref="T:RT.Serialization.IClassifySubstitute`2"/> that defines the substitution.</param>
            <returns>
                The same options object, allowing chaining.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyOptions.AddTypeProcessor``1(System.Type,RT.Serialization.IClassifyTypeProcessor{``0})">
            <summary>
                Adds an instruction to <see cref="T:RT.Serialization.Classify"/> to run every object of type <paramref name="type"/> through the
                specified <see cref="T:RT.Serialization.IClassifyTypeProcessor`1"/> implementation before and after serializing or
                deserializing to/from a Classify format that uses <typeparamref name="TElement"/> as its serialized form.</summary>
            <typeparam name="TElement">
                The type of the serialized form. For example, for an XML-based ClassifyFormat, this might be <see
                cref="T:System.Xml.Linq.XElement"/>.</typeparam>
            <param name="type">
                The type of objects to run through the type processor.</param>
            <param name="processor">
                An implementation of <see cref="T:RT.Serialization.IClassifyTypeProcessor`1"/> that defines the operations to perform
                before/after serialization/deserialization.</param>
            <returns>
                The same options object, allowing chaining.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyOptions.AddTypeProcessor(System.Type,RT.Serialization.IClassifyTypeProcessor)">
            <summary>
                Adds an instruction to <see cref="T:RT.Serialization.Classify"/> to run every object of type <paramref name="type"/> through the
                specified <see cref="T:RT.Serialization.IClassifyTypeProcessor"/> implementation before and after serializing or deserializing.</summary>
            <param name="type">
                The type of objects to run through the type processor.</param>
            <param name="processor">
                An implementation of <see cref="T:RT.Serialization.IClassifyTypeProcessor"/> that defines the operations to perform before/after
                serialization/deserialization.</param>
            <returns>
                The same options object, allowing chaining.</returns>
        </member>
        <member name="T:RT.Serialization.ClassifyIgnoreAttribute">
            <summary>
                If this attribute is used on a field or automatically-implemented property, it is ignored by <see
                cref="T:RT.Serialization.Classify"/>. Data stored in this field or automatically-implemented property is not persisted.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifySubstituteAttribute">
            <summary>
                Indicates that the value stored in this field or automatically-implemented property should be converted to another
                type when serializing and back when deserializing. This takes precedence over any type substitution configured in
                a <see cref="T:RT.Serialization.ClassifyOptions"/> object.</summary>
        </member>
        <member name="P:RT.Serialization.ClassifySubstituteAttribute.ConverterType">
            <summary>Gets the type used to perform the type substitution.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifySubstituteAttribute.#ctor(System.Type)">
            <summary>
                Constructor.</summary>
            <param name="converterType">
                Specifies a type that implements <see cref="T:RT.Serialization.IClassifySubstitute`2"/>, where <c>TTrue</c> must
                be the exact type of the field or automatically-implemented property bearing this attribute.</param>
        </member>
        <member name="T:RT.Serialization.ClassifyIgnoreIfDefaultAttribute">
            <summary>
                If this attribute is used on a field or automatically-implemented property, <see cref="T:RT.Serialization.Classify"/> omits its
                serialization if the value is null, 0, false, etc. If it is used on a type, it applies to all fields and
                automatically-implemented properties in the type. See also remarks.</summary>
            <remarks>
                <list type="bullet">
                    <item><description>
                        Using this together with <see cref="T:RT.Serialization.ClassifyIgnoreIfEmptyAttribute"/> will cause the distinction between
                        null and an empty collection to be lost. However, a collection containing only null elements is persisted
                        correctly.</description></item>
                    <item><description>
                        Do not use this custom attribute on a field that has a non-default value set in the containing class’s
                        constructor. Doing so will cause a serialized null/0/false value to revert to that constructor value upon
                        deserialization.</description></item></list></remarks>
        </member>
        <member name="T:RT.Serialization.ClassifyIgnoreIfEmptyAttribute">
            <summary>
                If this attribute is used on a field or automatically-implemented property, <see cref="T:RT.Serialization.Classify"/> omits its
                serialization if that serialization would be completely empty. If it is used on a type, it applies to all
                collection-type fields in the type. See also remarks.</summary>
            <remarks>
                Using this together with <see cref="T:RT.Serialization.ClassifyIgnoreIfDefaultAttribute"/> will cause the distinction between null
                and an empty collection to be lost. However, a collection containing only null elements is persisted correctly.</remarks>
        </member>
        <member name="T:RT.Serialization.ClassifyIgnoreIfAttribute">
            <summary>
                If this attribute is used on a field or automatically-implemented property, <see cref="T:RT.Serialization.Classify"/> omits its
                serialization if the field’s or property’s value is equal to the specified value. See also remarks.</summary>
            <remarks>
                Using this together with <see cref="T:RT.Serialization.ClassifyIgnoreIfDefaultAttribute"/> will cause the distinction between the
                type’s default value and the specified value to be lost.</remarks>
        </member>
        <member name="M:RT.Serialization.ClassifyIgnoreIfAttribute.#ctor(System.Object)">
            <summary>
                Constructs an <see cref="T:RT.Serialization.ClassifyIgnoreIfAttribute"/> instance.</summary>
            <param name="value">
                Specifies the value which causes a field or automatically-implemented property to be ignored.</param>
        </member>
        <member name="P:RT.Serialization.ClassifyIgnoreIfAttribute.Value">
            <summary>Retrieves the value which causes a field or automatically-implemented property to be ignored.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifyNotNullAttribute">
            <summary>
                Specifies that Classify shall not set this field or automatically-implemented property to <c>null</c>. If the
                serialized form is <c>null</c>, the field or automatically-implemented property is instead left at the default
                value assigned by the object’s default constructor.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifyEnforceEnumAttribute">
            <summary>
                To be used on a field or automatically-implemented property of an enum type or a collection involving an enum
                type. Specifies that Classify shall not allow integer values that are not explicitly declared in the relevant enum
                type. If the serialized form is such an integer, fields or automatically-implemented properties of an enum type
                are instead left at the default value assigned by the object’s default constructor, while in collections, the
                relevant element is omitted (changing the size of the collection). If the enum type has the [Flags] attribute,
                bitwise combinations of the declared values are allowed.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifyNameConvention">
            <summary>Specifies a naming convention for Classify to follow.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyNameConvention.UpperCamelcase">
            <summary>Capitalize each word and upper-case the first letter.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyNameConvention.LowerCamelcase">
            <summary>Capitalize each word, but lower-case the first letter.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyNameConvention.Lowercase">
            <summary>Use all lower-case.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyNameConvention.Uppercase">
            <summary>Use all upper-case.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyNameConvention.DelimiterSeparated">
            <summary>Use the underscore character (<c>_</c>) to delimit words.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifyNameAttribute">
            <summary>
                Use on a field or automatically-implemented property to override the default naming behavior of Classify. When
                used on a type, affects the names of fields and automatically-implemented properties declared in that type, not
                the type name.</summary>
        </member>
        <member name="P:RT.Serialization.ClassifyNameAttribute.SerializedName">
            <summary>
                An alternative name to use for this field in serialization, or <c>null</c> to use <see cref="P:RT.Serialization.ClassifyNameAttribute.Convention"/>
                instead.</summary>
        </member>
        <member name="P:RT.Serialization.ClassifyNameAttribute.Convention">
            <summary>
                The naming convention to apply to the field names, or <c>null</c> to use <see cref="P:RT.Serialization.ClassifyNameAttribute.SerializedName"/> instead.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifyNameAttribute.#ctor(RT.Serialization.ClassifyNameConvention)">
            <summary>
                Constructor.</summary>
            <param name="convention">
                The naming convention to apply to the field names.</param>
        </member>
        <member name="M:RT.Serialization.ClassifyNameAttribute.#ctor(System.String)">
            <summary>
                Constructor.</summary>
            <param name="serializedName">
                An alternative name to use for this field in serialization.</param>
        </member>
        <member name="T:RT.Serialization.ExactConvert">
             <summary>
             <para>
             Provides functionality similar to <see cref="T:System.Convert"/>, but ensures that all conversions are lossless and roundtrippable.
             Whenever a conversion cannot be performed exactly, an <see cref="T:RT.Serialization.ExactConvertException"/> is thrown.
             </para>
             </summary>
             <remarks>
             <code>
             SUPPORTED TYPES
            
             Supported types are classified as follows. The categories are used in defining
             the behaviour of the various conversion types and are vital to understanding what
             to expect of the corner cases.
            
               Integer types:
                   standard - byte, sbyte, short, ushort, int, uint, long, ulong, or any enum type
                   bool - as integer this is defined exactly as 0 or 1
                   char - as integer this is the binary value of the char, identical to the "ushort" type
                   datetime - as integer, this is the number of ticks of the datetime as UTC.
                              The range is DateTime.MinValue.Ticks ... MaxValue.Ticks.
            
               Fractional types:
                   single, double
                   decimal
            
               String type:
                   string
            
               Unsupported type:
                   any other type not listed above
                   null reference (*ALWAYS* behaves exactly the same as if there
                                   was actually an object of an unsupported type)
            
             Definition of terms:
                 "succeed" / "fail" - these terms do not specify the method by which the outcome of
                     a conversion is conveyed. This is a separate aspect discussed later.
            
             ExactConvert only allows a conversion to succeed if a roundtrip conversion would result in
             at most a very small error. The "very small error" only exists when a Fractional
             type is the destination - in this case, ExactConvert picks the nearest
             representable value.
            
             A general trait of ExactConvert is that the rules are defined for whole source/destination type
             pairs. A necessary exception to this principle is conversion from string, due to the arbitrary
             nature of string values.
            
             As a consequence of the above principle, ExactConvert does not allow
             Fractional types to be converted to Integer types.
            
             Something to beware of: some of the built-in conversions use national strings for
             values, e.g. for True/False/Infinity etc. To avoid any issues like programs crashing
             on Spanish computers but not on British ones, the following strings are hard-coded.
             All conversions _from_ strings are case-insensitive.
            
             * True
             * False
             * Inf
             * NaN
             </code>
             </remarks>
        </member>
        <member name="M:RT.Serialization.ExactConvert.#cctor">
            <summary>
            Initialises the internally-used lookup tables for determining what kind
            of type is being dealt with (e.g. is this an unsigned type?)
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.Type)">
            <summary>
            Returns true if the specified type is one of the 8 built-in "true" integer types:
            the signed and unsigned 8, 16, 32 and 64-bit types.
            </summary>
            <param name="type">The type to be tested.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.TypeCode)">
            <summary>
            Returns true if the specified type is one of the 8 built-in "true" integer types:
            the signed and unsigned 8, 16, 32 and 64-bit types.
            </summary>
            <param name="typeCode">The code of the type to be tested - use <see cref="M:RT.Serialization.ExactConvert.GetTypeCode(System.Object)"/>
            to get the code of an object's type.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsTrueIntegerNullableType(System.Type)">
            <summary>
            Returns true if the specified type is a nullable form of one of the 8 built-in "true" integer types:
            the signed and unsigned 8, 16, 32 and 64-bit types.
            </summary>
            <param name="type">The type to be tested.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsIntegerCompatibleType(System.Type)">
            <summary>
            Returns true if the specified type is integer-compatible (in other words, a string of digits can be
            converted to it using <see cref="T:RT.Serialization.ExactConvert"/>). This includes all types that are <see cref="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.Type)"/>
            as well as DateTime, Char and Boolean.
            </summary>
            <param name="type">The type to be tested.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsIntegerCompatibleType(System.TypeCode)">
            <summary>
            Returns true if the specified type is integer-compatible (in other words, a string of digits can be
            converted to it using <see cref="T:RT.Serialization.ExactConvert"/>). This includes all types that are <see cref="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.Type)"/>
            as well as DateTime, Char and Boolean.
            </summary>
            <param name="typeCode">The code of the type to be tested - use <see cref="M:RT.Serialization.ExactConvert.GetTypeCode(System.Object)"/>
            to get the code of an object's type.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.UnboxIntegerToLong(System.Object)">
             <summary>
             C# does not allow a boxed integer type to be unboxed as anything other
             than the true type of the boxed integer. This utility function unboxes the
             integer as the correct type and then casts it to a long, returning the result.
            
             Throws an exception if the object is null or not one of the built-in integer
             types.
            
             Does not support unboxing of a ulong because the cast to long would be lossy
             and misleading. Will throw an exception when given a boxed ulong.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.UnboxIntegerToLong(System.Object,System.TypeCode)">
            <summary>
            A faster version of UnboxIntegerToLong(object) if the TypeCode is
            already provided. Behaviour is undefined if typeCode does not match
            the type of the object passed in.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.GetTypeCode(System.Object)">
             <summary>
             Crutches needed all around... TypeCode.Empty is described as the type code
             for "a null reference". Unfortunately the only way to retrieve a TypeCode
             is from a Type object, which can't represent the type of a null reference
             (well... actually one can't really talk about a _type_ of a _null_ reference
             in C# at all as far as I understand).
            
             Well anyway, wrapping up the rant, this function fills in the spot of a
             function that's clearly missing: Type.GetTypeCode(object), which returns
             TypeCode.Empty if asked to get the type of a null object.
            
             Something at the back of my mind tells me that there's one way of looking at
             this where the behaviour of the existing API would make sense... but really,
             I think this is how it really should have been since it is a lot more useful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsSupportedType(System.Type)">
            <summary>
            Returns true if the specified type is a supported type for converting to other
            types supported by <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsSupportedType(System.TypeCode)">
            <summary>
            Returns true if the specified type code is that of a supported type for converting to
            other types supported by <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Byte@)">
             <summary>
             Converts the specified object to a byte.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.UInt16@)">
             <summary>
             Converts the specified object to a ushort.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.UInt32@)">
             <summary>
             Converts the specified object to a uint.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.UInt64@)">
             <summary>
             Converts the specified object to a ulong.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.SByte@)">
             <summary>
             Converts the specified object to an sbyte.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Int16@)">
             <summary>
             Converts the specified object to a short.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Int32@)">
             <summary>
             Converts the specified object to an int.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Int64@)">
             <summary>
             Converts the specified object to a long.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Boolean@)">
             <summary>
             Converts the specified object to a bool.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
            
             If the value is one of the integer types, the exact conversion only succeeds
             if the value is in range, i.e. 0 or 1. If converting from a string, the string
             must be exactly (case-insensitive) equal to "True" or "False", or the conversion
             will fail.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Char@)">
             <summary>
             Converts the specified object to a char.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.DateTime@)">
             <summary>
             Converts the specified object to a DateTime.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
            
             When converting from string, supports a subset of the ISO 8601 formats - for
             more details see <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Single@)">
             <summary>
             Converts the specified object to a float.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Double@)">
             <summary>
             Converts the specified object to a double.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Decimal@)">
             <summary>
             Converts the specified object to a decimal.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.String@)">
             <summary>
             Converts the specified object to a string.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful, which in this case means null (!!!).
            
             Note that the result will only ever be false if the value is one of the
             unsupported types - all supported types can be converted to a string.
             (So can the unsupported ones but it's a different matter. Unsupported types
             are not supported by this method for consistency with the other overloads.)
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Type,System.Object,System.Object@)">
             <summary>
             Converts the specified object to the type <paramref name="toType"/>.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to null
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Boolean@)">
            <summary>
            Converts the specified object to a bool.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Byte@)">
            <summary>
            Converts the specified object to a byte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.SByte@)">
            <summary>
            Converts the specified object to an sbyte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Int16@)">
            <summary>
            Converts the specified object to a short.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.UInt16@)">
            <summary>
            Converts the specified object to a ushort.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Int32@)">
            <summary>
            Converts the specified object to an int.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.UInt32@)">
            <summary>
            Converts the specified object to a uint.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Int64@)">
            <summary>
            Converts the specified object to a long.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.UInt64@)">
            <summary>
            Converts the specified object to a ulong.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Single@)">
            <summary>
            Converts the specified object to a float.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Double@)">
            <summary>
            Converts the specified object to a double.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Decimal@)">
            <summary>
            Converts the specified object to a decimal.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.DateTime@)">
            <summary>
            Converts the specified object to a DateTime.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Char@)">
            <summary>
            Converts the specified object to a char.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.String@)">
            <summary>
            Converts the specified object to a string.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToBool(System.Object)">
            <summary>
            Converts the specified object to a bool.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToByte(System.Object)">
            <summary>
            Converts the specified object to a byte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToSByte(System.Object)">
            <summary>
            Converts the specified object to an sbyte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToShort(System.Object)">
            <summary>
            Converts the specified object to a short.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToUShort(System.Object)">
            <summary>
            Converts the specified object to a ushort.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToInt(System.Object)">
            <summary>
            Converts the specified object to an int.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToUInt(System.Object)">
            <summary>
            Converts the specified object to a uint.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToLong(System.Object)">
            <summary>
            Converts the specified object to a long.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToULong(System.Object)">
            <summary>
            Converts the specified object to a ulong.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToFloat(System.Object)">
            <summary>
            Converts the specified object to a float.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToDouble(System.Object)">
            <summary>
            Converts the specified object to a double.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToDecimal(System.Object)">
            <summary>
            Converts the specified object to a decimal.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToDateTime(System.Object)">
            <summary>
            Converts the specified object to a DateTime.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToChar(System.Object)">
            <summary>
            Converts the specified object to a char.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToString(System.Object)">
            <summary>
            Converts the specified object to a string.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Type,System.Object)">
            <summary>
            Converts the value to type <paramref name="toType"/>. Throws an
            <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To``1(System.Object)">
            <summary>
            Converts the value to type <typeparamref name="T"/>. Throws an
            <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="T:RT.Serialization.ExactConvert.ToNullable">
            <summary>
            Contains static methods to perform an exact conversion to a nullable type.
            These methods return null only if the input is null. A failed conversion
            results in an <see cref="T:RT.Serialization.ExactConvertException"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Bool(System.Object)">
            <summary>
            Converts the specified object to a nullable bool.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Byte(System.Object)">
            <summary>
            Converts the specified object to a nullable byte.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.SByte(System.Object)">
            <summary>
            Converts the specified object to an nullable sbyte.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Short(System.Object)">
            <summary>
            Converts the specified object to a nullable short.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.UShort(System.Object)">
            <summary>
            Converts the specified object to a nullable ushort.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Int(System.Object)">
            <summary>
            Converts the specified object to an nullable int.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.UInt(System.Object)">
            <summary>
            Converts the specified object to a nullable uint.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Long(System.Object)">
            <summary>
            Converts the specified object to a nullable long.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.ULong(System.Object)">
            <summary>
            Converts the specified object to a nullable ulong.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Float(System.Object)">
            <summary>
            Converts the specified object to a nullable float.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Double(System.Object)">
            <summary>
            Converts the specified object to a nullable double.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Decimal(System.Object)">
            <summary>
            Converts the specified object to a nullable decimal.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.DateTime(System.Object)">
            <summary>
            Converts the specified object to a nullable DateTime.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Char(System.Object)">
            <summary>
            Converts the specified object to a nullable char.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.String(System.Object)">
            <summary>
            Converts the specified object to a nullable string.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="T:RT.Serialization.ExactConvertException">
            <summary>
            Represents an exception thrown in the case of conversion failure when using <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvertException.#ctor(System.Object,System.Type)">
            <summary>
            Initialises an exception to represent conversion failure when using <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="T:RT.Serialization.IClassifyFormat`1">
            <summary>
                Used by <see cref="T:RT.Serialization.Classify"/> to serialize and deserialize objects. Implement this to enable serialization to a
                new format.</summary>
            <typeparam name="TElement">
                Type of the serialized form of an object or any sub-object.</typeparam>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.ReadFromStream(System.IO.Stream)">
            <summary>
                Reads the serialized form from a stream.</summary>
            <param name="stream">
                Stream to read from.</param>
            <returns>
                The serialized form read from the stream.</returns>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.WriteToStream(`0,System.IO.Stream)">
            <summary>
                Writes the serialized form to a stream.</summary>
            <param name="element">
                Serialized form to write to the stream.</param>
            <param name="stream">
                Stream to write to.</param>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.IsNull(`0)">
            <summary>
                Determines whether the specified element represents a <c>null</c> value.</summary>
            <remarks>
                This should return <c>true</c> if the element was generated by <see cref="M:RT.Serialization.IClassifyFormat`1.FormatNullValue"/> and <c>false</c>
                otherwise.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetSimpleValue(`0)">
            <summary>
                Called when Classify expects the element to be one of the following types: <c>byte</c>, <c>sbyte</c>,
                <c>short</c>, <c>ushort</c>, <c>int</c>, <c>uint</c>, <c>long</c>, <c>ulong</c>, <c>decimal</c>, <c>float</c>,
                <c>double</c>, <c>bool</c>, <c>char</c>, <c>string</c>, <c>DateTime</c> or an enum type. The implementation is
                free to return a value of any of these types, and Classify will automatically use <see cref="T:RT.Serialization.ExactConvert"/>
                to convert the value to the required target type.</summary>
            <remarks>
                This should decode values passed into <see cref="M:RT.Serialization.IClassifyFormat`1.FormatSimpleValue(System.Object)"/>, although it is acceptable if the type
                has changed, as long as <see cref="T:RT.Serialization.ExactConvert"/> will convert the decoded value back to the original value.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetSelfValue(`0)">
            <summary>
                Decodes the serialized form of the element type itself.</summary>
            <remarks>
                This should do the reverse of <see cref="M:RT.Serialization.IClassifyFormat`1.FormatSelfValue(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetList(`0,System.Nullable{System.Int32})">
            <summary>
                Decodes a list.</summary>
            <param name="element">
                The element to decode.</param>
            <param name="tupleSize">
                If null, a variable-length list is expected; otherwise, a fixed-length list (a tuple) is expected.</param>
            <returns>
                A collection containing the sub-elements contained in the list. The collection returned need not have the size
                specified by <paramref name="tupleSize"/>.</returns>
            <remarks>
                This should do the reverse of <see cref="M:RT.Serialization.IClassifyFormat`1.FormatList(System.Boolean,System.Collections.Generic.IEnumerable{`0})"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetKeyValuePair(`0,`0@,`0@)">
            <summary>
                Decodes a key-value pair.</summary>
            <param name="element">
                The element to decode.</param>
            <param name="key">
                Receives the key part of the pair.</param>
            <param name="value">
                Receives the value part of the pair.</param>
            <remarks>
                This should do the reverse of <see cref="M:RT.Serialization.IClassifyFormat`1.FormatKeyValuePair(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetDictionary(`0)">
            <summary>
                Decodes a dictionary.</summary>
            <param name="element">
                The element to decode.</param>
            <returns>
                A collection containing the key/value pairs in the dictionary. The keys in the returned collection are
                expected to be convertible to the correct type using <see cref="T:RT.Serialization.ExactConvert"/>.</returns>
            <remarks>
                This should decode values passed into <see cref="M:RT.Serialization.IClassifyFormat`1.FormatDictionary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,`0}})"/>, although it is acceptable if the type of
                the keys has changed. For example, all keys may be returned as <c>string</c>, as long as <see
                cref="T:RT.Serialization.ExactConvert"/> will convert that <c>string</c> back to the original value.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetRawData(`0)">
            <summary>
                Decodes a piece of raw data.</summary>
            <param name="element">
                The element to decode.</param>
            <returns>
                The raw data decoded.</returns>
            <remarks>
                This should decode values passed into <see cref="M:RT.Serialization.IClassifyFormat`1.FormatRawData(System.Byte[])"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.HasField(`0,System.String,System.String)">
            <summary>
                Determines whether the element is an object and contains a sub-element for the specified field.</summary>
            <param name="element">
                The element that may represent an object.</param>
            <param name="fieldName">
                The name of the field sought.</param>
            <param name="declaringType">
                The assembly-qualified name of the type that declares the field. (This can be null if the field name is unique
                within the type of the object being deserialized.)</param>
            <returns>
                <c>true</c> if <paramref name="element"/> is an object and has the specified field; <c>false</c> otherwise.</returns>
            <remarks>
                This should return <c>true</c> if <paramref name="element"/> represents an element generated by <see
                cref="M:RT.Serialization.IClassifyFormat`1.FormatObject(System.Collections.Generic.IEnumerable{RT.Serialization.ObjectFieldInfo{`0}})"/> in which the field with the specified <paramref name="fieldName"/> was present.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetField(`0,System.String,System.String)">
            <summary>
                Returns the sub-element pertaining to the specified field.</summary>
            <param name="element">
                The element that represents an object.</param>
            <param name="fieldName">
                The name of the field within the object whose sub-element is sought.</param>
            <param name="declaringType">
                The assembly-qualified name of the type that declares the field. (This can be null if the field name is unique
                within the type of the object being deserialized.)</param>
            <returns>
                The sub-element for the specified field.</returns>
            <remarks>
                <para>
                    Classify calls <see cref="M:RT.Serialization.IClassifyFormat`1.HasField(`0,System.String,System.String)"/> first for each field and only calls this method if <see
                    cref="M:RT.Serialization.IClassifyFormat`1.HasField(`0,System.String,System.String)"/> returned true.</para>
                <para>
                    This should return the same element that was passed into <see cref="M:RT.Serialization.IClassifyFormat`1.FormatObject(System.Collections.Generic.IEnumerable{RT.Serialization.ObjectFieldInfo{`0}})"/> for the same <paramref
                    name="fieldName"/>.</para></remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetType(`0,System.Boolean@)">
            <summary>
                Determines the type of the object stored in the specified element.</summary>
            <param name="element">
                The element that represents an object.</param>
            <param name="isFullType">
                Receives a value indicating whether the type is a fully-qualified type name or not. This value is ignored if
                the method returns <c>null</c>.</param>
            <returns>
                <c>null</c> if no type information was persisted in this element; otherwise, the decoded type name.</returns>
            <remarks>
                This should decode the information (the string and the boolean) encoded by <see cref="M:RT.Serialization.IClassifyFormat`1.FormatWithType(`0,System.String,System.Boolean)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.IsReference(`0)">
            <summary>
                Determines whether this element represents a reference to another object in the same serialized graph.</summary>
            <param name="element">
                The element to decode.</param>
            <returns>
                <c>true</c> if this element represents such a reference; <c>false</c> otherwise.</returns>
            <remarks>
                This should recognize elements generated by <see cref="M:RT.Serialization.IClassifyFormat`1.FormatReference(System.Int32)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.IsReferable(`0)">
            <summary>
                Determines whether this element represents an object that can be referred to by a reference element.</summary>
            <param name="element">
                The element to decode.</param>
            <returns>
                <c>true</c> if this element is referable; <c>false</c> otherwise.</returns>
            <remarks>
                This should recognize elements generated by <see cref="M:RT.Serialization.IClassifyFormat`1.FormatReferable(`0,System.Int32)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.GetReferenceID(`0)">
            <summary>
                Returns the ID encoded in this element. This is called only if <see cref="M:RT.Serialization.IClassifyFormat`1.IsReference(`0)"/> or <see
                cref="M:RT.Serialization.IClassifyFormat`1.IsReferable(`0)"/> returned <c>true</c>.</summary>
            <param name="element">
                The element to decode.</param>
            <returns>
                The ID encoded in this element.</returns>
            <remarks>
                This should return the same ID that was passed into <see cref="M:RT.Serialization.IClassifyFormat`1.FormatReference(System.Int32)"/> or <see
                cref="M:RT.Serialization.IClassifyFormat`1.FormatReferable(`0,System.Int32)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatNullValue">
            <summary>
                Generates an element that represents a <c>null</c> value.</summary>
            <returns>
                The serialized form of the <c>null</c> value.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.IsNull(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatSimpleValue(System.Object)">
            <summary>
                Generates an element that represents a <c>byte</c>, <c>sbyte</c>, <c>short</c>, <c>ushort</c>, <c>int</c>,
                <c>uint</c>, <c>long</c>, <c>ulong</c>, <c>decimal</c>, <c>float</c>, <c>double</c>, <c>bool</c>, <c>char</c>,
                <c>string</c>, <c>DateTime</c> or an enum value.</summary>
            <param name="value">
                The value to encode.</param>
            <returns>
                The serialized form of the <paramref name="value"/>.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetSimpleValue(`0)"/>, but need not necessarily decode to
                the same type, as long as <see cref="T:RT.Serialization.ExactConvert"/> will convert it to the correct value.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatSelfValue(`0)">
            <summary>
                Generates an element that represents a value of the same type as serialized elements.</summary>
            <param name="value">
                The value to encode.</param>
            <returns>
                The serialized form of the <paramref name="value"/>.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetSelfValue(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatList(System.Boolean,System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Generates an element that represents a list.</summary>
            <param name="isTuple">
                Specifies whether we are serializing a variable-length list, or a tuple (fixed-length list).</param>
            <param name="values">
                The values to put into list form.</param>
            <returns>
                The serialized list.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetList(`0,System.Nullable{System.Int32})"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatKeyValuePair(`0,`0)">
            <summary>
                Generates an element that represents a key-value pair.</summary>
            <param name="key">
                The element that represents the key.</param>
            <param name="value">
                The element that represents the value.</param>
            <returns>
                The serialized key-value pair.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetKeyValuePair(`0,`0@,`0@)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatDictionary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,`0}})">
            <summary>
                Generates an element that represents a dictionary.</summary>
            <param name="values">
                The key-value pairs that compose the dictionary. The keys may be <c>string</c>s, integers, or enum values.</param>
            <returns>
                The serialized dictionary.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetDictionary(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatObject(System.Collections.Generic.IEnumerable{RT.Serialization.ObjectFieldInfo{`0}})">
            <summary>
                Generates an element that represents an object with fields.</summary>
            <param name="fields">
                A collection of objects containing each fields’ identifying information and serialized value.</param>
            <returns>
                The serialized object.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.HasField(`0,System.String,System.String)"/> and <see cref="M:RT.Serialization.IClassifyFormat`1.GetField(`0,System.String,System.String)"/>, irrespective
                of the order in which the fields are provided in <paramref name="fields"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatRawData(System.Byte[])">
            <summary>
                Generates an element that represents raw data (<c>byte[]</c>).</summary>
            <param name="value">
                The raw data to store.</param>
            <returns>
                The serialized raw data.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetRawData(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatReference(System.Int32)">
            <summary>
                Generates an element that represents a reference to another object within the same serialized object graph.</summary>
            <param name="refId">
                The reference ID.</param>
            <returns>
                An element that represents a reference to another object with the specified <paramref name="refId"/>.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.IsReference(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatReferable(`0,System.Int32)">
            <summary>
                Converts an existing element (which may represent, for example, an object, list or dictionary) into one that
                can be referred to by a reference (see <see cref="M:RT.Serialization.IClassifyFormat`1.FormatReference(System.Int32)"/>).</summary>
            <param name="element">
                The original element to be converted.</param>
            <param name="refId">
                The reference ID.</param>
            <returns>
                A representation of the original <paramref name="element"/>, which additionally encodes the referable
                <paramref name="refId"/>.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.IsReferable(`0)"/> as well as all the other methods that
                would have also recognized the original <paramref name="element"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.FormatWithType(`0,System.String,System.Boolean)">
            <summary>
                Converts an existing element (which may represent, for example, an object, list or dictionary) into one that
                additionally knows its type.</summary>
            <param name="element">
                The original element to be converted.</param>
            <param name="type">
                A string that identifies the type of the object.</param>
            <param name="isFullType">
                A value indicating whether this is a fully-qualified type name or not.</param>
            <returns>
                A representation of the original <paramref name="element"/>, which additionally encodes the <paramref
                name="type"/>.</returns>
            <remarks>
                The returned element should be recognized by <see cref="M:RT.Serialization.IClassifyFormat`1.GetType(`0,System.Boolean@)"/> as well as all the other methods that would
                have also recognized the original <paramref name="element"/>.</remarks>
        </member>
        <member name="M:RT.Serialization.IClassifyFormat`1.ThrowMissingReferable(System.Int32)">
            <summary>
                Throws an InvalidOperationException informing the user that an element is a reference (<see
                cref="M:RT.Serialization.IClassifyFormat`1.IsReference(`0)"/>) but the corresponding referable has not been encountered while deserializing.</summary>
            <param name="refID">
                The numeric reference ID.</param>
        </member>
        <member name="T:RT.Serialization.ObjectFieldInfo`1">
            <summary>
                Encapsulates information about a field in an object and its value.</summary>
            <typeparam name="TElement">
                Type of serialized form used in <see cref="T:RT.Serialization.IClassifyFormat`1"/>.</typeparam>
        </member>
        <member name="P:RT.Serialization.ObjectFieldInfo`1.FieldName">
            <summary>The name of the field.</summary>
        </member>
        <member name="P:RT.Serialization.ObjectFieldInfo`1.DeclaringType">
            <summary>
                The assembly-qualified name of the type that declares the field, or null if the name of the field is unique
                within the object being serialized.</summary>
        </member>
        <member name="P:RT.Serialization.ObjectFieldInfo`1.Value">
            <summary>The value of the field.</summary>
        </member>
        <member name="M:RT.Serialization.ObjectFieldInfo`1.#ctor(System.String,System.String,`0)">
            <summary>
                Constructor.</summary>
            <param name="fieldName">
                The name of the field.</param>
            <param name="declaringType">
                The assembly-qualified name of the type that declares the field, or null if the name of the field is unique
                within the object being serialized.</param>
            <param name="value">
                The value of the field.</param>
        </member>
        <member name="T:RT.Util.ExtensionMethods.CollectionExtensions">
            <summary>
                Provides extension methods on various collection types or interfaces in the System.Collections.Generic namespace
                such as <see cref="T:System.Collections.Generic.Dictionary`2"/> and on arrays.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Contains``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>Determines whether the current HashSet-in-a-Dictionary contains the specified key and value.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.ContainsKeys``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1)">
            <summary>
                Determines whether the current two-level dictionary contains the specified combination of keys.</summary>
            <typeparam name="TKey1">
                Type of the first-level key.</typeparam>
            <typeparam name="TKey2">
                Type of the second-level key.</typeparam>
            <typeparam name="TValue">
                Type of values in the dictionary.</typeparam>
            <param name="source">
                Source dictionary to examine.</param>
            <param name="key1">
                The first key to check for.</param>
            <param name="key2">
                The second key to check for.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.TryGetValue``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2@)">
            <summary>
                Gets the value associated with the specified combination of keys.</summary>
            <typeparam name="TKey1">
                Type of the first-level key.</typeparam>
            <typeparam name="TKey2">
                Type of the second-level key.</typeparam>
            <typeparam name="TValue">
                Type of values in the dictionary.</typeparam>
            <param name="source">
                Source dictionary to examine.</param>
            <param name="key1">
                The first key to check for.</param>
            <param name="key2">
                The second key to check for.</param>
            <param name="value">
                When this method returns, the value associated with the specified keys, if the keys are found; otherwise, the
                default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
                <c>true</c> if the two-level dictionary contains an element with the specified combination of keys; otherwise,
                <c>false</c>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.DictionaryEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Compares two dictionaries for equality, member-wise. Two dictionaries are equal if they contain all the same
                key-value pairs.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.BinarySearch``2(System.Collections.Generic.SortedList{``0,``1},``0,System.Int32@,System.Int32@)">
            <summary>
                Performs a binary search for the specified key on a <see cref="T:System.Collections.Generic.SortedList`2"/>. When no match
                exists, returns the nearest indices for interpolation/extrapolation purposes.</summary>
            <remarks>
                If an exact match exists, index1 == index2 == the index of the match. If an exact match is not found, index1
                &lt; index2. If the key is less than every key in the list, index1 is int.MinValue and index2 is 0. If it's
                greater than every key, index1 = last item index and index2 = int.MaxValue. Otherwise index1 and index2 are
                the indices of the items that would surround the key were it present in the list.</remarks>
            <param name="list">
                List to operate on.</param>
            <param name="key">
                The key to look for.</param>
            <param name="index1">
                Receives the value of the first index (see remarks).</param>
            <param name="index2">
                Receives the value of the second index (see remarks).</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets a value from a dictionary by key. If the key does not exist in the dictionary, the default value is
                returned instead.</summary>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="key">
                Key to look up.</param>
            <param name="defaultVal">
                Value to return if <paramref name="key"/> is not contained in the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Nullable{``1})">
            <summary>
                Gets a value from a dictionary by key. If the key does not exist in the dictionary, the default value is
                returned instead.</summary>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="key">
                Key to look up.</param>
            <param name="defaultVal">
                Value to return if <paramref name="key"/> is not contained in the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Get``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2)">
            <summary>
                Gets a value from a two-level dictionary by key. If the keys don’t exist in the dictionary, the default value
                is returned instead.</summary>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="key1">
                Key to look up in the first level.</param>
            <param name="key2">
                Key to look up in the second level.</param>
            <param name="defaultVal">
                Value to return if key1 or key2 is not contained in the relevant dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts an <c>IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</c> into a <c>Dictionary&lt;TKey,
                TValue&gt;</c>.</summary>
            <param name="source">
                Source collection to convert to a dictionary.</param>
            <param name="comparer">
                An optional equality comparer to compare keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Subarray``1(``0[],System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Substring(System.Int32)"/>, but for arrays. Returns a new array containing all items from
                the specified <paramref name="startIndex"/> onwards.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="startIndex"/> is 0.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Subarray``1(``0[],System.Int32,System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Substring(System.Int32,System.Int32)"/>, but for arrays. Returns a new array containing <paramref
                name="length"/> items from the specified <paramref name="startIndex"/> onwards.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="startIndex"/> is 0 and <paramref name="length"/> is
                the length of the input array.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Remove``1(``0[],System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Remove(System.Int32)"/>, but for arrays. Returns a new array containing only the items
                before the specified <paramref name="startIndex"/>.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="startIndex"/> is the length of the array.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Remove``1(``0[],System.Int32,System.Int32)">
            <summary>
                Similar to <see cref="M:System.String.Remove(System.Int32,System.Int32)"/>, but for arrays. Returns a new array containing everything
                except the <paramref name="length"/> items starting from the specified <paramref name="startIndex"/>.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="length"/> is 0.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Insert``1(``0[],System.Int32,``0[])">
            <summary>
                Similar to <see cref="M:System.String.Insert(System.Int32,System.String)"/>, but for arrays. Returns a new array with the <paramref
                name="values"/> inserted starting from the specified <paramref name="startIndex"/>.</summary>
            <remarks>
                Returns a new copy of the array even if <paramref name="values"/> is empty.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Insert``1(``0[],System.Int32,``0)">
            <summary>
                Similar to <see cref="M:System.String.Insert(System.Int32,System.String)"/>, but for arrays and for a single value. Returns a new
                array with the <paramref name="value"/> inserted at the specified <paramref name="startIndex"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.SubarrayEquals``1(``0[],System.Int32,``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a subarray within the current array is equal to the specified other array.</summary>
            <param name="sourceArray">
                First array to examine.</param>
            <param name="sourceStartIndex">
                Start index of the subarray within the first array to compare.</param>
            <param name="otherArray">
                Array to compare the subarray against.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                True if the current array contains the specified subarray at the specified index; false otherwise.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.SubarrayEquals``1(``0[],System.Int32,``0[],System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether the two arrays contain the same content in the specified location.</summary>
            <param name="sourceArray">
                First array to examine.</param>
            <param name="sourceStartIndex">
                Start index of the subarray within the first array to compare.</param>
            <param name="otherArray">
                Second array to examine.</param>
            <param name="otherStartIndex">
                Start index of the subarray within the second array to compare.</param>
            <param name="length">
                Length of the subarrays to compare.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                True if the two arrays contain the same subarrays at the specified indexes; false otherwise.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.IndexOfSubarray``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Searches the current array for a specified subarray and returns the index of the first occurrence, or -1 if
                not found.</summary>
            <param name="sourceArray">
                Array in which to search for the subarray.</param>
            <param name="findWhat">
                Subarray to search for.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                The index of the first match, or -1 if no match is found.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.IndexOfSubarray``1(``0[],``0[],System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Searches the current array for a specified subarray and returns the index of the first occurrence, or -1 if
                not found.</summary>
            <param name="sourceArray">
                Array in which to search for the subarray.</param>
            <param name="findWhat">
                Subarray to search for.</param>
            <param name="startIndex">
                Index in <paramref name="sourceArray"/> at which to start searching.</param>
            <param name="sourceLength">
                Maximum length of the source array to search starting from <paramref name="startIndex"/>. The greatest index
                that can be returned is this minus the length of <paramref name="findWhat"/> plus <paramref
                name="startIndex"/>.</param>
            <param name="comparer">
                Optional equality comparer.</param>
            <returns>
                The index of the first match, or -1 if no match is found.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.CopyMerge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Creates a new dictionary containing the union of the key/value pairs contained in the specified dictionaries.
                Keys in <paramref name="second"/> overwrite keys in <paramref name="first"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Removes all entries from a dictionary that satisfy a specified predicate.</summary>
            <typeparam name="TKey">
                Type of the keys in the dictionary.</typeparam>
            <typeparam name="TVal">
                Type of the values in the dictionary.</typeparam>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="predicate">
                Specifies a predicate that determines which entries should be removed from the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveAllByKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
                Removes all entries from a dictionary whose keys satisfy a specified predicate.</summary>
            <typeparam name="TKey">
                Type of the keys in the dictionary.</typeparam>
            <typeparam name="TVal">
                Type of the values in the dictionary.</typeparam>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="predicate">
                Specifies a predicate that determines which entries should be removed from the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveAllByValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
                Removes all entries from a dictionary whose values satisfy a specified predicate.</summary>
            <typeparam name="TKey">
                Type of the keys in the dictionary.</typeparam>
            <typeparam name="TVal">
                Type of the values in the dictionary.</typeparam>
            <param name="dict">
                Dictionary to operate on.</param>
            <param name="predicate">
                Specifies a predicate that determines which entries should be removed from the dictionary.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Enqueues several values into a <see cref="T:System.Collections.Generic.Queue`1"/>.</summary>
            <typeparam name="T">
                Type of the elements in the queue.</typeparam>
            <param name="queue">
                Queue to insert items into.</param>
            <param name="values">
                Values to enqueue.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds several values into a <see cref="T:System.Collections.Generic.HashSet`1"/>.</summary>
            <typeparam name="T">
                Type of the elements in the hash set.</typeparam>
            <param name="set">
                The set to add the items to.</param>
            <param name="values">
                Values to add.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.RemoveRange``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes several values from a <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <typeparam name="T">
                Type of the elements in the list.</typeparam>
            <param name="list">
                The list to remove the items from.</param>
            <param name="values">
                Values to remove.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
                Projects each element of a sequence into a new form.</summary>
            <typeparam name="TInput">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A list of values to invoke the transform function on.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                A collection whose elements are the result of invoking the transform function on each element of <paramref
                name="source"/>.</returns>
            <remarks>
                This method replaces <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/> for the case where the input is an <see cref="T:System.Collections.Generic.IList`1"/> with an implementation that makes a
                subsequent <c>ToArray()</c> or <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
                Inverts the order of the elements in a sequence.</summary>
            <typeparam name="TInput">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A list of values to reverse.</param>
            <returns>
                A list whose elements correspond to those of the input sequence in reverse order.</returns>
            <remarks>
                This method replaces <see cref="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"/> for the case where the
                input is an <see cref="T:System.Collections.Generic.IList`1"/> with an implementation that makes a subsequent <c>ToArray()</c> or
                <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.ReverseInplace``1(``0[])">
            <summary>Reverses an array in-place and returns the same array.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CollectionExtensions.Pop``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
                Pops the specified number of elements from the stack. There must be at least that many items on the stack,
                otherwise an exception is thrown.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ListSelectIterator`2">
            <summary>
                Provides the implementation for <see cref="M:RT.Util.ExtensionMethods.CollectionExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})"/>.</summary>
            <typeparam name="TInput">
                The type of the elements of the original collection.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by the selector function.</typeparam>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1},System.Boolean)">
            <summary>
                Constructor.</summary>
            <param name="source">
                A list of values to invoke the transform function on.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="reversed">
                Specifies whether or not to reverse the order of elements.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.GetEnumerator">
            <summary>Returns an enumerator to iterate over the collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.ToArray">
            <summary>
                Creates an array from a projected list.</summary>
            <remarks>
                This implementation fulfills the same function as <c>Enumerable.ToArray()</c>, but is 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.ToList">
            <summary>
                Creates a new list from a projected list.</summary>
            <remarks>
                This implementation fulfills the same function as <c>Enumerable.ToList()</c>, but is 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.Select``1(System.Func{`1,``0})">
            <summary>
                Projects each element of a sequence into a new form.</summary>
            <typeparam name="TNewResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                A collection whose elements are the result of invoking the transform function on each element of the current
                projected list.</returns>
            <remarks>
                This method replaces <c>IEnumerable{T}.Select{TSource,
                TResult}(IEnumerable{TSource},Func{TSource,int,TResult})</c> for the case where the input is a
                <c>ListSelectIterator&lt;TInput, TResult&gt;</c> with an implementation that makes a subsequent
                <c>ToArray()</c> or <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ListSelectIterator`2.Reverse">
            <summary>
                Inverts the order of the elements in a sequence.</summary>
            <returns>
                A list whose elements correspond to those of the input sequence in reverse order.</returns>
            <remarks>
                This method replaces <see cref="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"/> for the case where the
                input is an <see cref="T:System.Collections.Generic.IList`1"/> with an implementation that makes a subsequent <c>ToArray()</c> or
                <c>ToList()</c> run 15% faster.</remarks>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IsoDateFormat">
            <summary>Defines one of several common date/time formats which are either ISO-8601 compatible or very slight deviations from it.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.HumanReadable">
            <summary>A delimited, readable format. Known as "extended" in ISO-8601. Example: <c>2007-12-31 21:15</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.Compact">
            <summary>A non-delimited compact format. Known as "basic" in ISO-8601. Example: <c>20071231T2115</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.CompactReadable">
            <summary>A non-delimited compact format with '-' instead of 'T'. Not ISO-8601, but supported by <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>. Example: <c>20071231-2115</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.FilenameReadable">
            <summary>A delimited, readable format without spaces usable in filenames. Not ISO-8601, and not supported by <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>. Example: <c>2007.12.31-21.15</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.Iso8601">
            <summary>The standard ISO-8601 format. Example: <c>2007-12-31T21:15</c>.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IsoDatePrecision">
            <summary>Defines a precision for a date/time stamp.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Days">
            <summary>Day precision: <c>2011-12-31</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Minutes">
            <summary>Minute precision: <c>2011-12-31 18:03</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Seconds">
            <summary>Second precision: <c>2011-12-31 18:03:15</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Milliseconds">
            <summary>Millisecond precision: <c>2011-12-31 18:03:15.123</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Full">
            <summary>The full .NET DateTime precision, which is seconds to 7 d.p. (100-nanosecond intervals): <c>2011-12-31 18:03:15.1234567</c></summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.DateTimeExtensions">
            <summary>
            Provides extension methods on the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.Nanosecond(System.DateTime)">
            <summary>
            Inexplicably, the DateTime type does not offer any way of retrieving the full precision
            of the underlying data other than via Ticks or the ToString method. This extension
            method fills in the void.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringCustom(System.DateTime,RT.Util.ExtensionMethods.IsoDatePrecision,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char},System.Boolean)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. The date/time components are always ordered from
            largest (year) to smallest (nanoseconds), and they are always specified as a fixed-width numeric value. The separators between
            the parts can be customized.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="precision">Which date/time components are to be included. The values are truncated, not rounded.</param>
            <param name="charInDate">The character to insert between years, months and days, or null for none.</param>
            <param name="charInTime">The character to insert between hours, minutes and seconds (including timezone offset), or null for none.</param>
            <param name="charBetween">The character to insert between the date and the time part, or null for none (which is never valid in ISO-8601).</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoString(System.DateTime,RT.Util.ExtensionMethods.IsoDatePrecision,RT.Util.ExtensionMethods.IsoDateFormat,System.Boolean)">
            <summary>Returns a string representation of the date/time in an ISO-8601 compatible (or very close) format.</summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="precision">Which date/time components are to be included. The values are truncated, not rounded.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringOptimal(System.DateTime,RT.Util.ExtensionMethods.IsoDateFormat,RT.Util.ExtensionMethods.IsoDatePrecision,RT.Util.ExtensionMethods.IsoDatePrecision,System.Boolean)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. The function will
            omit higher-precision parts whose values are zeroes, as permitted by the standard.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="minPrecision">Minimum precision of the resulting string. The actual precision is determined by what's available in the date/time, bounded by this parameter.</param>
            <param name="maxPrecision">Maximum precision of the resulting string. Any higher-precision parts are truncated.</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringRoundtrip(System.DateTime,RT.Util.ExtensionMethods.IsoDateFormat,RT.Util.ExtensionMethods.IsoDatePrecision)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. Use this if the result must be round-trippable
            without losing any information. The function will omit higher-precision parts whose values are zeroes, as permitted by the standard.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="minPrecision">Minimum precision of the resulting string. The actual precision is determined by what's available in the date/time, bounded by this parameter.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)">
            <summary>
            <para>Attempts to parse the specified string as an ISO-formatted DateTime. The formats supported are guided by ISO-8601, but do not match
            it exactly. Strings with no timezone information are parsed into DateTimeKind.Unspecified.</para>
            <para>ISO-8601 features not supported: day numbers; week numbers; time offsets; comma for decimal separation.</para>
            <para>Features supported not in ISO-8601: '-' separator for the basic format; date shortening; timezone marker for date-only strings.</para>
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ParseIso(System.String)">
            <summary>Parse the specified string as an ISO-formatted DateTime. See <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/> for more info.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ParseIsoNullable(System.String)">
            <summary>
            Parse the specified string as an ISO-formatted DateTime. Returns null if the string is null or cannot be parsed.
            See <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/> for more info.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToMilliseconds(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole milliseconds.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToSeconds(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole seconds.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToMinutes(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole minutes.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToDays(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole days.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IEnumerableExtensions">
            <summary>Provides extension methods on the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all pairs of elements from the source collection. For example, the
                input sequence 1, 2 yields the pairs [1,1], [1,2], [2,1], and [2,2].</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>Returns an enumeration of objects computed from all pairs of elements from the source collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.UniquePairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all unique pairs of distinct elements from the source collection.
                For example, the input sequence 1, 2, 3 yields the pairs [1,2], [1,3] and [2,3] only.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ConsecutivePairs``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
                Returns an enumeration of tuples containing all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is false, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is true.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectConsecutivePairs``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,``0,``1})">
            <summary>
                Enumerates all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is <c>false</c>, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is
                <c>true</c>.</param>
            <param name="selector">
                The selector function to run each consecutive pair through.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Sorts the elements of a sequence in ascending order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Splits the specified IEnumerable at every element that satisfies a specified predicate and returns a
                collection containing each sequence of elements in between each pair of such elements. The elements satisfying
                the predicate are not included.</summary>
            <param name="splitWhat">
                The collection to be split.</param>
            <param name="splitWhere">
                A predicate that determines which elements constitute the separators.</param>
            <returns>
                A collection containing the individual pieces taken from the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Adds a single element to the end of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing all the input elements, followed by the specified additional element.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds a single element to the start of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing the specified additional element, followed by all the input elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})"/>, but it is much faster if you intend to extract
                only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <returns>
                The given <see cref="T:System.Collections.Generic.IEnumerable`1"/> with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>, but it is much faster if you intend
                to extract only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <param name="comparer">
                An instance of <see cref="T:System.Collections.Generic.IComparer`1"/> specifying the comparison to use on the items.</param>
            <returns>
                The given IEnumerable&lt;T&gt; with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The list of items to permute.</param>
            <returns>
                A collection containing all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Subsequences``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
                Returns all subsequences of the specified lengths of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The sequence of items to generate subsequences of.</param>
            <param name="minLength">
                The minimum length of a subsequence to return. Must be between 0 and the length of the input collection.</param>
            <param name="maxLength">
                The maximum length of a subsequence to return. Must be between 0 and the length of the input collection. If
                <c>null</c> is specified, the size of the input collection is used.</param>
            <returns>
                A collection containing all matching subsequences of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the first element of a sequence, or <c>null</c> if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the first element of a sequence that satisfies a given predicate, or <c>null</c> if the sequence
                contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                Only consider elements that satisfy this predicate.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref
                name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test
                specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1},``1)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the resulting value.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="resultSelector">
                A function to transform the first element into the result value. Will only be called if the sequence contains
                an element that passes the test specified by <paramref name="predicate"/>.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the transformed first element in <paramref name="source"/> that
                passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>, starting at the specified <paramref name="startIndex"/>. If no such elements are found,
                returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the last element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
            <remarks>
                This method is optimised for the case in which the input sequence is a list or array. In all other cases, the
                collection is evaluated completely before this method returns.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> that is equal to the specified
                <paramref name="element"/> as determined by the specified <paramref name="comparer"/>. If no such elements are
                found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the minimum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the maximum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the minimum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the maximum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value, or
                a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value, or a
                default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value, or <c>null</c> if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value, or a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
                Enumerates the items of this collection, skipping the last <paramref name="count"/> items. Note that the
                memory usage of this method is proportional to <paramref name="count"/>, but the source collection is only
                enumerated once, and in a lazy fashion. Also, enumerating the first item will take longer than enumerating
                subsequent items.</summary>
            <param name="source">
                Source collection.</param>
            <param name="count">
                Number of items to skip from the end of the collection.</param>
            <param name="throwIfNotEnough">
                If <c>true</c>, the enumerator throws at the end of the enumeration if the source collection contained fewer
                than <paramref name="count"/> elements.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a collection containing only the last <paramref name="count"/> items of the input collection. This
                method enumerates the entire collection to the end once before returning. Note also that the memory usage of
                this method is proportional to <paramref name="count"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Queue`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Stack`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <typeparam name="TValue">
                The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="elementSelector">
                A transform function to produce a result element value from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in the current IDictionary&lt;K, List&lt;V&gt;&gt;. If the specified
                key does not exist in the current IDictionary, a new List is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
                Adds an element to a HashSet&lt;V&gt; stored in the current IDictionary&lt;K, HashSet&lt;V&gt;&gt;. If the
                specified key does not exist in the current IDictionary, a new HashSet is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the HashSets.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the HashSet is located in the IDictionary.</param>
            <param name="value">
                Value to add to the HashSet located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Adds an element to a two-level Dictionary&lt;,&gt;. If the specified key does not exist in the outer
                Dictionary, a new Dictionary is created.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <param name="value">
                Value to add to the inner Dictionary.</param>
            <param name="comparer">
                Optional equality comparer to pass into the inner dictionary if a new one is created.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1)">
            <summary>
                Removes an element from a two-level Dictionary&lt;,&gt;. If this leaves the inner dictionary empty, the key is
                removed from the outer Dictionary.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <returns>
                A value indicating whether a value was removed or not.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.List{``2}}},``0,``1,``2)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in a two-level Dictionary&lt;,&gt;. If the specified key does not
                exist in the current Dictionary, a new List is created.</summary>
            <typeparam name="K1">
                Type of the key of the first-level Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the second-level Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the second-level Dictionary is located in the first-level Dictionary.</param>
            <param name="key2">
                Key at which the list is located in the second-level Dictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IncSafe``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
                Increments an integer in an <see cref="T:System.Collections.Generic.IDictionary`2"/> by the specified amount. If the specified
                key does not exist in the current dictionary, the value <paramref name="amount"/> is inserted.</summary>
            <typeparam name="K">
                Type of the key of the dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the dictionary.</param>
            <param name="amount">
                The amount by which to increment the integer.</param>
            <returns>
                The new value at the specified key.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Removes the first occurrence of an element from a List&lt;V&gt; stored in the current IDictionary&lt;K,
                List&lt;V&gt;&gt;. If this leaves the list stored at the specified key empty, the key is removed from the
                IDictionary. If the key is not in the dictionary to begin with, nothing happens.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectIndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Returns a collection of integers containing the indexes at which the elements of the source collection match
                the given predicate.</summary>
            <typeparam name="T">
                The type of elements in the collection.</typeparam>
            <param name="source">
                The source collection whose elements are tested using <paramref name="predicate"/>.</param>
            <param name="predicate">
                The predicate against which the elements of <paramref name="source"/> are tested.</param>
            <returns>
                A collection containing the zero-based indexes of all the matching elements, in increasing order.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectTwo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                Transforms every element of an input collection using two selector functions and returns a collection
                containing all the results.</summary>
            <typeparam name="TSource">
                Type of the elements in the source collection.</typeparam>
            <typeparam name="TResult">
                Type of the results of the selector functions.</typeparam>
            <param name="source">
                Input collection to transform.</param>
            <param name="selector1">
                First selector function.</param>
            <param name="selector2">
                Second selector function.</param>
            <returns>
                A collection containing the transformed elements from both selectors, thus containing twice as many elements
                as the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the original collection but with every value cast to their nullable equivalent.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.JoinString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
                Turns all elements in the enumerable to strings and joins them using the specified <paramref
                name="separator"/> and the specified <paramref name="prefix"/> and <paramref name="suffix"/> for each string.</summary>
            <param name="values">
                The sequence of elements to join into a string.</param>
            <param name="separator">
                Optionally, a separator to insert between each element and the next.</param>
            <param name="prefix">
                Optionally, a string to insert in front of each element.</param>
            <param name="suffix">
                Optionally, a string to insert after each element.</param>
            <param name="lastSeparator">
                Optionally, a separator to use between the second-to-last and the last element.</param>
            <example>
                <code>
                    // Returns "[Paris], [London], [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]")
                    
                    // Returns "[Paris], [London] and [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]", " and ");</code></example>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetween``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Inserts the specified item in between each element in the input collection.</summary>
            <param name="source">
                The input collection.</param>
            <param name="extraElement">
                The element to insert between each consecutive pair of elements in the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { 1, 2, 3
                }.InsertBetween(0) returns { 1, 0, 2, 0, 3 }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetweenWithAnd``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
                Inserts the <paramref name="comma"/> item in between each element in the input collection except between the
                second-last and last, where it inserts <paramref name="and"/> instead.</summary>
            <param name="source">
                The input collection.</param>
            <param name="comma">
                The element to insert between each consecutive pair of elements in the input collection except between the
                second-last and last.</param>
            <param name="and">
                The element to insert between the second-last and last element of the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { "a",
                "b", "c" }.InsertBetweenWithAnd(", ", " and ") returns { "a", ", ", "b", " and ", "c" }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>Determines whether this sequence comprises the values provided in the specified order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllSequencesEqual``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Determines whether all the input sequences are equal according to SequenceEquals.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Splits a collection into chunks of equal size. The last chunk may be smaller than <paramref
                name="chunkSize"/>, but all chunks, if any, will contain at least one item.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemEquality">
                An optional function to determine equality of items.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemComparer">
                An optional equality comparer to determine item equality by.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutiveBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Accumulates consecutive elements that are equal when processed by a selector.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <typeparam name="TKey">
                The return type of the <paramref name="selector"/> function.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="selector">
                A function to transform each item into a key which is compared for equality.</param>
            <param name="keyComparer">
                An optional equality comparer for the keys returned by <paramref name="selector"/>.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectChain``1(``0,System.Func{``0,``0})">
            <summary>
                Enumerates a chain of objects where each object refers to the next one. The chain starts with the specified
                object and ends when null is encountered.</summary>
            <typeparam name="T">
                Type of object to enumerate.</typeparam>
            <param name="obj">
                Initial object.</param>
            <param name="next">
                A function that returns the next object given the current one. If null is returned, enumeration will end.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence, and how often.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="count">
                Receives the number of times the element occurred.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Returns the sum of the values in the specified collection, truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Returns the sum of the values in the specified collection projected by the specified selector function,
                truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
                Returns only the non-<c>null</c> elements from the specified collection of nullable values as non-nullable
                values.</summary>
            <typeparam name="T">
                The inner value type.</typeparam>
            <param name="src">
                A collection of nullable values.</param>
            <returns>
                A collection containing only those values that aren’t <c>null</c>.</returns>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ConsecutiveGroup`2">
            <summary>
                Encapsulates information about a group generated by <see
                cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/> and its
                overloads.</summary>
            <typeparam name="TItem">
                Type of the elements in the sequence.</typeparam>
            <typeparam name="TKey">
                Type of the key by which elements were compared.</typeparam>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Index">
            <summary>Index in the original sequence where the group started.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Count">
            <summary>Size of the group.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Key">
            <summary>The key by which the items in this group are deemed equal.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.</summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.ToString">
            <summary>Returns a string that represents this group’s key and its count.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ReflectionExtensions">
            <summary>Provides extension methods on types involved in the Reflection API.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.TryGetGenericParameters(System.Type,System.Type,System.Type[]@)">
            <summary>
                Determines whether the current type is, derives from, or implements the specified generic type, and determines
                that type’s generic type parameters.</summary>
            <param name="type">
                The current type.</param>
            <param name="typeToFind">
                A generic type definition for a base type of interface, e.g. <c>typeof(ICollection&lt;&gt;)</c> or
                <c>typeof(IDictionary&lt;,&gt;)</c>.</param>
            <param name="typeParameters">
                Receives an array containing the generic type parameters of the generic type.</param>
            <returns>
                <c>true</c> if the current type is, derives from or implements the specified generic type.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetAllFields(System.Type)">
            <summary>
                Returns all fields contained in the specified type, including private fields inherited from base classes.</summary>
            <param name="type">
                The type to return all fields of.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all fields contained in this type, including private
                fields inherited from base classes.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetAllProperties(System.Type)">
            <summary>
                Returns all properties contained in the specified type, including private properties inherited from base
                classes.</summary>
            <param name="type">
                The type to return all properties of.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all properties contained in this type, including
                private properties inherited from base classes.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
                Returns a proper statically-typed collection of the custom attributes on this assembly.</summary>
            <param name="assembly">
                Assembly whose custom attributes to return.</param>
            <typeparam name="T">
                The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.IsDefined``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Indicates whether one or more instance of the specified attribute type is applied to this member.</summary>
            <typeparam name="T">
                The type of attribute to search for.</typeparam>
            <param name="member">
                Member whose custom attributes to search.</param>
            <param name="inherit">
                Specifies whether to search this member's inheritance chain to find the attributes.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.IsDefined``1(System.Reflection.ParameterInfo)">
            <summary>
                Indicates whether one or more instance of the specified attribute type is applied to this parameter.</summary>
            <typeparam name="T">
                The type of attribute to search for.</typeparam>
            <param name="parameter">
                Parameter whose custom attributes to search.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.HasPublicGetter(System.Reflection.PropertyInfo)">
            <summary>Determines whether a property has a public getter.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.IsStatic(System.Reflection.PropertyInfo)">
            <summary>Determines whether a property is static.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ReflectionExtensions.GetDefaultValue(System.Type)">
            <summary>
                Returns the equivalent of <c>default(T)</c> for a <c>Type</c> object. For reference or nullable types, this is
                <c>null</c>, while for value types, it is the default value (e.g. <c>false</c>, <c>0</c>, etc.).</summary>
            <param name="type">
                The type to retrieve the default value for.</param>
        </member>
        <member name="T:RT.Util.ExtensionMethods.CustomComparerExtensions">
            <summary>Extension methods related to custom comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CustomComparerExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparison delegate.</summary>
        </member>
        <member name="T:RT.Util.CustomCallStack">
            <summary>
                Provides static functionality to execute work on an unlimited call stack, which is not limited to 1 MB as the
                standard call stack is.</summary>
        </member>
        <member name="M:RT.Util.CustomCallStack.Run``1(RT.Util.WorkNode{``0})">
            <summary>
                Runs the specified work on a custom call stack, which is not limited to 1 MB as the standard call stack is.
                See remarks for details.</summary>
            <typeparam name="T">
                Type of result to compute.</typeparam>
            <param name="node">
                Work to be executed.</param>
            <returns>
                The result of the computation.</returns>
            <remarks>
                <para>
                    <see cref="M:RT.Util.CustomCallStack.Run``1(RT.Util.WorkNode{``0})"/> expects a delegate that is structured in such a way that it:</para>
                <list type="bullet">
                    <item><description>
                        always knows at what state in the computation it is each time it is called;</description></item>
                    <item><description>
                        returns a <see cref="T:RT.Util.WorkStep`1.Call"/> each time it requires some other value to be computed, and
                        then expects that resulting value to come in through the parameter next time it is called;</description></item>
                    <item><description>
                        returns a <see cref="T:RT.Util.WorkStep`1.Return"/> when it is done. At this point the delegate is not called
                        again.</description></item>
                    <item><description>
                        The delegate may return <c>null</c> to indicate the same as a <see cref="T:RT.Util.WorkStep`1.Return"/>
                        containing a <c>default(T)</c> value.</description></item></list>
                <para>
                    CustomCallStack works as follows:</para>
                <list type="bullet">
                    <item><description>
                        The first time the specified delegate is called, its parameter receives <c>default(T)</c>.</description></item>
                    <item><description>
                        If the value returned by the delegate is a <see cref="T:RT.Util.WorkStep`1.Return"/>, the work is done and the
                        result is returned.</description></item>
                    <item><description>
                        If the value returned is a <see cref="T:RT.Util.WorkStep`1.Call"/>, this is treated similarly to a method call.
                        The old delegate is pushed on a stack and the new delegate is executed according to the same rules
                        until it returns a <see cref="T:RT.Util.WorkStep`1.Return"/>. Once it does so, the original delegate is popped
                        from the stack and then called with the result passed into its parameter.</description></item></list>
                <para>
                    There are deliberately no safeguards in this algorithm; it will allow you to grow the stack indefinitely
                    and not generate an equivalent to the <see cref="T:System.StackOverflowException"/>. This means that if your
                    delegates always return a <see cref="T:RT.Util.WorkStep`1.Call"/>, they will consume memory rampantly and never
                    finish.</para></remarks>
        </member>
        <member name="T:RT.Util.WorkStep`1">
            <summary>
                Describes the result of a call to a <see cref="T:RT.Util.WorkNode`1"/>.</summary>
            <typeparam name="T">
                Type of result to compute.</typeparam>
            <remarks>
                This type is closed: Every value is either <c>null</c> or an instance of <see cref="T:RT.Util.WorkStep`1.Return"/> or <see
                cref="T:RT.Util.WorkStep`1.Call"/>. The value <c>null</c> is treated as being equivalent to a <see
                cref="T:RT.Util.WorkStep`1.Return"/> containing a <c>default(T)</c>.</remarks>
        </member>
        <member name="M:RT.Util.WorkStep`1.op_Implicit(`0)~RT.Util.WorkStep{`0}">
            <summary>Implicitly converts from a result value to a <see cref="T:RT.Util.WorkStep`1.Return"/>.</summary>
        </member>
        <member name="M:RT.Util.WorkStep`1.op_Implicit(RT.Util.WorkNode{`0})~RT.Util.WorkStep{`0}">
            <summary>Implicitly converts from another work delegate to a <see cref="T:RT.Util.WorkStep`1.Call"/>.</summary>
        </member>
        <member name="T:RT.Util.WorkStep`1.Return">
            <summary>Indicates that the current delegate has finished its work and returned a result.</summary>
        </member>
        <member name="P:RT.Util.WorkStep`1.Return.Result">
            <summary>The result returned by the computation.</summary>
        </member>
        <member name="M:RT.Util.WorkStep`1.Return.#ctor(`0)">
            <summary>
                Constructs a <see cref="T:RT.Util.WorkStep`1.Return"/> value.</summary>
            <param name="result">
                Specifies the result returned by the computation.</param>
            <remarks>
                For convenience, the type <see cref="T:RT.Util.WorkStep`1"/> declares an implicit operator equivalent to this
                constructor.</remarks>
        </member>
        <member name="T:RT.Util.WorkStep`1.Call">
            <summary>Indicates that the current delegate requires another value to be computed before it can continue.</summary>
        </member>
        <member name="P:RT.Util.WorkStep`1.Call.Callee">
            <summary>Specifies the additional work required.</summary>
        </member>
        <member name="M:RT.Util.WorkStep`1.Call.#ctor(RT.Util.WorkNode{`0})">
            <summary>
                Constructs a <see cref="T:RT.Util.WorkStep`1.Call"/> value.</summary>
            <param name="work">
                Specifies the additional work required.</param>
            <remarks>
                For convenience, the type <see cref="T:RT.Util.WorkStep`1"/> declares an implicit operator equivalent to this
                constructor.</remarks>
        </member>
        <member name="T:RT.Util.WorkNode`1">
            <summary>
                Provides a delegate to specify work to be executed on an unlimited call stack. See <see
                cref="M:RT.Util.CustomCallStack.Run``1(RT.Util.WorkNode{``0})"/> for details.</summary>
            <typeparam name="T">
                Type of result to compute.</typeparam>
            <param name="previousSubresult">
                The result of the work step last returned by this same delegate.</param>
            <returns>
                The next step of computation (which is either a <see cref="T:RT.Util.WorkStep`1.Return"/> or a <see
                cref="T:RT.Util.WorkStep`1.Call"/>).</returns>
        </member>
        <member name="T:RT.Util.CustomComparer`1">
            <summary>
                Encapsulates an IComparer&lt;T&gt; that uses a comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared.</typeparam>
        </member>
        <member name="M:RT.Util.CustomComparer`1.Compare(`0,`0)">
            <summary>
                Compares two elements.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomComparer`1.#ctor(System.Comparison{`0})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this comparer.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.CustomEqualityComparer`1">
            <summary>
                Encapsulates an IEqualityComparer&lt;T&gt; that uses an equality comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared for equality.</typeparam>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Compares two elements for equality.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for an element.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
            <param name="getHashCode">
                Provides the hash function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Constructor which re-uses the default hash function. Use this overload only if using the objects’ original
                hash function is appropriate for this equality comparison.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Function used to compare values for equality. If null, will use IEquatable if implemented, or the object's
                Equals override.</param>
            <param name="getHashCode">
                Function used to compute hash codes. If null, will use IEquatable if implemented, or the object's GetHashCode
                override.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.Ut">
            <summary>This class offers some generic static functions which are hard to categorize under any more specific classes.</summary>
        </member>
        <member name="M:RT.Util.Ut.SizeToString(System.Int64)">
            <summary>
                Converts file size in bytes to a string that uses KB, MB, GB or TB.</summary>
            <param name="size">
                The file size in bytes.</param>
            <returns>
                The converted string.</returns>
        </member>
        <member name="M:RT.Util.Ut.Min``1(``0,``0)">
            <summary>Returns the smaller of the two IComparable values. If the values are equal, returns the first one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Min``1(``0,``0,``0)">
            <summary>Returns the smaller of the three IComparable values. If two values are equal, returns the earlier one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Min``1(``0[])">
            <summary>Returns the smallest of all arguments passed in. Uses the Linq .Min extension method to do the work.</summary>
        </member>
        <member name="M:RT.Util.Ut.Max``1(``0,``0)">
            <summary>Returns the larger of the two IComparable values. If the values are equal, returns the first one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Max``1(``0,``0,``0)">
            <summary>Returns the larger of the three IComparable values. If two values are equal, returns the earlier one.</summary>
        </member>
        <member name="M:RT.Util.Ut.Max``1(``0[])">
            <summary>Returns the largest of all arguments passed in. Uses the Linq .Max extension method to do the work.</summary>
        </member>
        <member name="M:RT.Util.Ut.Sha1(System.String)">
            <summary>
                Reads the specified file and computes the SHA1 hash function from its contents.</summary>
            <param name="path">
                Path to the file to compute SHA1 hash function from.</param>
            <returns>
                Result of the SHA1 hash function as a string of hexadecimal digits.</returns>
        </member>
        <member name="M:RT.Util.Ut.Md5(System.String)">
            <summary>
                Reads the specified file and computes the MD5 hash function from its contents.</summary>
            <param name="path">
                Path to the file to compute MD5 hash function from.</param>
            <returns>
                Result of the MD5 hash function as a string of hexadecimal digits.</returns>
        </member>
        <member name="M:RT.Util.Ut.VersionOfExe">
            <summary>Returns the version of the entry assembly (the .exe file) in a standard format.</summary>
        </member>
        <member name="M:RT.Util.Ut.Assert(System.Boolean,System.String)">
            <summary>
                Checks the specified condition and causes the debugger to break if it is false. Throws an <see
                cref="T:System.Exception"/> afterwards.</summary>
        </member>
        <member name="M:RT.Util.Ut.AssertAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Checks the specified condition and causes the debugger to break if it is false. Throws an <see
                cref="T:System.Exception"/> afterwards.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda(System.Action)">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``1(System.Action{``0})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``2(System.Action{``0,``1})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``3(System.Action{``0,``1,``2})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``4(System.Action{``0,``1,``2,``3})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``1(System.Func{``0})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``2(System.Func{``0,``1})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``3(System.Func{``0,``1,``2})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``4(System.Func{``0,``1,``2,``3})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.Lambda``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
                Allows the use of C#’s powerful type inference when declaring local lambdas whose delegate type doesn't make
                any difference.</summary>
        </member>
        <member name="M:RT.Util.Ut.KeyValuePair``2(``0,``1)">
            <summary>Allows the use of type inference when creating .NET’s KeyValuePair&lt;TK,TV&gt;.</summary>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(``0[])">
            <summary>
                Returns the parameters as a new array.</summary>
            <remarks>
                Useful to circumvent Visual Studio’s bug where multi-line literal arrays are not auto-formatted.</remarks>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
                Instantiates a fully-initialized array with the specified dimensions.</summary>
            <param name="size">
                Size of the first dimension.</param>
            <param name="initialiser">
                Function to initialise the value of every element.</param>
            <typeparam name="T">
                Type of the array element.</typeparam>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>
                Instantiates a fully-initialized rectangular jagged array with the specified dimensions.</summary>
            <param name="size1">
                Size of the first dimension.</param>
            <param name="size2">
                Size of the second dimension.</param>
            <param name="initialiser">
                Optional function to initialise the value of every element.</param>
            <typeparam name="T">
                Type of the array element.</typeparam>
        </member>
        <member name="M:RT.Util.Ut.NewArray``1(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Int32,``0})">
            <summary>
                Instantiates a fully-initialized "rectangular" jagged array with the specified dimensions.</summary>
            <param name="size1">
                Size of the first dimension.</param>
            <param name="size2">
                Size of the second dimension.</param>
            <param name="size3">
                Size of the third dimension.</param>
            <param name="initialiser">
                Optional function to initialise the value of every element.</param>
            <typeparam name="T">
                Type of the array element.</typeparam>
        </member>
        <member name="M:RT.Util.Ut.ParseInt32(System.String)">
            <summary>
                Returns the integer represented by the specified string, or null if the string does not represent a valid
                32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseInt64(System.String)">
            <summary>
                Returns the integer represented by the specified string, or null if the string does not represent a valid
                64-bit integer.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseDouble(System.String)">
            <summary>
                Returns the floating-point number represented by the specified string, or null if the string does not
                represent a valid double-precision floating-point number.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseDateTime(System.String)">
            <summary>
                Returns the date/time stamp represented by the specified string, or null if the string does not represent a
                valid date/time stamp.</summary>
        </member>
        <member name="M:RT.Util.Ut.ParseEnum``1(System.String,System.Boolean)">
            <summary>
                Returns the enum value represented by the specified string, or null if the string does not represent a valid
                enum value.</summary>
        </member>
        <member name="M:RT.Util.Ut.Apply``2(``0,System.Func{``0,``1})">
            <summary>
                Executes the specified function with the specified argument.</summary>
            <typeparam name="TSource">
                Type of the argument to the function.</typeparam>
            <typeparam name="TResult">
                Type of the result of the function.</typeparam>
            <param name="source">
                The argument to the function.</param>
            <param name="func">
                The function to execute.</param>
            <returns>
                The result of the function.</returns>
        </member>
        <member name="M:RT.Util.Ut.Apply``1(``0,System.Action{``0})">
            <summary>
                Executes the specified action with the specified argument.</summary>
            <typeparam name="TSource">
                Type of the argument to the action.</typeparam>
            <param name="source">
                The argument to the action.</param>
            <param name="action">
                The action to execute.</param>
            <returns>
                The result of the function.</returns>
        </member>
        <member name="M:RT.Util.Ut.WaitSharingVio(System.Action,System.Nullable{System.TimeSpan},System.Action)">
            <summary>
                Executes the specified action. If the action results in a file sharing violation exception, the action will be
                repeatedly retried after a short delay (which increases after every failed attempt).</summary>
            <param name="action">
                The action to be attempted and possibly retried.</param>
            <param name="maximum">
                Maximum amount of time to keep retrying for. When expired, any sharing violation exception will propagate to
                the caller of this method. Use null to retry indefinitely.</param>
            <param name="onSharingVio">
                Action to execute when a sharing violation does occur (is called before the waiting).</param>
        </member>
        <member name="M:RT.Util.Ut.WaitSharingVio``1(System.Func{``0},System.Nullable{System.TimeSpan},System.Action)">
            <summary>
                Executes the specified function. If the function results in a file sharing violation exception, the function
                will be repeatedly retried after a short delay (which increases after every failed attempt).</summary>
            <param name="func">
                The function to be attempted and possibly retried.</param>
            <param name="maximum">
                Maximum amount of time to keep retrying for. When expired, any sharing violation exception will propagate to
                the caller of this method. Use null to retry indefinitely.</param>
            <param name="onSharingVio">
                Action to execute when a sharing violation does occur (is called before the waiting).</param>
        </member>
        <member name="M:RT.Util.Ut.ThreadPool(System.Action)">
            <summary>
                Queues the specified action to be executed on the thread pool. This is just a shortcut for
                <c>ThreadPool.QueueUserWorkItem</c>, and also does not require the method to accept a parameter (which has
                been useless ever since C# gained support for lambdas).</summary>
        </member>
        <member name="M:RT.Util.Ut.Swap``1(``0@,``0@)">
            <summary>Swaps the values of the specified two variables.</summary>
        </member>
        <member name="M:RT.Util.Ut.GetLongestCommonSubstring(System.String[])">
            <summary>
                Finds the longest substring that all of the specified input strings contain.</summary>
            <param name="strings">
                Strings to examine.</param>
            <returns>
                The longest shared substring. This may be the empty string, but not will not be <c>null</c>.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToUShort(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 16-bit unsigned integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 16-bit unsigned integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToShort(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 16-bit signed integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 16-bit signed integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToUInt(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 32-bit unsigned integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 32-bit unsigned integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToInt(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 32-bit signed integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 32-bit signed integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToULong(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 64-bit unsigned integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 64-bit unsigned integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.BytesToLong(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Converts the bytes at the specified <paramref name="index"/> within the specified <paramref name="buffer"/> to
                a 64-bit signed integer.</summary>
            <param name="buffer">
                Array to take values from.</param>
            <param name="index">
                Index within the array at which to start taking values.</param>
            <param name="bigEndian">
                <c>true</c> to interpret the data as big-endian byte order; <c>false</c> for little-endian byte order.</param>
            <returns>
                The converted 64-bit signed integer.</returns>
        </member>
        <member name="M:RT.Util.Ut.ArrayHash(System.Object[])">
            <summary>
                Computes a hash value from an array of elements.</summary>
            <param name="input">
                The array of elements to hash.</param>
            <returns>
                The computed hash value.</returns>
        </member>
        <member name="M:RT.Util.Ut.ArrayHash(System.Array)">
            <summary>
                Computes a hash value from an array of elements.</summary>
            <param name="input">
                The array of elements to hash.</param>
            <returns>
                The computed hash value.</returns>
        </member>
        <member name="M:RT.Util.Ut.Range(System.Double,System.Double,System.Double)">
            <summary>
                Generates a sequence of floating-point numbers within a specified range.</summary>
            <param name="start">
                The first value to produce.</param>
            <param name="end">
                The last value to produce.</param>
            <param name="step">
                The difference between the values to generate, except that the difference between the last and second-last may
                be smaller if the interval between <paramref name="start"/> and <paramref name="end"/> isn’t exactly divisible
                by <paramref name="step"/>.</param>
        </member>
        <member name="M:RT.Util.Ut.ToHex(System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>Generates a representation of the specified byte sequence as hexadecimal numbers (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.Ut.ToHex(System.Byte[])">
            <summary>Generates a representation of the specified byte array as hexadecimal numbers (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.Ut.ToHex(System.UInt32[])">
            <summary>Generates a representation of the specified uint array as hexadecimal numbers (“hexdump”).</summary>
        </member>
    </members>
</doc>
