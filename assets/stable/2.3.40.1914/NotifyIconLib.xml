<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NotifyIconLib</name>
    </assembly>
    <members>
        <member name="T:NotifyIconLib.BalloonIcon">
            <summary>
             Supported icons for the tray's balloon messages.
            </summary>
        </member>
        <member name="F:NotifyIconLib.BalloonIcon.None">
            <summary>
            The balloon message is displayed without an icon.
            </summary>
        </member>
        <member name="F:NotifyIconLib.BalloonIcon.Info">
            <summary>
            An information is displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.BalloonIcon.Warning">
            <summary>
            A warning is displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.BalloonIcon.Error">
            <summary>
            An error is displayed.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.TrayInfo">
            <summary>
            Resolves the current tray position.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.TrayInfo.GetTrayLocation">
            <summary>
            Gets the position of the system tray.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="T:NotifyIconLib.Interop.Point">
            <summary>
            Win API struct providing coordinates for a single point.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.Point.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.Point.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.WindowProcedureHandler">
            <summary>
            Callback delegate which is used by the Windows API to
            submit window messages.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.WindowClass">
            <summary>
            Win API WNDCLASS struct - represents a single window.
            Used to receive window messages.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.WinApi">
            <summary>
            Win32 API imports.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.Shell_NotifyIcon(NotifyIconLib.Interop.NotifyCommand,NotifyIconLib.Interop.NotifyIconData@)">
            <summary>
            Creates, updates or deletes the taskbar icon.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates the helper window that receives messages from the taskar icon.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.DefWindowProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes a default windows procedure.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.RegisterClass(NotifyIconLib.Interop.WindowClass@)">
            <summary>
            Registers the helper window class.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.RegisterWindowMessage(System.String)">
            <summary>
            Registers a listener for a window message.
            </summary>
            <param name="lpString"></param>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.DestroyWindow(System.IntPtr)">
            <summary>
            Used to destroy the hidden helper window that receives messages from the
            taskbar icon.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.SetForegroundWindow(System.IntPtr)">
            <summary>
            Gives focus to a given window.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.GetDoubleClickTime">
            <summary>
            Gets the maximum number of milliseconds that can elapse between a
            first click and a second click for the OS to consider the
            mouse action a double-click.
            </summary>
            <returns>The maximum amount of time, in milliseconds, that can
            elapse between a first click and a second click for the OS to
            consider the mouse action a double-click.</returns>
        </member>
        <member name="M:NotifyIconLib.Interop.WinApi.GetPhysicalCursorPos(NotifyIconLib.Interop.Point@)">
            <summary>
            Gets the screen coordinates of the current mouse position.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.MouseEvent">
            <summary>
            Event flags for clicked events.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.ContextMenu">
            <summary>
            The user requested the tray iconâ€™s context menu (either by right-clicking or by pressing the Context key).
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.Activated">
            <summary>
            The user activated the tray icon, either by clicking it or by pressing the Space key or Enter key. In the case of the Enter key, the event is generated twice in quick succession.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.MouseMove">
            <summary>
            The mouse was moved withing the
            taskbar icon's area.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconRightMouseDown">
            <summary>
            The right mouse button was clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconLeftMouseDown">
            <summary>
            The left mouse button was clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconRightMouseUp">
            <summary>
            The right mouse button was released.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconLeftMouseUp">
            <summary>
            The left mouse button was released.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconMiddleMouseDown">
            <summary>
            The middle mouse button was clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconMiddleMouseUp">
            <summary>
            The middle mouse button was released.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.IconDoubleClick">
            <summary>
            The taskbar icon was double clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.MouseEvent.BalloonToolTipClicked">
            <summary>
            The balloon tip was clicked.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.NotifyCommand">
            <summary>
            Main operations performed on the
            <see cref="M:NotifyIconLib.Interop.WinApi.Shell_NotifyIcon(NotifyIconLib.Interop.NotifyCommand,NotifyIconLib.Interop.NotifyIconData@)"/> function.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyCommand.Add">
            <summary>
            The taskbar icon is being created.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyCommand.Modify">
            <summary>
            The settings of the taskbar icon are being updated.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyCommand.Delete">
            <summary>
            The taskbar icon is deleted.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyCommand.SetFocus">
            <summary>
            Focus is returned to the taskbar icon. Currently not in use.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyCommand.SetVersion">
            <summary>
            Shell32.dll version 5.0 and later only. Instructs the taskbar
            to behave according to the version number specified in the 
            uVersion member of the structure pointed to by lpdata.
            This message allows you to specify whether you want the version
            5.0 behavior found on Microsoft Windows 2000 systems, or the
            behavior found on earlier Shell versions. The default value for
            uVersion is zero, indicating that the original Windows 95 notify
            icon behavior should be used.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.NotifyIconData">
            <summary>
            A struct that is submitted in order to configure
            the taskbar icon. Provides various members that
            can be configured partially, according to the
            values of the <see cref="T:NotifyIconLib.Interop.IconDataMembers"/>
            that were defined.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.cbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.WindowHandle">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the
            taskbar status area. The Shell uses hWnd and uID to identify which icon to operate on
            when Shell_NotifyIcon is invoked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.TaskbarIconId">
            <summary>
            Application-defined identifier of the taskbar icon. The Shell uses hWnd and uID to identify
            which icon to operate on when Shell_NotifyIcon is invoked. You can have multiple icons
            associated with a single hWnd by assigning each a different uID. This feature, however
            is currently not used.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.ValidMembers">
            <summary>
            Flags that indicate which of the other members contain valid data. This member can be
            a combination of the NIF_XXX constants.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.CallbackMessageId">
            <summary>
            Application-defined message identifier. The system uses this identifier to send
            notifications to the window identified in hWnd.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.IconHandle">
            <summary>
            A handle to the icon that should be displayed. Just
            <c>Icon.Handle</c>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.ToolTipText">
            <summary>
            String with the text for a standard ToolTip. It can have a maximum of 64 characters including
            the terminating NULL. For Version 5.0 and later, szTip can have a maximum of
            128 characters, including the terminating NULL.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.IconState">
            <summary>
            State of the icon. Remember to also set the <see cref="F:NotifyIconLib.Interop.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.StateMask">
            <summary>
            A value that specifies which bits of the state member are retrieved or modified.
            For example, setting this member to <see cref="F:NotifyIconLib.Interop.IconState.Hidden"/>
            causes only the item's hidden
            state to be retrieved.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.BalloonText">
            <summary>
            String with the text for a balloon ToolTip. It can have a maximum of 255 characters.
            To remove the ToolTip, set the NIF_INFO flag in uFlags and set szInfo to an empty string.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.VersionOrTimeout">
            <summary>
            Mainly used to set the version when <see cref="M:NotifyIconLib.Interop.WinApi.Shell_NotifyIcon(NotifyIconLib.Interop.NotifyCommand,NotifyIconLib.Interop.NotifyIconData@)"/> is invoked
            with <see cref="F:NotifyIconLib.Interop.NotifyCommand.SetVersion"/>. However, for legacy operations,
            the same member is also used to set timouts for balloon ToolTips.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.BalloonTitle">
            <summary>
            String containing a title for a balloon ToolTip. This title appears in boldface
            above the text. It can have a maximum of 63 characters.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.BalloonFlags">
            <summary>
            Adds an icon to a balloon ToolTip, which is placed to the left of the title. If the
            <see cref="F:NotifyIconLib.Interop.NotifyIconData.BalloonTitle"/> member is zero-length, the icon is not shown.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.TaskbarIconGuid">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.<br/>
            - Windows 7 and later: A registered GUID that identifies the icon.
              This value overrides uID and is the recommended method of identifying the icon.<br/>
            - Windows XP through Windows Vista: Reserved.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconData.CustomBalloonIconHandle">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The handle of a customized
            balloon icon provided by the application that should be used independently
            of the tray icon. If this member is non-NULL and the <see cref="F:NotifyIconLib.Interop.BalloonFlags.User"/>
            flag is set, this icon is used as the balloon icon.<br/>
            If this member is NULL, the legacy behavior is carried out.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.NotifyIconData.CreateDefault(System.IntPtr)">
            <summary>
            Creates a default data structure that provides
            a hidden taskbar icon without the icon being set.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:NotifyIconLib.Interop.IconDataMembers">
            <summary>
            Indicates which members of a <see cref="T:NotifyIconLib.Interop.NotifyIconData"/> structure
            were set, and thus contain valid data or provide additional information
            to the ToolTip as to how it should display.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.Message">
            <summary>
            The message ID is set.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.Icon">
            <summary>
            The notification icon is set.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.Tip">
            <summary>
            The tooltip is set.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.State">
            <summary>
            State information (<see cref="T:NotifyIconLib.Interop.IconState"/>) is set. This
            applies to both <see cref="F:NotifyIconLib.Interop.NotifyIconData.IconState"/> and
            <see cref="F:NotifyIconLib.Interop.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.Info">
            <summary>
            The balloon ToolTip is set. Accordingly, the following
            members are set: <see cref="F:NotifyIconLib.Interop.NotifyIconData.BalloonText"/>,
            <see cref="F:NotifyIconLib.Interop.NotifyIconData.BalloonTitle"/>, <see cref="F:NotifyIconLib.Interop.NotifyIconData.BalloonFlags"/>,
            and <see cref="F:NotifyIconLib.Interop.NotifyIconData.VersionOrTimeout"/>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.Realtime">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. If the ToolTip
            cannot be displayed immediately, discard it.<br/>
            Use this flag for ToolTips that represent real-time information which
            would be meaningless or misleading if displayed at a later time.
            For example, a message that states "Your telephone is ringing."<br/>
            This modifies and must be combined with the <see cref="F:NotifyIconLib.Interop.IconDataMembers.Info"/> flag.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconDataMembers.UseLegacyToolTips">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later.
            Use the standard ToolTip. Normally, when uVersion is set
            to NOTIFYICON_VERSION_4, the standard ToolTip is replaced
            by the application-drawn pop-up user interface (UI).
            If the application wants to show the standard tooltip
            in that case, regardless of whether the on-hover UI is showing,
            it can specify NIF_SHOWTIP to indicate the standard tooltip
            should still be shown.<br/>
            Note that the NIF_SHOWTIP flag is effective until the next call 
            to Shell_NotifyIcon.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.IconState">
            <summary>
            The state of the icon - can be set to
            hide the icon.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconState.Visible">
            <summary>
            The icon is visible.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.IconState.Hidden">
            <summary>
            Hide the icon.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.NotifyIconVersion">
            <summary>
            The notify icon version that is used. The higher
            the version, the more capabilities are available.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconVersion.Win95">
            <summary>
            Default behavior (legacy Win95). Expects
            a <see cref="T:NotifyIconLib.Interop.NotifyIconData"/> size of 488.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconVersion.Win2000">
            <summary>
            Behavior representing Win2000 an higher. Expects
            a <see cref="T:NotifyIconLib.Interop.NotifyIconData"/> size of 504.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.NotifyIconVersion.Vista">
            <summary>
            Extended tooltip support, which is available
            for Vista and later.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.BalloonFlags">
            <summary>
            Flags that define the icon that is shown on a balloon
            tooltip.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.None">
            <summary>
            No icon is displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.Info">
            <summary>
            An information icon is displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.Warning">
            <summary>
            A warning icon is displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.Error">
            <summary>
            An error icon is displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.User">
            <summary>
            Windows XP Service Pack 2 (SP2) and later.
            Use a custom icon as the title icon.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.NoSound">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.
            Do not play the associated sound. Applies only to balloon ToolTips.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.LargeIcon">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The large version
            of the icon should be used as the balloon icon. This corresponds to the
            icon with dimensions SM_CXICON x SM_CYICON. If this flag is not set,
            the icon with dimensions XM_CXSMICON x SM_CYSMICON is used.<br/>
            - This flag can be used with all stock icons.<br/>
            - Applications that use older customized icons (NIIF_USER with hIcon) must
              provide a new SM_CXICON x SM_CYICON version in the tray icon (hIcon). These
              icons are scaled down when they are displayed in the System Tray or
              System Control Area (SCA).<br/>
            - New customized icons (NIIF_USER with hBalloonIcon) must supply an
              SM_CXICON x SM_CYICON version in the supplied icon (hBalloonIcon).
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.BalloonFlags.RespectQuietTime">
            <summary>
            Windows 7 and later.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Interop.WindowMessageSink">
            <summary>
            Receives messages from the taskbar icon through
            window messages of an underlying helper window.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.WindowMessageSink.CallbackMessageId">
            <summary>
            The ID of messages that are received from the the
            taskbar icon.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.WindowMessageSink.taskbarRestartMessageId">
            <summary>
            The ID of the message that is being received if the
            taskbar is (re)started.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.WindowMessageSink.isDoubleClick">
            <summary>
            Used to track whether a mouse-up event is just
            the aftermath of a double-click and therefore needs
            to be suppressed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Interop.WindowMessageSink.messageHandler">
            <summary>
            A delegate that processes messages of the hidden
            native window that receives window messages. Storing
            this reference makes sure we don't loose our reference
            to the message window.
            </summary>
        </member>
        <member name="P:NotifyIconLib.Interop.WindowMessageSink.WindowId">
            <summary>
            Window class ID.
            </summary>
        </member>
        <member name="P:NotifyIconLib.Interop.WindowMessageSink.MessageWindowHandle">
            <summary>
            Handle for the message window.
            </summary> 
        </member>
        <member name="P:NotifyIconLib.Interop.WindowMessageSink.Version">
            <summary>
            The version of the underlying icon. Defines how
            incoming messages are interpreted.
            </summary>
        </member>
        <member name="E:NotifyIconLib.Interop.WindowMessageSink.ChangeToolTipStateRequest">
            <summary>
            The custom tooltip should be closed or hidden.
            </summary>
        </member>
        <member name="E:NotifyIconLib.Interop.WindowMessageSink.MouseEventReceived">
            <summary>
            Fired in case the user clicked or moved within
            the taskbar icon area.
            </summary>
        </member>
        <member name="E:NotifyIconLib.Interop.WindowMessageSink.WndProcMessageReceived">
            <summary>
            Occurs after recieving a wndproc message from the OS.
            </summary>
        </member>
        <member name="E:NotifyIconLib.Interop.WindowMessageSink.BalloonToolTipChanged">
            <summary>
            Fired if a balloon ToolTip was either displayed
            or closed (indicated by the boolean flag).
            </summary>
        </member>
        <member name="E:NotifyIconLib.Interop.WindowMessageSink.TaskbarCreated">
            <summary>
            Fired if the taskbar was created or restarted. Requires the taskbar
            icon to be reset.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.#ctor(NotifyIconLib.Interop.NotifyIconVersion)">
            <summary>
            Creates a new message sink that receives message from
            a given taskbar icon.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.CreateEmpty">
            <summary>
            Creates a dummy instance that provides an empty
            pointer rather than a real window handler.<br/>
            Used at design time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.CreateMessageWindow">
            <summary>
            Creates the helper message window that is used
            to receive messages from the taskbar icon.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.OnWindowMessageReceived(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback method that receives messages from the taskbar area.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.ProcessWindowMessage(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes incoming system messages.
            </summary>
            <param name="msg">Callback ID.</param>
            <param name="wParam">If the version is <see cref="F:NotifyIconLib.Interop.NotifyIconVersion.Vista"/>
            or higher, this parameter can be used to resolve mouse coordinates.
            Currently not in use.</param>
            <param name="lParam">Provides information about the event.</param>
        </member>
        <member name="P:NotifyIconLib.Interop.WindowMessageSink.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:NotifyIconLib.Interop.WindowMessageSink.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:NotifyIconLib.Interop.WindowMessageSink.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:NotifyIconLib.Interop.WindowMessageSink.Dispose(System.Boolean)">
            <summary>
            Removes the windows hook that receives window
            messages and closes the underlying helper window.
            </summary>
        </member>
        <member name="T:NotifyIconLib.PopupActivationMode">
            <summary>
            Defines flags that define when a popup
            is being displayed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.LeftClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.RightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the right mouse button.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.DoubleClick">
            <summary>
            The item is displayed if the user double-clicks the
            tray icon.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.LeftOrRightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left or the right mouse button.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.LeftOrDoubleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button or if a
            double-click is being performed.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.MiddleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the middle mouse button.
            </summary>
        </member>
        <member name="F:NotifyIconLib.PopupActivationMode.All">
            <summary>
            The item is displayed whenever a click occurs.
            </summary>
        </member>
        <member name="T:NotifyIconLib.RoutedEventHelper">
            <summary>
            Helper class used by routed events of the
            <see cref="T:NotifyIconLib.TaskbarIcon"/> class.
            </summary>
        </member>
        <member name="M:NotifyIconLib.RoutedEventHelper.RaiseEvent(System.Windows.DependencyObject,System.Windows.RoutedEventArgs)">
            <summary>
            A static helper method to raise a routed event on a target UIElement or ContentElement.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="args">RoutedEventArgs to use when raising the event</param>
        </member>
        <member name="M:NotifyIconLib.RoutedEventHelper.AddHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that adds a handler for a routed event 
            to a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will be handled</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:NotifyIconLib.RoutedEventHelper.RemoveHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that removes a handler for a routed event 
            from a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will no longer be handled</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="T:NotifyIconLib.Taskbar.TaskbarEdge">
            <summary>
            Represents the edge of the screen the taskbar is docked to.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Taskbar.TaskbarState">
            <summary>
            The states the taskbar can be in.
            </summary>
        </member>
        <member name="F:NotifyIconLib.Taskbar.TaskbarState.None">
            <summary>
            No autohide, not always top
            </summary>
        </member>
        <member name="F:NotifyIconLib.Taskbar.TaskbarState.AutoHide">
            <summary>
            Hides task bar when mouse exits task bar region
            </summary>
        </member>
        <member name="F:NotifyIconLib.Taskbar.TaskbarState.AlwaysTop">
            <summary>
            Taskbar is always on top of other windows
            </summary>
        </member>
        <member name="M:NotifyIconLib.Taskbar.GetTaskbarRectangle">
            <summary>
            Gets the rectangle of the taskbar.
            </summary>
            <returns>The taskbar rectangle.</returns>
        </member>
        <member name="M:NotifyIconLib.Taskbar.GetTaskbarLocation">
            <summary>
            Gets the location, in screen coordinates of the taskbar.
            </summary>
            <returns>The taskbar location.</returns>
        </member>
        <member name="M:NotifyIconLib.Taskbar.GetTaskbarSize">
            <summary>
            Gets the size, in pixels of the taskbar.
            </summary>
            <returns>The taskbar size.</returns>
        </member>
        <member name="M:NotifyIconLib.Taskbar.GetTaskbarEdge">
            <summary>
            Gets the edge of the screen that the taskbar is docked to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Taskbar.GetTaskbarState">
            <summary>
            Gets the current state of the taskbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Taskbar.SetTaskBarState(NotifyIconLib.Taskbar.TaskbarState)">
            <summary>
            Sets the state of the taskbar.
            </summary>
            <param name="state">The new state.</param>
        </member>
        <member name="M:NotifyIconLib.Taskbar.GetTaskBarData">
            <summary>
            Gets an APPBARDATA struct with valid location, size, and edge of the taskbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Taskbar.CreateAppBarData">
            <summary>
            Creats an APPBARDATA struct with its hWnd member set to the task bar window.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NotifyIconLib.TaskbarIcon">
            <summary>
            A WPF proxy for a taskbar icon (NotifyIcon) that sits in the system's
            taskbar notification area ("system tray").
            </summary>
            <summary>
            Contains declarations of WPF dependency properties
            and events.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.iconData">
            <summary>
            Represents the current icon data.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.messageSink">
            <summary>
            Receives messages from the taskbar icon.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.singleClickTimerAction">
            <summary>
            An action that is being invoked if the
            <see cref="F:NotifyIconLib.TaskbarIcon.singleClickTimer"/> fires.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.singleClickTimer">
            <summary>
            A timer that is used to differentiate between single
            and double clicks.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.balloonCloseTimer">
            <summary>
            A timer that is used to close open balloon tooltips.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.IsTaskbarIconCreated">
            <summary>
            Indicates whether the taskbar icon has been created or not.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.SupportsCustomToolTips">
            <summary>
            Indicates whether custom tooltips are supported, which depends
            on the OS. Windows Vista or higher is required in order to
            support this feature.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.IsPopupOpen">
            <summary>
            Checks whether a non-tooltip popup is currently opened.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.#ctor">
            <summary>
            Inits the taskbar icon and registers a message listener
            in order to receive events from the taskbar area.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ShowCustomBalloon(System.Windows.UIElement,System.Windows.Controls.Primitives.PopupAnimation,System.Nullable{System.Int32})">
            <summary>
            Shows a custom control as a tooltip in the tray location.
            </summary>
            <param name="balloon"></param>
            <param name="animation">An optional animation for the popup.</param>
            <param name="timeout">The time after which the popup is being closed.
            Submit null in order to keep the balloon open inde
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="balloon"/>
            is a null reference.</exception>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ResetBalloonCloseTimer">
            <summary>
            Resets the closing timeout, which effectively
            keeps a displayed balloon message open until
            it is either closed programmatically through
            <see cref="M:NotifyIconLib.TaskbarIcon.CloseBalloon"/> or due to a new
            message being displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.CloseBalloon">
            <summary>
            Closes the current <see cref="P:NotifyIconLib.TaskbarIcon.CustomBalloon"/>, if the
            property is set.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.CloseBalloonCallback(System.Object)">
            <summary>
            Timer-invoke event which closes the currently open balloon and
            resets the <see cref="P:NotifyIconLib.TaskbarIcon.CustomBalloon"/> dependency property.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnMouseEvent(NotifyIconLib.Interop.MouseEvent)">
            <summary>
            Processes mouse events, which are bubbled
            through the class' routed events, trigger
            certain actions (e.g. show a popup), or
            both.
            </summary>
            <param name="me">Event flag.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnToolTipChange(System.Boolean)">
            <summary>
            Displays a custom tooltip, if available. This method is only
            invoked for Windows Vista and above.
            </summary>
            <param name="visible">Whether to show or hide the tooltip.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.CreateCustomToolTip">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:NotifyIconLib.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.WriteToolTipSettings">
            <summary>
            Sets tooltip settings for the class depending on defined
            dependency properties and OS support.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.CreatePopup">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:NotifyIconLib.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ShowTrayPopup(NotifyIconLib.Interop.Point)">
            <summary>
            Displays the <see cref="P:NotifyIconLib.TaskbarIcon.TrayPopup"/> control if
            it was set.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ShowContextMenu(NotifyIconLib.Interop.Point)">
            <summary>
            Displays the <see cref="T:System.Windows.Controls.ContextMenu"/> if
            it was set.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnBalloonToolTipChanged(System.Boolean)">
            <summary>
            Bubbles events if a balloon ToolTip was displayed
            or removed.
            </summary>
            <param name="visible">Whether the ToolTip was just displayed
            or removed.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ShowBalloonTip(System.String,System.String,NotifyIconLib.BalloonIcon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="symbol">A symbol that indicates the severity.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ShowBalloonTip(System.String,System.String,System.Drawing.Icon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and a custom icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="customIcon">A custom icon.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="customIcon"/>
            is a null reference.</exception>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ShowBalloonTip(System.String,System.String,NotifyIconLib.Interop.BalloonFlags,System.IntPtr)">
            <summary>
            Invokes <see cref="M:NotifyIconLib.Interop.WinApi.Shell_NotifyIcon(NotifyIconLib.Interop.NotifyCommand,NotifyIconLib.Interop.NotifyIconData@)"/> in order to display
            a given balloon ToolTip.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="flags">Indicates what icon to use.</param>
            <param name="balloonIconHandle">A handle to a custom icon, if any, or
            <see cref="F:System.IntPtr.Zero"/>.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.HideBalloonTip">
            <summary>
            Hides a balloon ToolTip, if any is displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.DoSingleClickAction(System.Object)">
            <summary>
            Performs a delayed action if the user requested an action
            based on a single click of the left mouse.<br/>
            This method is invoked by the <see cref="F:NotifyIconLib.TaskbarIcon.singleClickTimer"/>.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.SetVersion">
            <summary>
            Sets the version flag for the <see cref="F:NotifyIconLib.TaskbarIcon.iconData"/>.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnTaskbarCreated">
            <summary>
            Recreates the taskbar icon if the whole taskbar was
            recreated (e.g. because Explorer was shut down).
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.CreateTaskbarIcon">
            <summary>
            Creates the taskbar icon. This message is invoked during initialization,
            if the taskbar is restarted, and whenever the icon is displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RemoveTaskbarIcon">
            <summary>
            Closes the taskbar icon if required.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.GetDeviceCoordinates(NotifyIconLib.Interop.Point)">
            <summary>
            Recalculates OS coordinates in order to support WPFs coordinate
            system if OS scaling (DPIs) is not 100%.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.EnsureNotDisposed">
            <summary>
            Checks if the object has been disposed and
            raises a <see cref="T:System.ObjectDisposedException"/> in case
            the <see cref="P:NotifyIconLib.TaskbarIcon.IsDisposed"/> flag is true.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnExit(System.Object,System.EventArgs)">
            <summary>
            Disposes the class if the application exits.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:NotifyIconLib.TaskbarIcon.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:NotifyIconLib.TaskbarIcon.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.Dispose(System.Boolean)">
            <summary>
            Closes the tray and releases all resources.
            </summary>
            <summary>
            <c>Dispose(bool disposing)</c> executes in two distinct scenarios.
            If disposing equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">If disposing equals <c>false</c>, the method
            has been called by the runtime from inside the finalizer and you
            should not reference other objects. Only unmanaged resources can
            be disposed.</param>
            <remarks>Check the <see cref="P:NotifyIconLib.TaskbarIcon.IsDisposed"/> property to determine whether
            the method has already been called.</remarks>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.CategoryName">
            <summary>
            Category name that is set on designer properties.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayPopupResolvedPropertyKey">
            <summary>
            TrayPopupResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayPopupResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.Primitives.Popup"/>
            that is being displayed in the taskbar area based on a user action.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.TrayPopupResolved">
            <summary>
            Gets the TrayPopupResolved property. Returns
            a <see cref="T:System.Windows.Controls.Primitives.Popup"/> which is either the
            <see cref="P:NotifyIconLib.TaskbarIcon.TrayPopup"/> control itself or a
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> control that contains the
            <see cref="P:NotifyIconLib.TaskbarIcon.TrayPopup"/>.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.SetTrayPopupResolved(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the TrayPopupResolved property.  
            This dependency property indicates ....
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayToolTipResolvedPropertyKey">
            <summary>
            TrayToolTipResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayToolTipResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.ToolTip"/>
            that is being displayed.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.TrayToolTipResolved">
            <summary>
            Gets the TrayToolTipResolved property. Returns 
            a <see cref="T:System.Windows.Controls.ToolTip"/> control that was created
            in order to display either <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTip"/>
            or <see cref="P:NotifyIconLib.TaskbarIcon.ToolTipText"/>.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.SetTrayToolTipResolved(System.Windows.Controls.ToolTip)">
            <summary>
            Provides a secure method for setting the <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTipResolved"/>
            property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.CustomBalloonPropertyKey">
            <summary>
            CustomBalloon Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.CustomBalloonProperty">
            <summary>
            Maintains a currently displayed custom balloon.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.CustomBalloon">
            <summary>
            A custom popup that is being displayed in the tray area in order
            to display messages to the user.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.SetCustomBalloon(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the <see cref="P:NotifyIconLib.TaskbarIcon.CustomBalloon"/> property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.Icon">
            <summary>
            Gets or sets the icon to be displayed. This is not a
            dependency property - if you want to assign the property
            through XAML, please use the <see cref="P:NotifyIconLib.TaskbarIcon.IconSource"/>
            dependency property.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.IconSourceProperty">
            <summary>
            Resolves an image source and updates the <see cref="P:NotifyIconLib.TaskbarIcon.Icon" /> property accordingly.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.IconSource">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.IconSourceProperty"/>
            dependency property:<br/>
            Resolves an image source and updates the <see cref="P:NotifyIconLib.TaskbarIcon.Icon" /> property accordingly.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.IconSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:NotifyIconLib.TaskbarIcon.IconSourceProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:NotifyIconLib.TaskbarIcon.IconSourceProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:NotifyIconLib.TaskbarIcon.IconSource"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.ToolTipTextProperty">
            <summary>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.ToolTipText">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.ToolTipTextProperty"/>
            dependency property:<br/>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ToolTipTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:NotifyIconLib.TaskbarIcon.ToolTipTextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:NotifyIconLib.TaskbarIcon.ToolTipTextProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:NotifyIconLib.TaskbarIcon.ToolTipText"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayToolTipProperty">
            <summary>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:NotifyIconLib.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.TrayToolTip">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.TrayToolTipProperty"/>
            dependency property:<br/>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:NotifyIconLib.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.TrayToolTipPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:NotifyIconLib.TaskbarIcon.TrayToolTipProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:NotifyIconLib.TaskbarIcon.TrayToolTipProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:NotifyIconLib.TaskbarIcon.TrayToolTip"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayPopupProperty">
            <summary>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.TrayPopup">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.TrayPopupProperty"/>
            dependency property:<br/>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.TrayPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:NotifyIconLib.TaskbarIcon.TrayPopupProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:NotifyIconLib.TaskbarIcon.TrayPopupProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:NotifyIconLib.TaskbarIcon.TrayPopup"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.MenuActivationProperty">
            <summary>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:NotifyIconLib.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.MenuActivation">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.MenuActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:NotifyIconLib.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.PopupActivationProperty">
            <summary>
            Defines what mouse events trigger the <see cref="P:NotifyIconLib.TaskbarIcon.TrayPopup" />.
            Default is <see cref="F:NotifyIconLib.PopupActivationMode.LeftClick" />.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.PopupActivation">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.PopupActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events trigger the <see cref="P:NotifyIconLib.TaskbarIcon.TrayPopup" />.
            Default is <see cref="F:NotifyIconLib.PopupActivationMode.LeftClick" />.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.VisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="T:System.Windows.Visibility"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.UpdateDataContext(System.Windows.FrameworkElement,System.Object,System.Object)">
            <summary>
            Updates the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> of a given
            <see cref="T:System.Windows.FrameworkElement"/>. This method only updates target elements
            that do not already have a data context of their own, and either assigns
            the <see cref="P:System.Windows.FrameworkElement.DataContext"/> of the NotifyIcon, or the
            NotifyIcon itself, if no data context was assigned at all.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.DataContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:System.Windows.FrameworkElement.DataContext"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.ContextMenuPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.ContextMenuProperty"/> dependency property has
            been changed. Invokes the <see cref="M:NotifyIconLib.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Releases the old and updates the new <see cref="T:System.Windows.Controls.ContextMenu"/> property
            in order to reflect both the NotifyIcon's <see cref="P:System.Windows.FrameworkElement.DataContext"/>
            property and have the <see cref="F:NotifyIconLib.TaskbarIcon.ParentTaskbarIconProperty"/> assigned.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.DoubleClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.DoubleClickCommand">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.DoubleClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.DoubleClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:NotifyIconLib.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.DoubleClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.DoubleClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:NotifyIconLib.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.DoubleClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.DoubleClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.DoubleClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.LeftClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.LeftClickCommand">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.LeftClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            left-clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.LeftClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:NotifyIconLib.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.LeftClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.LeftClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:NotifyIconLib.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.LeftClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.LeftClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:NotifyIconLib.TaskbarIcon.LeftClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayActivatedEvent">
            <summary>
            TrayActivated Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayActivated">
            <summary>
            Occurs when the user presses the left mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayActivatedEvent">
            <summary>
            A helper method to raise the TrayActivated event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayActivatedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayActivated event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayContextMenuEvent">
            <summary>
            TrayContextMenu Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayContextMenu">
            <summary>
            Occurs when the user presses the left mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayContextMenuEvent">
            <summary>
            A helper method to raise the TrayContextMenu event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayContextMenuEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayContextMenu event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayLeftMouseDownEvent">
            <summary>
            TrayLeftMouseDown Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayLeftMouseDown">
            <summary>
            Occurs when the user presses the left mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayLeftMouseDownEvent">
            <summary>
            A helper method to raise the TrayLeftMouseDown event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayLeftMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayRightMouseDownEvent">
            <summary>
            TrayRightMouseDown Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayRightMouseDown">
            <summary>
            Occurs when the presses the right mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayRightMouseDownEvent">
            <summary>
            A helper method to raise the TrayRightMouseDown event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayRightMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayMiddleMouseDownEvent">
            <summary>
            TrayMiddleMouseDown Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayMiddleMouseDown">
            <summary>
            Occurs when the user presses the middle mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMiddleMouseDownEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseDown event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMiddleMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayLeftMouseUpEvent">
            <summary>
            TrayLeftMouseUp Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayLeftMouseUp">
            <summary>
            Occurs when the user releases the left mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayLeftMouseUpEvent">
            <summary>
            A helper method to raise the TrayLeftMouseUp event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayLeftMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayRightMouseUpEvent">
            <summary>
            TrayRightMouseUp Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayRightMouseUp">
            <summary>
            Occurs when the user releases the right mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayRightMouseUpEvent">
            <summary>
            A helper method to raise the TrayRightMouseUp event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayRightMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayMiddleMouseUpEvent">
            <summary>
            TrayMiddleMouseUp Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayMiddleMouseUp">
            <summary>
            Occurs when the user releases the middle mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMiddleMouseUpEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseUp event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMiddleMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayMouseDoubleClickEvent">
            <summary>
            TrayMouseDoubleClick Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayMouseDoubleClick">
            <summary>
            Occurs when the user double-clicks the taskbar icon.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMouseDoubleClickEvent">
            <summary>
            A helper method to raise the TrayMouseDoubleClick event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMouseDoubleClickEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseDoubleClick event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayMouseMoveEvent">
            <summary>
            TrayMouseMove Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayMouseMove">
            <summary>
            Occurs when the user moves the mouse over the taskbar icon.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMouseMoveEvent">
            <summary>
            A helper method to raise the TrayMouseMove event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayMouseMoveEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseMove event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayBalloonTipShownEvent">
            <summary>
            TrayBalloonTipShown Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayBalloonTipShown">
            <summary>
            Occurs when a balloon ToolTip is displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayBalloonTipShownEvent">
            <summary>
            A helper method to raise the TrayBalloonTipShown event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayBalloonTipShownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipShown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayBalloonTipClosedEvent">
            <summary>
            TrayBalloonTipClosed Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayBalloonTipClosed">
            <summary>
            Occurs when a balloon ToolTip was closed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayBalloonTipClosedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClosed event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayBalloonTipClosedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClosed event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayBalloonTipClickedEvent">
            <summary>
            TrayBalloonTipClicked Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayBalloonTipClicked">
            <summary>
            Occurs when the user clicks on a balloon ToolTip.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayBalloonTipClickedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClicked event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayBalloonTipClickedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClicked event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayContextMenuOpenEvent">
            <summary>
            TrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayContextMenuOpen">
            <summary>
            Bubbled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the TrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.PreviewTrayContextMenuOpenEvent">
            <summary>
            PreviewTrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.PreviewTrayContextMenuOpen">
            <summary>
            Tunneled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayPopupOpenEvent">
            <summary>
            TrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayPopupOpen">
            <summary>
            Bubbled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayPopupOpenEvent">
            <summary>
            A helper method to raise the TrayPopupOpen event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.PreviewTrayPopupOpenEvent">
            <summary>
            PreviewTrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.PreviewTrayPopupOpen">
            <summary>
            Tunneled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayPopupOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayPopupOpen event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayToolTipOpenEvent">
            <summary>
            TrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayToolTipOpen">
            <summary>
            Bubbled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the TrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.PreviewTrayToolTipOpenEvent">
            <summary>
            PreviewTrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.PreviewTrayToolTipOpen">
            <summary>
            Tunneled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.TrayToolTipCloseEvent">
            <summary>
            TrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayToolTipClose">
            <summary>
            Bubbled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the TrayToolTipClose event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.PreviewTrayToolTipCloseEvent">
            <summary>
            PreviewTrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.PreviewTrayToolTipClose">
            <summary>
            Tunneled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipClose event.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.PopupOpenedEvent">
            <summary>
            PopupOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.AddPopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RemovePopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaisePopupOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PopupOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.ToolTipOpenedEvent">
            <summary>
            ToolTipOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.AddToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RemoveToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseToolTipOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.ToolTipCloseEvent">
            <summary>
            ToolTipClose Attached Routed Event
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.AddToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RemoveToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.BalloonShowingEvent">
            <summary>
            BalloonShowing Attached Routed Event
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.AddBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RemoveBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseBalloonShowingEvent(System.Windows.DependencyObject,NotifyIconLib.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonShowing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:NotifyIconLib.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.BalloonClosingEvent">
            <summary>
            BalloonClosing Attached Routed Event
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.AddBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RemoveBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.RaiseBalloonClosingEvent(System.Windows.DependencyObject,NotifyIconLib.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonClosing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:NotifyIconLib.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:NotifyIconLib.TaskbarIcon.ParentTaskbarIconProperty">
            <summary>
            An attached property that is assigned to displayed UI elements (balloos, tooltips, context menus), and
            that can be used to bind to this control. The attached property is being derived, so binding is
            quite straightforward:
            <code>
            <TextBlock Text="{Binding RelativeSource={RelativeSource Self}, Path=(tb:TaskbarIcon.ParentTaskbarIcon).ToolTipText}" />
            </code>
            </summary>  
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.GetParentTaskbarIcon(System.Windows.DependencyObject)">
            <summary>
            Gets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.SetParentTaskbarIcon(System.Windows.DependencyObject,NotifyIconLib.TaskbarIcon)">
            <summary>
            Sets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.#cctor">
            <summary>
            Registers properties.
            </summary>
        </member>
        <member name="P:NotifyIconLib.TaskbarIcon.TrayDropEnabled">
            <summary>
            The value of this property determins whether the nessesary hooks will be installed to handle TrayDrop notifications. 
            For <see cref="E:NotifyIconLib.TaskbarIcon.TrayDrop"/> to work, this must be true and the taskbar icon must be pinned to the task bar.
            </summary>
        </member>
        <member name="E:NotifyIconLib.TaskbarIcon.TrayDrop">
            <summary>
            Occurs when a drop event is triggered on this notification icon. <see cref="P:NotifyIconLib.TaskbarIcon.TrayDropEnabled"/> must be
            set to true, and the taskbar icon must be pinned to the task bar for events to occur.
            </summary>
        </member>
        <member name="M:NotifyIconLib.TaskbarIcon.GetNotifyIconState">
            <summary>
            Returns a struct containing information about the current taskbar icon, such as location,
            and also if the icon is hidden, in the flyout, or pinned to the taskbar.
            </summary>
        </member>
        <member name="T:NotifyIconLib.TaskbarIconData">
            <summary>
            Contains information about the current taskbar icon location,
            and also if the icon is hidden, in the flyout, or pinned to the taskbar.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIconData.Location">
            <summary>
            The current location of the taskbar icon. This property is not DPI aware.
            </summary>
        </member>
        <member name="F:NotifyIconLib.TaskbarIconData.State">
            <summary>
            Contains information about the current state of the taskbar icon
            </summary>
        </member>
        <member name="T:NotifyIconLib.TaskbarIconState">
            <summary>
            Defines the different states the taskbar icon can be in at any given time.
            </summary>
        </member>
        <member name="T:NotifyIconLib.Util">
            <summary>
            Util and extension methods.
            </summary>
        </member>
        <member name="P:NotifyIconLib.Util.IsDesignMode">
            <summary>
            Checks whether the application is currently in design mode.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Util.CreateHelperWindow">
            <summary>
            Creates an transparent window without dimension that
            can be used to temporarily obtain focus and/or
            be used as a window message sink.
            </summary>
            <returns>Empty window.</returns>
        </member>
        <member name="M:NotifyIconLib.Util.WriteIconData(NotifyIconLib.Interop.NotifyIconData@,NotifyIconLib.Interop.NotifyCommand)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:NotifyIconLib.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:NotifyIconLib.Util.WriteIconData(NotifyIconLib.Interop.NotifyIconData@,NotifyIconLib.Interop.NotifyCommand,NotifyIconLib.Interop.IconDataMembers)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:NotifyIconLib.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <param name="flags">Defines which members of the <paramref name="data"/>
            structure are set.</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:NotifyIconLib.Util.GetBalloonFlag(NotifyIconLib.BalloonIcon)">
            <summary>
            Gets a <see cref="T:NotifyIconLib.Interop.BalloonFlags"/> enum value that
            matches a given <see cref="T:NotifyIconLib.BalloonIcon"/>.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Util.ToIcon(System.Windows.Media.ImageSource)">
            <summary>
            Reads a given image resource into a WinForms icon.
            </summary>
            <param name="imageSource">Image source pointing to
            an icon file (*.ico).</param>
            <returns>An icon object that can be used with the
            taskbar area.</returns>
        </member>
        <member name="M:NotifyIconLib.Util.Is``1(``0,``0[])">
            <summary>
            Checks a list of candidates for equality to a given
            reference value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The evaluated value.</param>
            <param name="candidates">A liste of possible values that are
            regarded valid.</param>
            <returns>True if one of the submitted <paramref name="candidates"/>
            matches the evaluated value. If the <paramref name="candidates"/>
            parameter itself is null, too, the method returns false as well,
            which allows to check with null values, too.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="candidates"/>
            is a null reference.</exception>
        </member>
        <member name="M:NotifyIconLib.Util.IsMatch(NotifyIconLib.Interop.MouseEvent,NotifyIconLib.PopupActivationMode)">
            <summary>
            Checks if a given <see cref="T:NotifyIconLib.PopupActivationMode"/> is a match for
            an effectively pressed mouse button.
            </summary>
        </member>
        <member name="M:NotifyIconLib.Util.ExecuteIfEnabled(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Executes a given command if its <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method
            indicates it can run.
            </summary>
            <param name="command">The command to be executed, or a null reference.</param>
            <param name="commandParameter">An optional parameter that is associated with
            the command.</param>
            <param name="target">The target element on which to raise the command.</param>
        </member>
        <member name="M:NotifyIconLib.Util.GetDispatcher(System.Windows.Threading.DispatcherObject)">
            <summary>
            Returns a dispatcher for multi-threaded scenarios
            </summary>
            <returns></returns>
        </member>
        <member name="M:NotifyIconLib.Util.IsDataContextDataBound(System.Windows.FrameworkElement)">
            <summary>
            Checks whether the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/>
             is bound or not.
            </summary>
            <param name="element">The element to be checked.</param>
            <returns>True if the data context property is being managed by a
            binding expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/>
            is a null reference.</exception>
        </member>
        <member name="T:Clowd.DropWindow">
            <summary>
            Interaction logic for DropWindow.xaml
            </summary>
            <summary>
            DropWindow
            </summary>
        </member>
        <member name="M:Clowd.DropWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.NotifyArea.GetButtonRectangle">
            <summary>
            Retrieves the rectangle of the 'Show Hidden Icons' button, or null if it can't be found.
            </summary>
            <returns>Rectangle containing bounds of 'Show Hidden Icons' button, or null if it can't be found.</returns>
        </member>
    </members>
</doc>
