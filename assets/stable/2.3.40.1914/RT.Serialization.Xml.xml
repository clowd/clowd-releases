<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RT.Serialization.Xml</name>
    </assembly>
    <members>
        <member name="T:RT.Serialization.ClassifyXml">
            <summary>Offers a convenient way to use <see cref="T:RT.Serialization.Classify"/> to serialize objects using the XML format.</summary>
        </member>
        <member name="F:RT.Serialization.ClassifyXml.DefaultFormat">
            <summary>
                Format used when null is passed to methods that take a format. Make sure not to modify this instance if any
                thread in the application might be in the middle of using <see cref="T:RT.Serialization.ClassifyXml"/>; ideally the options shoud
                be set once during startup and never changed after that.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.DeserializeFile``1(System.String,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Reconstructs an object of the specified type from the specified file.</summary>
            <typeparam name="T">
                Type of object to read.</typeparam>
            <param name="options">
                Options.</param>
            <param name="filename">
                Path and filename of the file to read from.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.DeserializeFile(System.Type,System.String,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Reconstructs an object of the specified type from the specified file.</summary>
            <param name="type">
                Type of object to read.</param>
            <param name="options">
                Options.</param>
            <param name="filename">
                Path and filename of the file to read from.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.Deserialize``1(System.Xml.Linq.XElement,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Reconstructs an object of the specified type from the specified serialized form.</summary>
            <typeparam name="T">
                Type of object to reconstruct.</typeparam>
            <param name="xml">
                Serialized form to reconstruct object from.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.Deserialize(System.Type,System.Xml.Linq.XElement,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Reconstructs an object of the specified type from the specified serialized form.</summary>
            <param name="type">
                Type of object to reconstruct.</param>
            <param name="xml">
                Serialized form to reconstruct object from.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
            <returns>
                A new instance of the requested type.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.DeserializeIntoObject``1(System.Xml.Linq.XElement,``0,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Reconstructs an object of the specified type from the specified serialized form by applying the values to an
                existing instance of the type.</summary>
            <typeparam name="T">
                Type of object to reconstruct.</typeparam>
            <param name="xml">
                Serialized form to reconstruct object from.</param>
            <param name="intoObject">
                Object to assign values to in order to reconstruct the original object.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.DeserializeFileIntoObject(System.String,System.Object,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Reconstructs an object from the specified file by applying the values to an existing instance of the desired
                type. The type of object is inferred from the object passed in.</summary>
            <param name="filename">
                Path and filename of the file to read from.</param>
            <param name="intoObject">
                Object to assign values to in order to reconstruct the original object. Also determines the type of object
                expected.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.SerializeToFile``1(``0,System.String,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Stores the specified object in a file with the given path and filename.</summary>
            <typeparam name="T">
                Type of the object to store.</typeparam>
            <param name="saveObject">
                Object to store in a file.</param>
            <param name="filename">
                Path and filename of the file to be created. If the file already exists, it is overwritten.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.SerializeToFile(System.Type,System.Object,System.String,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Stores the specified object in a file with the given path and filename.</summary>
            <param name="saveType">
                Type of the object to store.</param>
            <param name="saveObject">
                Object to store in a file.</param>
            <param name="filename">
                Path and filename of the file to be created. If the file already exists, it is overwritten.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.Serialize``1(``0,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Converts the specified object into a serialized form.</summary>
            <typeparam name="T">
                Type of object to convert.</typeparam>
            <param name="saveObject">
                Object to be serialized.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
            <returns>
                The serialized form generated from the object.</returns>
        </member>
        <member name="M:RT.Serialization.ClassifyXml.Serialize(System.Type,System.Object,RT.Serialization.ClassifyOptions,RT.Serialization.IClassifyFormat{System.Xml.Linq.XElement})">
            <summary>
                Converts the specified object into a serialized form.</summary>
            <param name="saveType">
                Type of object to convert.</param>
            <param name="saveObject">
                Object to be serialized.</param>
            <param name="options">
                Options.</param>
            <param name="format">
                Implementation of a Classify format. See <see cref="T:RT.Serialization.ClassifyXmlFormat"/> for an example.</param>
            <returns>
                The serialized form generated from the object.</returns>
        </member>
        <member name="T:RT.Serialization.IClassifyXmlObjectProcessor">
            <summary>
                Contains methods to process an object and/or the associated serialized form before or after <see cref="T:RT.Serialization.Classify"/>
                (de)serializes it. To have effect, this interface must be implemented by the object being serialized.</summary>
        </member>
        <member name="T:RT.Serialization.IClassifyXmlTypeProcessor">
            <summary>
                Contains methods to process an object and/or the associated serialized form before or after <see cref="T:RT.Serialization.Classify"/>
                (de)serializes it. To have effect, this interface must be implemented by a class and passed into <see
                cref="M:RT.Serialization.ClassifyOptions.AddTypeProcessor``1(System.Type,RT.Serialization.IClassifyTypeProcessor{``0})"/>.</summary>
        </member>
        <member name="T:RT.Serialization.ClassifyXmlFormat">
            <summary>
                Provides a format to serialize/deserialize objects as XML using <see cref="T:RT.Serialization.Classify"/> and any serialization
                options which are format-specific. This class can only be instantiated through the factory method <see
                cref="M:RT.Serialization.ClassifyXmlFormat.Create(System.String)"/>. See also <see cref="P:RT.Serialization.ClassifyXmlFormat.Default"/>.</summary>
        </member>
        <member name="P:RT.Serialization.ClassifyXmlFormat.Default">
            <summary>Gets the XML Classify format with all options at their defaults.</summary>
        </member>
        <member name="M:RT.Serialization.ClassifyXmlFormat.Create(System.String)">
            <summary>
                Creates an XML Classify format with the specified XML-specific options.</summary>
            <param name="rootTagName">
                Specifies the XML tag name to use for the root element of a serialized object.</param>
            <returns/>
        </member>
        <member name="T:RT.Util.ExtensionMethods.CustomComparerExtensions">
            <summary>Extension methods related to custom comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CustomComparerExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparison delegate.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IEnumerableExtensions">
            <summary>Provides extension methods on the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all pairs of elements from the source collection. For example, the
                input sequence 1, 2 yields the pairs [1,1], [1,2], [2,1], and [2,2].</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>Returns an enumeration of objects computed from all pairs of elements from the source collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.UniquePairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all unique pairs of distinct elements from the source collection.
                For example, the input sequence 1, 2, 3 yields the pairs [1,2], [1,3] and [2,3] only.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ConsecutivePairs``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
                Returns an enumeration of tuples containing all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is false, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is true.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectConsecutivePairs``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,``0,``1})">
            <summary>
                Enumerates all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is <c>false</c>, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is
                <c>true</c>.</param>
            <param name="selector">
                The selector function to run each consecutive pair through.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Sorts the elements of a sequence in ascending order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Splits the specified IEnumerable at every element that satisfies a specified predicate and returns a
                collection containing each sequence of elements in between each pair of such elements. The elements satisfying
                the predicate are not included.</summary>
            <param name="splitWhat">
                The collection to be split.</param>
            <param name="splitWhere">
                A predicate that determines which elements constitute the separators.</param>
            <returns>
                A collection containing the individual pieces taken from the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Adds a single element to the end of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing all the input elements, followed by the specified additional element.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds a single element to the start of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing the specified additional element, followed by all the input elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})"/>, but it is much faster if you intend to extract
                only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <returns>
                The given <see cref="T:System.Collections.Generic.IEnumerable`1"/> with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>, but it is much faster if you intend
                to extract only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <param name="comparer">
                An instance of <see cref="T:System.Collections.Generic.IComparer`1"/> specifying the comparison to use on the items.</param>
            <returns>
                The given IEnumerable&lt;T&gt; with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The list of items to permute.</param>
            <returns>
                A collection containing all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Subsequences``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
                Returns all subsequences of the specified lengths of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The sequence of items to generate subsequences of.</param>
            <param name="minLength">
                The minimum length of a subsequence to return. Must be between 0 and the length of the input collection.</param>
            <param name="maxLength">
                The maximum length of a subsequence to return. Must be between 0 and the length of the input collection. If
                <c>null</c> is specified, the size of the input collection is used.</param>
            <returns>
                A collection containing all matching subsequences of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the first element of a sequence, or <c>null</c> if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the first element of a sequence that satisfies a given predicate, or <c>null</c> if the sequence
                contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                Only consider elements that satisfy this predicate.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref
                name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test
                specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1},``1)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the resulting value.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="resultSelector">
                A function to transform the first element into the result value. Will only be called if the sequence contains
                an element that passes the test specified by <paramref name="predicate"/>.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the transformed first element in <paramref name="source"/> that
                passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>, starting at the specified <paramref name="startIndex"/>. If no such elements are found,
                returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the last element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
            <remarks>
                This method is optimised for the case in which the input sequence is a list or array. In all other cases, the
                collection is evaluated completely before this method returns.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> that is equal to the specified
                <paramref name="element"/> as determined by the specified <paramref name="comparer"/>. If no such elements are
                found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the minimum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the maximum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the minimum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the maximum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value, or
                a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value, or a
                default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value, or <c>null</c> if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value, or a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
                Enumerates the items of this collection, skipping the last <paramref name="count"/> items. Note that the
                memory usage of this method is proportional to <paramref name="count"/>, but the source collection is only
                enumerated once, and in a lazy fashion. Also, enumerating the first item will take longer than enumerating
                subsequent items.</summary>
            <param name="source">
                Source collection.</param>
            <param name="count">
                Number of items to skip from the end of the collection.</param>
            <param name="throwIfNotEnough">
                If <c>true</c>, the enumerator throws at the end of the enumeration if the source collection contained fewer
                than <paramref name="count"/> elements.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a collection containing only the last <paramref name="count"/> items of the input collection. This
                method enumerates the entire collection to the end once before returning. Note also that the memory usage of
                this method is proportional to <paramref name="count"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Queue`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Stack`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <typeparam name="TValue">
                The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="elementSelector">
                A transform function to produce a result element value from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in the current IDictionary&lt;K, List&lt;V&gt;&gt;. If the specified
                key does not exist in the current IDictionary, a new List is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
                Adds an element to a HashSet&lt;V&gt; stored in the current IDictionary&lt;K, HashSet&lt;V&gt;&gt;. If the
                specified key does not exist in the current IDictionary, a new HashSet is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the HashSets.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the HashSet is located in the IDictionary.</param>
            <param name="value">
                Value to add to the HashSet located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Adds an element to a two-level Dictionary&lt;,&gt;. If the specified key does not exist in the outer
                Dictionary, a new Dictionary is created.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <param name="value">
                Value to add to the inner Dictionary.</param>
            <param name="comparer">
                Optional equality comparer to pass into the inner dictionary if a new one is created.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1)">
            <summary>
                Removes an element from a two-level Dictionary&lt;,&gt;. If this leaves the inner dictionary empty, the key is
                removed from the outer Dictionary.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <returns>
                A value indicating whether a value was removed or not.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.List{``2}}},``0,``1,``2)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in a two-level Dictionary&lt;,&gt;. If the specified key does not
                exist in the current Dictionary, a new List is created.</summary>
            <typeparam name="K1">
                Type of the key of the first-level Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the second-level Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the second-level Dictionary is located in the first-level Dictionary.</param>
            <param name="key2">
                Key at which the list is located in the second-level Dictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IncSafe``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
                Increments an integer in an <see cref="T:System.Collections.Generic.IDictionary`2"/> by the specified amount. If the specified
                key does not exist in the current dictionary, the value <paramref name="amount"/> is inserted.</summary>
            <typeparam name="K">
                Type of the key of the dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the dictionary.</param>
            <param name="amount">
                The amount by which to increment the integer.</param>
            <returns>
                The new value at the specified key.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Removes the first occurrence of an element from a List&lt;V&gt; stored in the current IDictionary&lt;K,
                List&lt;V&gt;&gt;. If this leaves the list stored at the specified key empty, the key is removed from the
                IDictionary. If the key is not in the dictionary to begin with, nothing happens.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectIndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Returns a collection of integers containing the indexes at which the elements of the source collection match
                the given predicate.</summary>
            <typeparam name="T">
                The type of elements in the collection.</typeparam>
            <param name="source">
                The source collection whose elements are tested using <paramref name="predicate"/>.</param>
            <param name="predicate">
                The predicate against which the elements of <paramref name="source"/> are tested.</param>
            <returns>
                A collection containing the zero-based indexes of all the matching elements, in increasing order.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectTwo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                Transforms every element of an input collection using two selector functions and returns a collection
                containing all the results.</summary>
            <typeparam name="TSource">
                Type of the elements in the source collection.</typeparam>
            <typeparam name="TResult">
                Type of the results of the selector functions.</typeparam>
            <param name="source">
                Input collection to transform.</param>
            <param name="selector1">
                First selector function.</param>
            <param name="selector2">
                Second selector function.</param>
            <returns>
                A collection containing the transformed elements from both selectors, thus containing twice as many elements
                as the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the original collection but with every value cast to their nullable equivalent.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.JoinString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
                Turns all elements in the enumerable to strings and joins them using the specified <paramref
                name="separator"/> and the specified <paramref name="prefix"/> and <paramref name="suffix"/> for each string.</summary>
            <param name="values">
                The sequence of elements to join into a string.</param>
            <param name="separator">
                Optionally, a separator to insert between each element and the next.</param>
            <param name="prefix">
                Optionally, a string to insert in front of each element.</param>
            <param name="suffix">
                Optionally, a string to insert after each element.</param>
            <param name="lastSeparator">
                Optionally, a separator to use between the second-to-last and the last element.</param>
            <example>
                <code>
                    // Returns "[Paris], [London], [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]")
                    
                    // Returns "[Paris], [London] and [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]", " and ");</code></example>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetween``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Inserts the specified item in between each element in the input collection.</summary>
            <param name="source">
                The input collection.</param>
            <param name="extraElement">
                The element to insert between each consecutive pair of elements in the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { 1, 2, 3
                }.InsertBetween(0) returns { 1, 0, 2, 0, 3 }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetweenWithAnd``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
                Inserts the <paramref name="comma"/> item in between each element in the input collection except between the
                second-last and last, where it inserts <paramref name="and"/> instead.</summary>
            <param name="source">
                The input collection.</param>
            <param name="comma">
                The element to insert between each consecutive pair of elements in the input collection except between the
                second-last and last.</param>
            <param name="and">
                The element to insert between the second-last and last element of the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { "a",
                "b", "c" }.InsertBetweenWithAnd(", ", " and ") returns { "a", ", ", "b", " and ", "c" }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>Determines whether this sequence comprises the values provided in the specified order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllSequencesEqual``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Determines whether all the input sequences are equal according to SequenceEquals.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Splits a collection into chunks of equal size. The last chunk may be smaller than <paramref
                name="chunkSize"/>, but all chunks, if any, will contain at least one item.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemEquality">
                An optional function to determine equality of items.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemComparer">
                An optional equality comparer to determine item equality by.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutiveBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Accumulates consecutive elements that are equal when processed by a selector.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <typeparam name="TKey">
                The return type of the <paramref name="selector"/> function.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="selector">
                A function to transform each item into a key which is compared for equality.</param>
            <param name="keyComparer">
                An optional equality comparer for the keys returned by <paramref name="selector"/>.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectChain``1(``0,System.Func{``0,``0})">
            <summary>
                Enumerates a chain of objects where each object refers to the next one. The chain starts with the specified
                object and ends when null is encountered.</summary>
            <typeparam name="T">
                Type of object to enumerate.</typeparam>
            <param name="obj">
                Initial object.</param>
            <param name="next">
                A function that returns the next object given the current one. If null is returned, enumeration will end.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence, and how often.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="count">
                Receives the number of times the element occurred.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Returns the sum of the values in the specified collection, truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Returns the sum of the values in the specified collection projected by the specified selector function,
                truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
                Returns only the non-<c>null</c> elements from the specified collection of nullable values as non-nullable
                values.</summary>
            <typeparam name="T">
                The inner value type.</typeparam>
            <param name="src">
                A collection of nullable values.</param>
            <returns>
                A collection containing only those values that aren’t <c>null</c>.</returns>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ConsecutiveGroup`2">
            <summary>
                Encapsulates information about a group generated by <see
                cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/> and its
                overloads.</summary>
            <typeparam name="TItem">
                Type of the elements in the sequence.</typeparam>
            <typeparam name="TKey">
                Type of the key by which elements were compared.</typeparam>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Index">
            <summary>Index in the original sequence where the group started.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Count">
            <summary>Size of the group.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Key">
            <summary>The key by which the items in this group are deemed equal.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.</summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.ToString">
            <summary>Returns a string that represents this group’s key and its count.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.StringExtensions">
            <summary>Provides extension methods on the <see cref="T:System.String"/> type.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.StringExtensions.CharsBase64Url">
            <summary>Contains the set of characters that are used in base64-url encoding.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
                Concatenates the specified number of repetitions of the current string.</summary>
            <param name="input">
                The string to be repeated.</param>
            <param name="numTimes">
                The number of times to repeat the string.</param>
            <returns>
                A concatenated string containing the original string the specified number of times.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.HtmlEscape(System.String,System.Boolean,System.Boolean)">
            <summary>
                Escapes all necessary characters in the specified string so as to make it usable safely in an HTML or XML
                context.</summary>
            <param name="input">
                The string to apply HTML or XML escaping to.</param>
            <param name="leaveSingleQuotesAlone">
                If <c>true</c>, does not escape single quotes (<c>'</c>, U+0027).</param>
            <param name="leaveDoubleQuotesAlone">
                If <c>true</c>, does not escape single quotes (<c>"</c>, U+0022).</param>
            <returns>
                The specified string with the necessary HTML or XML escaping applied.</returns>
        </member>
        <member name="P:RT.Util.ExtensionMethods.StringExtensions._urlAllowedBytes">
            <summary>Contains the set of ASCII characters allowed in a URL.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)">
            <summary>
                Escapes all necessary characters in the specified string so as to make it usable safely in a URL.</summary>
            <param name="input">
                The string to apply URL escaping to.</param>
            <returns>
                The specified string with the necessary URL escaping applied.</returns>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlUnescape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlUnescape(System.String)">
            <summary>
                Reverses the escaping performed by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)"/> by decoding hexadecimal URL escape sequences into
                their original characters.</summary>
            <param name="input">
                String containing URL escape sequences to be decoded.</param>
            <returns>
                The specified string with all URL escape sequences decoded.</returns>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)"/>
        </member>
        <member name="P:RT.Util.ExtensionMethods.StringExtensions._filenameDisallowedCharacters">
            <summary>Contains the set of characters disallowed in file names across all filesystems supported by our software.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersEscape(System.String,System.Boolean)">
            <summary>
                Escapes all characters in this string which cannot form part of a valid filename on at least one supported
                filesystem. The escaping is fully reversible (via <see cref="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersUnescape(System.String)"/>), but does not
                treat characters at specific positions differently (e.g. the "." at the end of the name is not escaped, even
                though it will disappear on a Win32 system).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersUnescape(System.String)">
            <summary>
                Reverses the transformation done by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersEscape(System.String,System.Boolean)"/>. This routine will also work on
                filenames that cannot have been generated by the above escape procedure; any "invalid" escapes will be
                preserved as-is.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf8(System.String)">
            <summary>
                Converts the specified string to UTF-8.</summary>
            <param name="input">
                String to convert to UTF-8.</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-8 encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf16(System.String)">
            <summary>
                Converts the specified string to UTF-16.</summary>
            <param name="input">
                String to convert to UTF-16.</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-16 encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf16BE(System.String)">
            <summary>
                Converts the specified string to UTF-16 (Big Endian).</summary>
            <param name="input">
                String to convert to UTF-16 (Big Endian).</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-16 (Big Endian) encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf8(System.Byte[],System.Boolean)">
            <summary>
                Converts the specified raw UTF-8 data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-8 text.</param>
            <param name="removeBom">
                <c>true</c> to remove the first character if it is a UTF-8 BOM.</param>
            <returns>
                A string containing the characters represented by the UTF-8-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf16(System.Byte[])">
            <summary>
                Converts the specified raw UTF-16 (little-endian) data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-16 text.</param>
            <returns>
                A string containing the characters represented by the UTF-16-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf16BE(System.Byte[])">
            <summary>
                Converts the specified raw UTF-16 (big-endian) data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-16BE text.</param>
            <returns>
                A string containing the characters represented by the UTF-16BE-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Utf8Length(System.String)">
            <summary>
                Determines the length of the UTF-8 encoding of the specified string.</summary>
            <param name="input">
                String to determined UTF-8 length of.</param>
            <returns>
                The length of the string in bytes when encoded as UTF-8.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Utf16Length(System.String)">
            <summary>
                Determines the length of the UTF-16 encoding of the specified string.</summary>
            <param name="input">
                String to determined UTF-16 length of.</param>
            <returns>
                The length of the string in bytes when encoded as UTF-16.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.JsEscapeNull(System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Returns a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped.
                Returns "null" if the input is null.</summary>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
            <returns>
                JavaScript- or JSON-compatible representation of the input string, or the "null" keyword if the input is null.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.JsEscape(System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Returns a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped.</summary>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
            <returns>
                JavaScript- or JSON-compatible representation of the input string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.AppendJsEscaped(System.Text.StringBuilder,System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Appends a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped
                into the specified StringBuilder.</summary>
            <param name="sb">
                The StringBuilder to add the result to.</param>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SqlEscape(System.String)">
            <summary>
                Returns an SQL-compatible representation of the string in single-quotes with the appropriate characters
                escaped.</summary>
            <param name="input">
                String to escape.</param>
            <returns>
                SQL-compatible representation of the input string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlEncode(System.Byte[])">
            <summary>
                Encodes this byte array to base-64-url format, which is safe for use in URLs and does not contain the
                unnecessary padding when the number of bytes is not divisible by 3.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlDecode(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlDecode(System.String)">
            <summary>
                Decodes this string from base-64-url encoding, which is safe for use in URLs and does not contain the
                unnecessary padding when the number of bytes is not divisible by 3, into a byte array.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlEncode(System.Byte[])"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)">
            <summary>
                Escapes all characters in this string whose code is less than 32 or form invalid UTF-16 using C/C#-compatible
                backslash escapes.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralUnescape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralUnescape(System.String)">
            <summary>
                Reverses the escaping done by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)"/>. Note that unescaping is not fully C/C#-compatible
                in the sense that not all strings that are valid string literals in C/C# can be correctly unescaped by this
                procedure.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns the specified collection, but with leading and trailing empty strings and nulls removed.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.WordWrap(System.String,System.Int32,System.Int32)">
            <summary>
                Word-wraps the current string to a specified width. Supports UNIX-style newlines and indented paragraphs.</summary>
            <remarks>
                <para>
                    The supplied text will be split into "paragraphs" at the newline characters. Every paragraph will begin on
                    a new line in the word-wrapped output, indented by the same number of spaces as in the input. All
                    subsequent lines belonging to that paragraph will also be indented by the same amount.</para>
                <para>
                    All multiple contiguous spaces will be replaced with a single space (except for the indentation).</para></remarks>
            <param name="text">
                Text to be word-wrapped.</param>
            <param name="maxWidth">
                The maximum number of characters permitted on a single line, not counting the end-of-line terminator.</param>
            <param name="hangingIndent">
                The number of spaces to add to each line except the first of each paragraph, thus creating a hanging
                indentation.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UnifyLineEndings(System.String)">
            <summary>Attempts to detect Unix-style and Mac-style line endings and converts them to Windows (\r\n).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlStartsWith(System.String,System.String)">
            <summary>
                Determines whether the specified URL starts with the specified URL path. For example, the URL
                "/directory/file" starts with "/directory" but not with "/dir".</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SubstringSafe(System.String,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32)"/> but does not throw exceptions when the start index falls outside
                the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> but does not throw exceptions when the start index or length
                (or both) fall outside the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.EqualsNoCase(System.String,System.String)">
            <summary>
                Determines whether this string is equal to the other string under the ordinal case-insensitive comparison
                (<see cref="F:System.StringComparison.OrdinalIgnoreCase"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ContainsNoCase(System.String,System.String)">
            <summary>
                Determines whether this string contains the other string under the ordinal case-insensitive comparison (<see
                cref="F:System.StringComparison.OrdinalIgnoreCase"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.EndsWith(System.String,System.Nullable{System.Char})">
            <summary>
                Returns true if and only if this string ends with the specified character.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.StartsWith(System.String,System.Nullable{System.Char})"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.StartsWith(System.String,System.Nullable{System.Char})">
            <summary>
                Returns true if and only if this string starts with the specified character.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.EndsWith(System.String,System.Nullable{System.Char})"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromHex(System.String)">
            <summary>Reconstructs a byte array from its hexadecimal representation (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Unindent(System.String)">
            <summary>
                Removes the overall indentation of the specified string while maintaining the relative indentation of each
                line.</summary>
            <param name="str">
                String to remove indentation from.</param>
            <returns>
                A string in which every line that isn’t all whitespace has had spaces removed from the beginning equal to the
                least amount of spaces at the beginning of any line.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Indent(System.String,System.Int32,System.Boolean)">
            <summary>
                Inserts spaces at the beginning of every line contained within the specified string.</summary>
            <param name="str">
                String to add indentation to.</param>
            <param name="by">
                Number of spaces to add.</param>
            <param name="indentFirstLine">
                If true (default), all lines are indented; otherwise, all lines except the first.</param>
            <returns>
                The indented string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.RemoveCommonIndentation(System.String)">
            <summary>
                Removes spaces from the beginning of every line in such a way that the smallest indentation is reduced to
                zero. Lines which contain only whitespace are not considered in the calculation and may therefore become
                empty.</summary>
            <param name="str">
                The string to transform.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Split(System.String,System.Int32)">
            <summary>
                Splits a string into chunks of equal size. The last chunk may be smaller than <paramref name="chunkSize"/>,
                but all chunks, if any, will contain at least 1 character.</summary>
            <param name="str">
                String to split into chunks.</param>
            <param name="chunkSize">
                Size of each chunk. Must be greater than zero.</param>
            <returns>
                A lazy-evaluated collection containing the chunks from the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Returns a new string in which all occurrences of <paramref name="oldValue"/> in the current instance,
                identified using the specified string comparison, are replaced with <paramref name="newValue"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Split(System.String,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are delimited by elements of a
                specified string array.</summary>
            <param name="str">
                String to be split.</param>
            <param name="separator">
                Strings that delimit the substrings in this string.</param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by one or more strings in
                separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SplitNoEmpty(System.String,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are delimited by elements of a
                specified string array. Empty items (zero-length strings) are filtered out.</summary>
            <param name="str">
                String to be split.</param>
            <param name="separator">
                Strings that delimit the substrings in this string.</param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by one or more strings in
                separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.IsNumeric(System.String)">
            <summary>Determines whether the string contains only the characters 0-9.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.AddLine(System.String,System.String)">
            <summary>Adds the specified line to the end of the current string. Returns the line if the current string is null.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.JsQuotes">
            <summary>Selects how the escaped JS string should be put into quotes.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.Single">
            <summary>Put single quotes around the output. Single quotes are allowed in JavaScript only, but not in JSON.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.Double">
            <summary>Put double quotes around the output. Double quotes are allowed both in JavaScript and JSON.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.None">
            <summary>Do not put any quotes around the output. The escaped output may be surrounded with either type of quotes.</summary>
        </member>
        <member name="T:RT.Util.CustomComparer`1">
            <summary>
                Encapsulates an IComparer&lt;T&gt; that uses a comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared.</typeparam>
        </member>
        <member name="M:RT.Util.CustomComparer`1.Compare(`0,`0)">
            <summary>
                Compares two elements.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomComparer`1.#ctor(System.Comparison{`0})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this comparer.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.CustomEqualityComparer`1">
            <summary>
                Encapsulates an IEqualityComparer&lt;T&gt; that uses an equality comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared for equality.</typeparam>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Compares two elements for equality.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for an element.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
            <param name="getHashCode">
                Provides the hash function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Constructor which re-uses the default hash function. Use this overload only if using the objects’ original
                hash function is appropriate for this equality comparison.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Function used to compare values for equality. If null, will use IEquatable if implemented, or the object's
                Equals override.</param>
            <param name="getHashCode">
                Function used to compute hash codes. If null, will use IEquatable if implemented, or the object's GetHashCode
                override.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
    </members>
</doc>
