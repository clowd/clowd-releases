<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RT.Json</name>
    </assembly>
    <members>
        <member name="T:RT.Json.NumericConversionOptions">
            <summary>
                Specifies the degree of strictness or leniency when converting a <see cref="T:RT.Json.JsonValue"/> to a numerical type such
                as <c>int</c> or <c>double</c>.</summary>
        </member>
        <member name="F:RT.Json.NumericConversionOptions.Strict">
            <summary>
                The conversion only succeeds if the object is a <see cref="T:RT.Json.JsonNumber"/> and its value is exactly
                representable by the target type.</summary>
        </member>
        <member name="F:RT.Json.NumericConversionOptions.AllowConversionFromString">
            <summary>The conversion succeeds if the object is a <see cref="T:RT.Json.JsonString"/> with numerical content.</summary>
        </member>
        <member name="F:RT.Json.NumericConversionOptions.AllowZeroFractionToInteger">
            <summary>
                Ignored unless <see cref="F:RT.Json.NumericConversionOptions.AllowConversionFromString"/> is also specified. A conversion to an integer type
                succeeds if the string contains a decimal followed by a zero fractional part.</summary>
        </member>
        <member name="F:RT.Json.NumericConversionOptions.AllowConversionFromBool">
            <summary>
                The conversion succeeds if the object is a <see cref="T:RT.Json.JsonBool"/>, which will convert to 0 if false and 1 if
                true.</summary>
        </member>
        <member name="F:RT.Json.NumericConversionOptions.AllowTruncation">
            <summary>
                Allows conversion of non-integral numbers to integer types by truncation (rounding towards zero). If <see
                cref="F:RT.Json.NumericConversionOptions.AllowConversionFromString"/> is specified, strings containing a decimal part are also converted and
                truncated when converting to an integer type.</summary>
        </member>
        <member name="F:RT.Json.NumericConversionOptions.Lenient">
            <summary>Specifies maximum leniency.</summary>
        </member>
        <member name="T:RT.Json.StringConversionOptions">
            <summary>Specifies the degree of strictness or leniency when converting a <see cref="T:RT.Json.JsonValue"/> to a <c>string</c>.</summary>
        </member>
        <member name="F:RT.Json.StringConversionOptions.Strict">
            <summary>The conversion only succeeds if the object is a <see cref="T:RT.Json.JsonString"/>.</summary>
        </member>
        <member name="F:RT.Json.StringConversionOptions.AllowConversionFromNumber">
            <summary>The conversion succeeds if the object is a <see cref="T:RT.Json.JsonNumber"/>.</summary>
        </member>
        <member name="F:RT.Json.StringConversionOptions.AllowConversionFromBool">
            <summary>The conversion succeeds if the object is a <see cref="T:RT.Json.JsonBool"/>.</summary>
        </member>
        <member name="F:RT.Json.StringConversionOptions.Lenient">
            <summary>Specifies maximum leniency.</summary>
        </member>
        <member name="T:RT.Json.BoolConversionOptions">
            <summary>Specifies the degree of strictness or leniency when converting a <see cref="T:RT.Json.JsonValue"/> to a <c>bool</c>.</summary>
        </member>
        <member name="F:RT.Json.BoolConversionOptions.Strict">
            <summary>The conversion only succeeds if the object is a <see cref="T:RT.Json.JsonBool"/>.</summary>
        </member>
        <member name="F:RT.Json.BoolConversionOptions.AllowConversionFromNumber">
            <summary>
                The conversion succeeds if the object is a <see cref="T:RT.Json.JsonNumber"/>. 0 (zero) is converted to false, all other
                values to true.</summary>
        </member>
        <member name="F:RT.Json.BoolConversionOptions.AllowConversionFromString">
            <summary>
                The conversion succeeds if the object is a <see cref="T:RT.Json.JsonString"/> with specific content. The set of
                permissible strings is controlled by <see cref="F:RT.Json.JsonString.True"/>, <see cref="F:RT.Json.JsonString.False"/> and <see
                cref="F:RT.Json.JsonString.TrueFalseComparer"/>.</summary>
        </member>
        <member name="F:RT.Json.BoolConversionOptions.Lenient">
            <summary>Specifies maximum leniency.</summary>
        </member>
        <member name="T:RT.Json.JsQuotes">
            <summary>Selects how the escaped JS string should be put into quotes.</summary>
        </member>
        <member name="F:RT.Json.JsQuotes.Single">
            <summary>Put single quotes around the output. Single quotes are allowed in JavaScript only, but not in JSON.</summary>
        </member>
        <member name="F:RT.Json.JsQuotes.Double">
            <summary>Put double quotes around the output. Double quotes are allowed both in JavaScript and JSON.</summary>
        </member>
        <member name="F:RT.Json.JsQuotes.None">
            <summary>Do not put any quotes around the output. The escaped output may be surrounded with either type of quotes.</summary>
        </member>
        <member name="T:RT.Json.JsonParseException">
            <summary>Represents a JSON parsing exception.</summary>
        </member>
        <member name="P:RT.Json.JsonParseException.Line">
            <summary>Gets the line number at which the parse error occurred.</summary>
        </member>
        <member name="P:RT.Json.JsonParseException.Column">
            <summary>Gets the column number at which the parse error occurred.</summary>
        </member>
        <member name="P:RT.Json.JsonParseException.Index">
            <summary>Gets the character index at which the parse error occurred.</summary>
        </member>
        <member name="P:RT.Json.JsonParseException.Snippet">
            <summary>A snippet of the JSON string at which the parse error occurred.</summary>
        </member>
        <member name="T:RT.Json.JsonParserState">
            <summary>Keeps track of the JSON parser state.</summary>
        </member>
        <member name="T:RT.Json.JsonValue">
            <summary>Encapsulates a JSON value (e.g. a boolean, a number, a string, a list, a dictionary, etc.)</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified string into a JSON value.</summary>
            <param name="jsonValue">
                A string containing JSON syntax.</param>
            <param name="allowJavaScript">
                <para>
                    True to allow certain notations that are allowed in JavaScript but not strictly in JSON:</para>
                <list type="bullet">
                    <item><description>
                        allows keys in dictionaries to be unquoted</description></item>
                    <item><description>
                        allows strings to be delimited with single-quotes in addition to double-quotes</description></item></list></param>
            <returns>
                A <see cref="T:RT.Json.JsonValue"/> instance representing the value.</returns>
        </member>
        <member name="M:RT.Json.JsonValue.TryParse(System.String,RT.Json.JsonValue@)">
            <summary>
                Attempts to parse the specified string into a JSON value.</summary>
            <param name="jsonValue">
                A string containing JSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:RT.Json.JsonValue"/> representing the value, or null if unsuccessful. (But note that null is
                also a possible valid value in case of success.)</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.String)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified string.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Boolean)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified boolean.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Boolean})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified nullable boolean.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Double)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified double.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Double})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified nullable double.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Decimal)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified decimal.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Decimal})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified nullable decimal.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Int64)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified long.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Int64})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified nullable long.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.UInt64)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified ulong.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.UInt64})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified nullable ulong.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Int32)~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified int.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Int32})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified nullable int.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.String[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Boolean[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Boolean}[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Double[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Double}[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Decimal[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Decimal}[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Int64[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Int64}[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.UInt64[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.UInt64}[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Int32[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Nullable{System.Int32}[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(RT.Json.JsonValue[])~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified array.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.String})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Boolean})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Nullable{System.Boolean}})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Double})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Nullable{System.Double}})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Decimal})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Nullable{System.Decimal}})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Int64})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Nullable{System.Int64}})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.UInt64})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Nullable{System.UInt64}})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Int32})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{System.Nullable{System.Int32}})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Implicit(System.Collections.Generic.List{RT.Json.JsonValue})~RT.Json.JsonValue">
            <summary>Constructs a <see cref="T:RT.Json.JsonValue"/> from the specified list.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.String">
            <summary>See <see cref="F:RT.Json.StringConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Boolean">
            <summary>See <see cref="F:RT.Json.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Boolean}">
            <summary>See <see cref="F:RT.Json.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Double">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Double}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Decimal">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Decimal}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Int64">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Int64}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.UInt64">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.UInt64}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Int32">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Int32}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.String[]">
            <summary>See <see cref="F:RT.Json.StringConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Boolean[]">
            <summary>See <see cref="F:RT.Json.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Boolean}[]">
            <summary>See <see cref="F:RT.Json.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Double[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Double}[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Decimal[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Decimal}[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Int64[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Int64}[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.UInt64[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.UInt64}[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Int32[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Nullable{System.Int32}[]">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.String}">
            <summary>See <see cref="F:RT.Json.StringConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Boolean}">
            <summary>See <see cref="F:RT.Json.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Nullable{System.Boolean}}">
            <summary>See <see cref="F:RT.Json.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Double}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Nullable{System.Double}}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Decimal}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Nullable{System.Decimal}}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Int64}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Nullable{System.Int64}}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.UInt64}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Nullable{System.UInt64}}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Int32}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.op_Explicit(RT.Json.JsonValue)~System.Collections.Generic.List{System.Nullable{System.Int32}}">
            <summary>See <see cref="F:RT.Json.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="P:RT.Json.JsonValue.Safe">
            <summary>
                Returns an object that allows safe access to the indexers. “Safe” in this context means that the indexers,
                when given an index or key not found in the list or dictionary, do not throw but instead return <see
                cref="P:RT.Json.JsonNoValue.Instance"/> whose getters (such as <see cref="M:RT.Json.JsonValue.GetString(RT.Json.StringConversionOptions)"/>) return null.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetList">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonList"/> if it is a <see cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetListSafe">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonList"/> if it is a <see cref="T:RT.Json.JsonList"/>; otherwise, returns
                null.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getList(System.Boolean)">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonList"/>.</summary>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetDict">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonDict"/> if it is a <see cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDictSafe">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonDict"/> if it is a <see cref="T:RT.Json.JsonDict"/>; otherwise, returns
                null.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getDict(System.Boolean)">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonDict"/>.</summary>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetString(RT.Json.StringConversionOptions)">
            <summary>Converts the current value to a <c>string</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetStringLenient">
            <summary>
                Converts the current value to a <c>string</c> by using the <see cref="F:RT.Json.StringConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetStringSafe(RT.Json.StringConversionOptions)">
            <summary>Converts the current value to a <c>string</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetStringLenientSafe">
            <summary>
                Converts the current value to a <c>string</c> by using the <see cref="F:RT.Json.StringConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetBool(RT.Json.BoolConversionOptions)">
            <summary>Converts the current value to a <c>bool</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetBoolLenient">
            <summary>
                Converts the current value to a <c>bool</c> by using the <see cref="F:RT.Json.BoolConversionOptions.Lenient"/> option.
                Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetBoolSafe(RT.Json.BoolConversionOptions)">
            <summary>Converts the current value to a <c>bool</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetBoolLenientSafe">
            <summary>
                Converts the current value to a <c>bool</c> by using the <see cref="F:RT.Json.BoolConversionOptions.Lenient"/> option.
                Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetDouble(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>double</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDoubleLenient">
            <summary>
                Converts the current value to a <c>double</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDoubleSafe(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>double</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDoubleLenientSafe">
            <summary>
                Converts the current value to a <c>double</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetDecimal(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>decimal</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDecimalLenient">
            <summary>
                Converts the current value to a <c>decimal</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDecimalSafe(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>decimal</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetDecimalLenientSafe">
            <summary>
                Converts the current value to a <c>decimal</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetLong(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>long</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetLongLenient">
            <summary>
                Converts the current value to a <c>long</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetLongSafe(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>long</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetLongLenientSafe">
            <summary>
                Converts the current value to a <c>long</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetULong(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>ulong</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetULongLenient">
            <summary>
                Converts the current value to a <c>ulong</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetULongSafe(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to a <c>ulong</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetULongLenientSafe">
            <summary>
                Converts the current value to a <c>ulong</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getULong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>ulong</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.GetInt(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to an <c>int</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetIntLenient">
            <summary>
                Converts the current value to an <c>int</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetIntSafe(RT.Json.NumericConversionOptions)">
            <summary>Converts the current value to an <c>int</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.GetIntLenientSafe">
            <summary>
                Converts the current value to an <c>int</c> by using the <see cref="F:RT.Json.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonValue.Clear">
            <summary>
                Removes all items from the current value if it is a <see cref="T:RT.Json.JsonList"/> or <see cref="T:RT.Json.JsonDict"/>;
                otherwise, throws.</summary>
        </member>
        <member name="P:RT.Json.JsonValue.Count">
            <summary>
                Returns the number of items in the current value if it is a <see cref="T:RT.Json.JsonList"/> or <see cref="T:RT.Json.JsonDict"/>;
                otherwise, throws.</summary>
        </member>
        <member name="P:RT.Json.JsonValue.IsContainer">
            <summary>
                Returns true if this value is a <see cref="T:RT.Json.JsonDict"/> or a <see cref="T:RT.Json.JsonList"/>; otherwise, returns false.</summary>
        </member>
        <member name="P:RT.Json.JsonValue.Item(System.Int32)">
            <summary>
                Returns the item at the specified <paramref name="index"/> within the current list if it is a <see
                cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Add(RT.Json.JsonValue)">
            <summary>
                Add the specified <paramref name="item"/> to the current list if it is a <see cref="T:RT.Json.JsonList"/>; otherwise,
                throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.AddRange(System.Collections.Generic.IEnumerable{RT.Json.JsonValue})">
            <summary>
                Add the specified <paramref name="items"/> to the current list if it is a <see cref="T:RT.Json.JsonList"/>; otherwise,
                throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Remove(RT.Json.JsonValue)">
            <summary>
                Removes the first instance of the specified <paramref name="item"/> from the current list if it is a <see
                cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
            <returns>
                True if an item was removed; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonValue.Contains(RT.Json.JsonValue)">
            <summary>
                Determines whether the specified <paramref name="item"/> is contained in the current list if it is a <see
                cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Insert(System.Int32,RT.Json.JsonValue)">
            <summary>
                Inserts the specified <paramref name="item"/> at the specified <paramref name="index"/> to the current list if
                it is a <see cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified <paramref name="index"/> from the current list if it is a <see
                cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.IndexOf(RT.Json.JsonValue)">
            <summary>
                Returns the index of the first occurrence of the specified <paramref name="item"/> within the current list if
                it is a <see cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
            <returns>
                The index of the item, or -1 if the item is not in the list.</returns>
        </member>
        <member name="M:RT.Json.JsonValue.CopyTo(RT.Json.JsonValue[],System.Int32)">
            <summary>
                Copies the entire list to a compatible one-dimensional <paramref name="array"/>, starting at the specified
                <paramref name="arrayIndex"/> of the target array, if this is a <see cref="T:RT.Json.JsonList"/>; otherwise, throws.</summary>
            <param name="array">
                The one-dimensional array that is the destination of the elements copied from the list. The array must have
                zero-based indexing.</param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:RT.Json.JsonValue.Item(System.String)">
            <summary>
                Gets or sets the value associated with the specified <paramref name="key"/> if this value is a <see
                cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="P:RT.Json.JsonValue.Keys">
            <summary>Returns the keys contained in the dictionary if this is a <see cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="P:RT.Json.JsonValue.Values">
            <summary>Returns the values contained in the dictionary if this is a <see cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.TryGetValue(System.String,RT.Json.JsonValue@)">
            <summary>
                Attempts to retrieve the value associated with the specified <paramref name="key"/> if this is a <see
                cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
            <param name="key">
                The key for which to try to retrieve the value.</param>
            <param name="value">
                Receives the value associated with the specified <paramref name="key"/>, or null if the key is not in the
                dictionary. (Note that null may also be a valid value in case of success.)</param>
            <returns>
                True if the key was in the dictionary; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonValue.Add(System.String,RT.Json.JsonValue)">
            <summary>
                Adds the specified key/value pair to the dictionary if this is a <see cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
            <param name="key">
                The key to add.</param>
            <param name="value">
                The value to add.</param>
        </member>
        <member name="M:RT.Json.JsonValue.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,RT.Json.JsonValue}})">
            <summary>
                Add the specified <paramref name="items"/> to the current dictionary if it is a <see cref="T:RT.Json.JsonDict"/>;
                otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Remove(System.String)">
            <summary>
                Removes the entry with the specified <paramref name="key"/> from the dictionary if this is a <see
                cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
            <param name="key">
                The key that identifies the entry to remove.</param>
            <returns>
                True if an entry was removed; false if the key wasn’t in the dictionary.</returns>
        </member>
        <member name="M:RT.Json.JsonValue.ContainsKey(System.String)">
            <summary>
                Determines whether an entry with the specified <paramref name="key"/> exists in the dictionary if this is a
                <see cref="T:RT.Json.JsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Equals(System.Object)">
            <summary>
                Determines whether this value is equal to the <paramref name="other"/> value. (See also remarks in the other
                overload, <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.)</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)">
            <summary>
                Determines whether this value is equal to the <paramref name="other"/> value. (See also remarks.)</summary>
            <remarks>
                Two values are only considered equal if they are of the same type (e.g. a <see cref="T:RT.Json.JsonString"/> is never
                equal to a <see cref="T:RT.Json.JsonNumber"/> even if they contain the same number). Lists are equal if they contain the
                same values in the same order. Dictionaries are equal if they contain the same set of key/value pairs.</remarks>
        </member>
        <member name="M:RT.Json.JsonValue.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.ToString(RT.Json.JsonValue)">
            <summary>Converts the JSON value to a JSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.ToString">
            <summary>Converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.ToStringIndented(RT.Json.JsonValue)">
            <summary>Converts the JSON value to a JSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.ToStringIndented">
            <summary>Converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.AppendIndented(RT.Json.JsonValue,System.Text.StringBuilder,System.Int32)">
            <summary>
                Converts the JSON value to a JSON string that parses back to this value and places the string into the
                specified StringBuilder. Supports null values.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>
                Converts the current JSON value to a JSON void that parses back to this value and places the string into the
                specified StringBuilder.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.ToEnumerable(RT.Json.JsonValue)">
            <summary>Lazy-converts the JSON value to a JSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.ToEnumerable">
            <summary>Lazy-converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="M:RT.Json.JsonValue.Fmt(System.String,RT.Json.JsonValue[])">
            <summary>
                Formats JSON values into a piece of JavaScript code and then removes almost all unnecessary whitespace and
                comments. Values are referenced by names; placeholders for these values are written as {{name}}. Placeholders
                are only replaced outside of JavaScript literal strings and regexes. <see cref="T:RT.Json.JsonRaw"/> instances are
                inserted unmodified.</summary>
            <param name="js">
                JavaScript code with placeholders.</param>
            <param name="namevalues">
                Alternating names and associated values, for example ["user", "abc"] specifies one value named "user".</param>
            <example>
                <para>
                    The following code:</para>
                <code>
                    JsonValue.Fmt(@"Foo({{userid}}, {{username}}, {{options}});",
                        "userid", userid,
                        "username", username,
                        "options", null)</code>
                <para>
                    might return the following string:</para>
                <code>
                    Foo(123, "Matthew Stranger", null);</code></example>
            <exception cref="T:System.ArgumentException">
                <paramref name="namevalues"/> has an odd number of values. OR <paramref name="js"/> contains a {{placeholder}}
                whose name is not listed in <paramref name="namevalues"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="js"/> is null. OR <paramref name="namevalues"/> is null.</exception>
        </member>
        <member name="T:RT.Json.JsonList">
            <summary>Encapsulates a list of <see cref="T:RT.Json.JsonValue"/> values.</summary>
        </member>
        <member name="M:RT.Json.JsonList.#ctor">
            <summary>Constructs an empty list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.#ctor(System.Collections.Generic.IEnumerable{RT.Json.JsonValue})">
            <summary>
                Constructs a <see cref="T:RT.Json.JsonList"/> instance containing a copy of the specified collection of <paramref
                name="items"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified JSON as a JSON list. All other types of JSON values result in a <see
                cref="T:RT.Json.JsonParseException"/>.</summary>
            <param name="jsonList">
                JSON syntax to parse.</param>
            <param name="allowJavaScript">
                See <see cref="M:RT.Json.JsonValue.Parse(System.String,System.Boolean)"/>.</param>
        </member>
        <member name="M:RT.Json.JsonList.TryParse(System.String,RT.Json.JsonList@)">
            <summary>
                Attempts to parse the specified string into a JSON list.</summary>
            <param name="jsonNumber">
                A string containing JSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:RT.Json.JsonList"/> representing the list, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonList.getList(System.Boolean)">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonList"/>.</summary>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonList.GetEnumerator">
            <summary>Enumerates the values in this list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Equals(RT.Json.JsonList)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonList.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonList.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonList.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the JSON value to a JSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Clear">
            <summary>Removes all items from the current list.</summary>
        </member>
        <member name="P:RT.Json.JsonList.Count">
            <summary>Returns the number of items in the current list.</summary>
        </member>
        <member name="P:RT.Json.JsonList.IsContainer">
            <summary>Returns true.</summary>
        </member>
        <member name="P:RT.Json.JsonList.Item(System.Int32)">
            <summary>Returns the item at the specified <paramref name="index"/> within the current list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Add(RT.Json.JsonValue)">
            <summary>Adds the specified <paramref name="item"/> to the current list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.AddRange(System.Collections.Generic.IEnumerable{RT.Json.JsonValue})">
            <summary>Adds the specified <paramref name="items"/> to the current list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Remove(RT.Json.JsonValue)">
            <summary>
                Removes the first instance of the specified <paramref name="item"/> from the current list.</summary>
            <returns>
                True if an item was removed; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonList.Contains(RT.Json.JsonValue)">
            <summary>Determines whether the specified <paramref name="item"/> is contained in the current list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.Insert(System.Int32,RT.Json.JsonValue)">
            <summary>
                Inserts the specified <paramref name="item"/> at the specified <paramref name="index"/> to the current list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified <paramref name="index"/> from the current list.</summary>
        </member>
        <member name="M:RT.Json.JsonList.IndexOf(RT.Json.JsonValue)">
            <summary>
                Returns the index of the first occurrence of the specified <paramref name="item"/> within the current list.</summary>
            <returns>
                The index of the item, or -1 if the item is not in the list.</returns>
        </member>
        <member name="M:RT.Json.JsonList.CopyTo(RT.Json.JsonValue[],System.Int32)">
            <summary>
                Copies the entire list to a compatible one-dimensional <paramref name="array"/>, starting at the specified
                <paramref name="arrayIndex"/> of the target array.</summary>
            <param name="array">
                The one-dimensional array that is the destination of the elements copied from the list. The array must have
                zero-based indexing.</param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:RT.Json.JsonDict">
            <summary>Encapsulates a JSON dictionary (a set of key/value pairs).</summary>
        </member>
        <member name="M:RT.Json.JsonDict.#ctor">
            <summary>Constructs an empty dictionary.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,RT.Json.JsonValue}})">
            <summary>Constructs a dictionary containing a copy of the specified collection of key/value pairs.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified JSON as a JSON dictionary. All other types of JSON values result in a <see
                cref="T:RT.Json.JsonParseException"/>.</summary>
            <param name="jsonDict">
                JSON syntax to parse.</param>
            <param name="allowJavaScript">
                See <see cref="M:RT.Json.JsonValue.Parse(System.String,System.Boolean)"/>.</param>
        </member>
        <member name="M:RT.Json.JsonDict.TryParse(System.String,RT.Json.JsonDict@)">
            <summary>
                Attempts to parse the specified string into a JSON dictionary.</summary>
            <param name="jsonDict">
                A string containing JSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:RT.Json.JsonDict"/> representing the dictionary, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonDict.getDict(System.Boolean)">
            <summary>
                Converts the current value to <see cref="T:RT.Json.JsonDict"/>.</summary>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonDict.GetEnumerator">
            <summary>Enumerates the key/value pairs in this dictionary.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.Equals(RT.Json.JsonDict)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the JSON value to a JSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.Clear">
            <summary>Removes all items from the current dictionary.</summary>
        </member>
        <member name="P:RT.Json.JsonDict.Count">
            <summary>Returns the number of items in the current dictionary.</summary>
        </member>
        <member name="P:RT.Json.JsonDict.IsContainer">
            <summary>Returns true.</summary>
        </member>
        <member name="P:RT.Json.JsonDict.Item(System.String)">
            <summary>Gets or sets the value associated with the specified <paramref name="key"/>.</summary>
        </member>
        <member name="P:RT.Json.JsonDict.Keys">
            <summary>Returns the keys contained in the dictionary.</summary>
        </member>
        <member name="P:RT.Json.JsonDict.Values">
            <summary>Returns the values contained in the dictionary.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.TryGetValue(System.String,RT.Json.JsonValue@)">
            <summary>
                Attempts to retrieve the value associated with the specified <paramref name="key"/>.</summary>
            <param name="key">
                The key for which to try to retrieve the value.</param>
            <param name="value">
                Receives the value associated with the specified <paramref name="key"/>, or null if the key is not in the
                dictionary. (Note that null may also be a valid value in case of success.)</param>
            <returns>
                True if the key was in the dictionary; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonDict.Add(System.String,RT.Json.JsonValue)">
            <summary>
                Adds the specified key/value pair to the dictionary.</summary>
            <param name="key">
                The key to add.</param>
            <param name="value">
                The value to add.</param>
        </member>
        <member name="M:RT.Json.JsonDict.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,RT.Json.JsonValue}})">
            <summary>Adds the specified key/value pairs to the dictionary.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.Remove(System.String)">
            <summary>
                Removes the entry with the specified <paramref name="key"/> from the dictionary.</summary>
            <param name="key">
                The key that identifies the entry to remove.</param>
            <returns>
                True if an entry was removed; false if the key wasn’t in the dictionary.</returns>
        </member>
        <member name="M:RT.Json.JsonDict.ContainsKey(System.String)">
            <summary>Determines whether an entry with the specified <paramref name="key"/> exists in the dictionary.</summary>
        </member>
        <member name="M:RT.Json.JsonDict.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Implements functionality that allows the keys in this JSON dictionary to be accessed as dynamic members.</summary>
            <example>
                <code>
                    dynamic dict = JsonDict.Parse(@"{ ""List"": [1, 2, 3] }");
                    Console.WriteLine(dict.List.Count);     // outputs 3</code></example>
        </member>
        <member name="T:RT.Json.JsonString">
            <summary>Encapsulates a string as a JSON value.</summary>
        </member>
        <member name="M:RT.Json.JsonString.#ctor(System.String)">
            <summary>Constructs a <see cref="T:RT.Json.JsonString"/> instance from the specified string.</summary>
        </member>
        <member name="M:RT.Json.JsonString.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified JSON as a JSON string. All other types of JSON values result in a <see
                cref="T:RT.Json.JsonParseException"/>.</summary>
            <param name="jsonString">
                JSON syntax to parse.</param>
            <param name="allowJavaScript">
                See <see cref="M:RT.Json.JsonValue.Parse(System.String,System.Boolean)"/>.</param>
        </member>
        <member name="M:RT.Json.JsonString.TryParse(System.String,RT.Json.JsonString@)">
            <summary>
                Attempts to parse the specified string into a JSON string.</summary>
            <param name="jsonString">
                A string containing JSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:RT.Json.JsonString"/> representing the string, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonString.op_Implicit(RT.Json.JsonString)~System.String">
            <summary>Converts the specified <see cref="T:RT.Json.JsonString"/> value to an ordinary string.</summary>
        </member>
        <member name="M:RT.Json.JsonString.op_Implicit(System.String)~RT.Json.JsonString">
            <summary>Converts the specified ordinary string to a <see cref="T:RT.Json.JsonString"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonString.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonString.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonString.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonString.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonString.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="F:RT.Json.JsonString.False">
            <summary>
                Controls which string values are converted to <c>false</c> when using <see cref="M:RT.Json.JsonValue.GetBool(RT.Json.BoolConversionOptions)"/> with
                <see cref="F:RT.Json.BoolConversionOptions.AllowConversionFromString"/>.</summary>
            <remarks>
                The default is: <c>{ "", "false", "n", "no", "off", "disable", "disabled", "0" }</c>.</remarks>
        </member>
        <member name="F:RT.Json.JsonString.True">
            <summary>
                Controls which string values are converted to <c>true</c> when using <see cref="M:RT.Json.JsonValue.GetBool(RT.Json.BoolConversionOptions)"/> with <see
                cref="F:RT.Json.BoolConversionOptions.AllowConversionFromString"/>.</summary>
            <remarks>
                The default is: <c>{ "true", "y", "yes", "on", "enable", "enabled", "1" }</c>.</remarks>
        </member>
        <member name="F:RT.Json.JsonString.TrueFalseComparer">
            <summary>
                Controls which string equality comparer is used when comparing strings against elements in <see cref="F:RT.Json.JsonString.True"/>
                and <see cref="F:RT.Json.JsonString.False"/> during conversion to <c>bool</c> by <see cref="M:RT.Json.JsonValue.GetBool(RT.Json.BoolConversionOptions)"/>.</summary>
            <remarks>
                The default is <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:RT.Json.JsonString.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonString.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonString.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonString.Equals(RT.Json.JsonString)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonString.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonString.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonString.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="M:RT.Json.JsonString.ToString(RT.Json.JsQuotes)">
            <summary>
                Returns a JavaScript-compatible representation of this string.</summary>
            <param name="quotes">
                Specifies the style of quotes to use around the string.</param>
        </member>
        <member name="T:RT.Json.JsonBool">
            <summary>Encapsulates a boolean value as a <see cref="T:RT.Json.JsonValue"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.#ctor(System.Boolean)">
            <summary>Constructs a <see cref="T:RT.Json.JsonBool"/> from the specified boolean.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified JSON as a JSON boolean. All other types of JSON values result in a <see
                cref="T:RT.Json.JsonParseException"/>.</summary>
            <param name="jsonBool">
                JSON syntax to parse.</param>
            <param name="allowJavaScript">
                See <see cref="M:RT.Json.JsonValue.Parse(System.String,System.Boolean)"/>.</param>
        </member>
        <member name="M:RT.Json.JsonBool.TryParse(System.String,RT.Json.JsonBool@)">
            <summary>
                Attempts to parse the specified string into a JSON boolean.</summary>
            <param name="jsonBool">
                A string containing JSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:RT.Json.JsonBool"/> representing the boolean, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonBool.op_Explicit(RT.Json.JsonBool)~System.Boolean">
            <summary>Converts the specified <see cref="T:RT.Json.JsonBool"/> value to an ordinary boolean.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.op_Implicit(RT.Json.JsonBool)~System.Nullable{System.Boolean}">
            <summary>Converts the specified <see cref="T:RT.Json.JsonBool"/> value to a nullable boolean.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.op_Implicit(System.Boolean)~RT.Json.JsonBool">
            <summary>Converts the specified ordinary boolean to a <see cref="T:RT.Json.JsonBool"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.op_Implicit(System.Nullable{System.Boolean})~RT.Json.JsonBool">
            <summary>Converts the specified nullable boolean to a <see cref="T:RT.Json.JsonBool"/> value or null.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.Equals(RT.Json.JsonBool)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="M:RT.Json.JsonBool.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonBool.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonBool.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonBool.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonBool.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonBool.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="T:RT.Json.JsonNumber">
            <summary>
                Encapsulates a number, which may be a floating-point number or an integer, as a <see cref="T:RT.Json.JsonValue"/>. See
                Remarks.</summary>
            <remarks>
                JSON does not define any specific limits for numeric values. This implementation supports integers in the signed
                and unsigned 64-bit range, as well as IEEE 64-bit doubles (except NaNs and infinities). Conversions to/from
                <c>decimal</c> are exact for integers, but can be approximate for non-integers, depending on the exact value.</remarks>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getULong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>ulong</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSLong.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getULong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>ulong</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSULong.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getULong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>ulong</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.JSDouble.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.#ctor">
            <summary>Creates a new instance of <see cref="T:RT.Json.JsonNumber"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Create(System.Double)">
            <summary>Constructs a <see cref="T:RT.Json.JsonNumber"/> from the specified double-precision floating-point number.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Create(System.Int64)">
            <summary>Constructs a <see cref="T:RT.Json.JsonNumber"/> from the specified 64-bit integer.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Create(System.UInt64)">
            <summary>Constructs a <see cref="T:RT.Json.JsonNumber"/> from the specified unsigned 64-bit integer.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Create(System.Int32)">
            <summary>Constructs a <see cref="T:RT.Json.JsonNumber"/> from the specified 32-bit integer.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Create(System.Decimal)">
            <summary>
                Constructs a <see cref="T:RT.Json.JsonNumber"/> from the specified decimal. This operation is slightly lossy; see
                Remarks on <see cref="T:RT.Json.JsonNumber"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified JSON as a JSON number. All other types of JSON values result in a <see
                cref="T:RT.Json.JsonParseException"/>.</summary>
            <param name="jsonNumber">
                JSON syntax to parse.</param>
            <param name="allowJavaScript">
                See <see cref="M:RT.Json.JsonValue.Parse(System.String,System.Boolean)"/>.</param>
        </member>
        <member name="M:RT.Json.JsonNumber.TryParse(System.String,RT.Json.JsonNumber@)">
            <summary>
                Attempts to parse the specified string into a JSON number.</summary>
            <param name="jsonNumber">
                A string containing JSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:RT.Json.JsonNumber"/> representing the number, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Double)~RT.Json.JsonNumber">
            <summary>Converts the specified double to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Nullable{System.Double})~RT.Json.JsonNumber">
            <summary>Converts the specified nullable double to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.UInt64)~RT.Json.JsonNumber">
            <summary>Converts the specified unsigned 64-bit integer to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Nullable{System.UInt64})~RT.Json.JsonNumber">
            <summary>Converts the specified nullable unsigned 64-bit integer to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Int64)~RT.Json.JsonNumber">
            <summary>Converts the specified 64-bit integer to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Nullable{System.Int64})~RT.Json.JsonNumber">
            <summary>Converts the specified nullable 64-bit integer to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Int32)~RT.Json.JsonNumber">
            <summary>Converts the specified 32-bit integer to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Implicit(System.Nullable{System.Int32})~RT.Json.JsonNumber">
            <summary>Converts the specified nullable 32-bit integer to a <see cref="T:RT.Json.JsonNumber"/> value.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Explicit(System.Decimal)~RT.Json.JsonNumber">
            <summary>
                Converts the specified decimal to a <see cref="T:RT.Json.JsonNumber"/> value. This operator is slightly lossy; see
                Remarks on <see cref="T:RT.Json.JsonNumber"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.op_Explicit(System.Nullable{System.Decimal})~RT.Json.JsonNumber">
            <summary>
                Converts the specified nullable decimal to a <see cref="T:RT.Json.JsonNumber"/> value. This operator is slightly lossy;
                see Remarks on <see cref="T:RT.Json.JsonNumber"/>.</summary>
        </member>
        <member name="P:RT.Json.JsonNumber.RawValue">
            <summary>Returns the value of this number as either a <c>double</c>, a <c>long</c> or a <c>ulong</c>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.Equals(RT.Json.JsonNumber)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.GetHashCode">
            <summary>Overrides <see cref="M:System.Object.GetHashCode"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNumber.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="T:RT.Json.JsonNoValue">
            <summary>
                Represents a non-value when looking up a non-existent index or key in a list or dictionary.</summary>
            <remarks>
                <list type="bullet">
                    <item><description>
                        This is a singleton class; use <see cref="P:RT.Json.JsonNoValue.Instance"/> to access it.</description></item>
                    <item><description>
                        This class overloads the <c>==</c> operator such that comparing with <c>null</c> returns <c>true</c>.</description></item></list></remarks>
        </member>
        <member name="M:RT.Json.JsonNoValue.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNoValue.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNoValue.Equals(RT.Json.JsonNoValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNoValue.op_Equality(RT.Json.JsonNoValue,RT.Json.JsonNoValue)">
            <summary>
                Always returns true.</summary>
            <remarks>
                <para>
                    This operator can only be invoked in three ways:</para>
                <list type="bullet">
                    <item><description>
                        <c>JsonNoValue.Instance == JsonNoValue.Instance</c></description></item>
                    <item><description>
                        <c>JsonNoValue.Instance == null</c></description></item>
                    <item><description>
                        <c>null == JsonNoValue.Instance</c></description></item></list>
                <para>
                    In all three cases, the intended comparison is <c>true</c>.</para></remarks>
        </member>
        <member name="M:RT.Json.JsonNoValue.op_Inequality(RT.Json.JsonNoValue,RT.Json.JsonNoValue)">
            <summary>
                Always returns false.</summary>
            <seealso cref="M:RT.Json.JsonNoValue.op_Equality(RT.Json.JsonNoValue,RT.Json.JsonNoValue)"/>
        </member>
        <member name="M:RT.Json.JsonNoValue.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonNoValue.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonNoValue.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="P:RT.Json.JsonNoValue.Instance">
            <summary>Returns the singleton instance of this type.</summary>
        </member>
        <member name="M:RT.Json.JsonNoValue.getBool(RT.Json.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNoValue.getDecimal(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNoValue.getDouble(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNoValue.getInt(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNoValue.getLong(RT.Json.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="M:RT.Json.JsonNoValue.getString(RT.Json.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If <c>true</c>, returns <c>null</c>; if <c>false</c>,
                throws.</param>
        </member>
        <member name="T:RT.Json.JsonSafeValue">
            <summary>
                Provides safe access to the indexers of a <see cref="T:RT.Json.JsonValue"/>. See <see cref="P:RT.Json.JsonValue.Safe"/> for details.</summary>
        </member>
        <member name="P:RT.Json.JsonSafeValue.Value">
            <summary>Gets the underlying JSON value associated with this object.</summary>
        </member>
        <member name="M:RT.Json.JsonSafeValue.#ctor(RT.Json.JsonValue)">
            <summary>
                Constructor.</summary>
            <param name="value">
                Specifies the underlying JSON value to provide safe access to.</param>
        </member>
        <member name="M:RT.Json.JsonSafeValue.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonSafeValue.Equals(System.Object)">
            <summary>Determines whether the specified instance is equal to this one.</summary>
        </member>
        <member name="M:RT.Json.JsonSafeValue.Equals(RT.Json.JsonSafeValue)">
            <summary>
                Determines whether the specified instance is equal to this one. (See remarks.)</summary>
            <remarks>
                Two instances of <see cref="T:RT.Json.JsonSafeValue"/> are considered equal if the underlying values are equal. See <see
                cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/> for details.</remarks>
        </member>
        <member name="P:RT.Json.JsonSafeValue.Item(System.Int32)">
            <summary>
                If the underlying value is a list, and the specified <paramref name="index"/> exists within the list, returns
                the associated item; otherwise, returns a <see cref="T:RT.Json.JsonNoValue"/> instance.</summary>
        </member>
        <member name="P:RT.Json.JsonSafeValue.Item(System.String)">
            <summary>
                If the underlying value is a dictionary, and the specified <paramref name="key"/> exists within the
                dictionary, gets the value associated with that key; otherwise, returns a <see cref="T:RT.Json.JsonNoValue"/> instance.</summary>
        </member>
        <member name="T:RT.Json.JsonRaw">
            <summary>
                A special type of value which is never produced as a result of parsing valid JSON. Its sole purpose is to allow
                embedding arbitrary JavaScript code using <see cref="M:RT.Json.JsonValue.Fmt(System.String,RT.Json.JsonValue[])"/>.</summary>
        </member>
        <member name="P:RT.Json.JsonRaw.Raw">
            <summary>Gets the raw JSON.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.#ctor(System.String)">
            <summary>Constructs a <see cref="T:RT.Json.JsonRaw"/> instance from the specified raw JSON.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.FromDate(System.DateTime)">
            <summary>Generates a <see cref="T:RT.Json.JsonRaw"/> instance from the specified date/time stamp.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.ToEnumerable">
            <summary>See <see cref="M:RT.Json.JsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.Equals(System.Object)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.Equals(RT.Json.JsonValue)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.Equals(RT.Json.JsonRaw)">
            <summary>See <see cref="M:RT.Json.JsonValue.Equals(RT.Json.JsonValue)"/>.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:RT.Json.JsonRaw.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current JSON value to a JSON string that parses back to this value.</summary>
        </member>
        <member name="T:RT.Json.JsonExtensions">
            <summary>Provides extension methods for the JSON types.</summary>
        </member>
        <member name="M:RT.Json.JsonExtensions.ToJsonDict``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,RT.Json.JsonValue})">
            <summary>
                Creates a <see cref="T:RT.Json.JsonDict"/> from an input collection.</summary>
            <typeparam name="T">
                Type of the input collection.</typeparam>
            <param name="source">
                Input collection.</param>
            <param name="keySelector">
                Function to map each input element to a key for the resulting dictionary.</param>
            <param name="valueSelector">
                Function to map each input element to a value for the resulting dictionary.</param>
            <returns>
                The constructed <see cref="T:RT.Json.JsonDict"/>.</returns>
        </member>
        <member name="M:RT.Json.JsonExtensions.ToJsonList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,RT.Json.JsonValue})">
            <summary>
                Creates a <see cref="T:RT.Json.JsonList"/> from an input collection.</summary>
            <typeparam name="T">
                Type of the input collection.</typeparam>
            <param name="source">
                Input collection.</param>
            <param name="elementSelector">
                Function to map each input element to a <see cref="T:RT.Json.JsonValue"/> for the resulting list.</param>
            <returns>
                The constructed <see cref="T:RT.Json.JsonList"/>.</returns>
        </member>
        <member name="M:RT.Json.JsonExtensions.ToJsonList(System.Collections.Generic.IEnumerable{RT.Json.JsonValue})">
            <summary>
                Creates a <see cref="T:RT.Json.JsonList"/> from an input collection.</summary>
            <param name="source">
                Input collection.</param>
            <returns>
                The constructed <see cref="T:RT.Json.JsonList"/>.</returns>
        </member>
        <member name="M:RT.Json.JsonExtensions.ToJsonList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:RT.Json.JsonList"/> from an input collection.</summary>
            <param name="source">
                Input collection.</param>
            <returns>
                The constructed <see cref="T:RT.Json.JsonList"/>.</returns>
        </member>
        <member name="T:RT.Serialization.ExactConvert">
             <summary>
             <para>
             Provides functionality similar to <see cref="T:System.Convert"/>, but ensures that all conversions are lossless and roundtrippable.
             Whenever a conversion cannot be performed exactly, an <see cref="T:RT.Serialization.ExactConvertException"/> is thrown.
             </para>
             </summary>
             <remarks>
             <code>
             SUPPORTED TYPES
            
             Supported types are classified as follows. The categories are used in defining
             the behaviour of the various conversion types and are vital to understanding what
             to expect of the corner cases.
            
               Integer types:
                   standard - byte, sbyte, short, ushort, int, uint, long, ulong, or any enum type
                   bool - as integer this is defined exactly as 0 or 1
                   char - as integer this is the binary value of the char, identical to the "ushort" type
                   datetime - as integer, this is the number of ticks of the datetime as UTC.
                              The range is DateTime.MinValue.Ticks ... MaxValue.Ticks.
            
               Fractional types:
                   single, double
                   decimal
            
               String type:
                   string
            
               Unsupported type:
                   any other type not listed above
                   null reference (*ALWAYS* behaves exactly the same as if there
                                   was actually an object of an unsupported type)
            
             Definition of terms:
                 "succeed" / "fail" - these terms do not specify the method by which the outcome of
                     a conversion is conveyed. This is a separate aspect discussed later.
            
             ExactConvert only allows a conversion to succeed if a roundtrip conversion would result in
             at most a very small error. The "very small error" only exists when a Fractional
             type is the destination - in this case, ExactConvert picks the nearest
             representable value.
            
             A general trait of ExactConvert is that the rules are defined for whole source/destination type
             pairs. A necessary exception to this principle is conversion from string, due to the arbitrary
             nature of string values.
            
             As a consequence of the above principle, ExactConvert does not allow
             Fractional types to be converted to Integer types.
            
             Something to beware of: some of the built-in conversions use national strings for
             values, e.g. for True/False/Infinity etc. To avoid any issues like programs crashing
             on Spanish computers but not on British ones, the following strings are hard-coded.
             All conversions _from_ strings are case-insensitive.
            
             * True
             * False
             * Inf
             * NaN
             </code>
             </remarks>
        </member>
        <member name="M:RT.Serialization.ExactConvert.#cctor">
            <summary>
            Initialises the internally-used lookup tables for determining what kind
            of type is being dealt with (e.g. is this an unsigned type?)
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.Type)">
            <summary>
            Returns true if the specified type is one of the 8 built-in "true" integer types:
            the signed and unsigned 8, 16, 32 and 64-bit types.
            </summary>
            <param name="type">The type to be tested.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.TypeCode)">
            <summary>
            Returns true if the specified type is one of the 8 built-in "true" integer types:
            the signed and unsigned 8, 16, 32 and 64-bit types.
            </summary>
            <param name="typeCode">The code of the type to be tested - use <see cref="M:RT.Serialization.ExactConvert.GetTypeCode(System.Object)"/>
            to get the code of an object's type.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsTrueIntegerNullableType(System.Type)">
            <summary>
            Returns true if the specified type is a nullable form of one of the 8 built-in "true" integer types:
            the signed and unsigned 8, 16, 32 and 64-bit types.
            </summary>
            <param name="type">The type to be tested.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsIntegerCompatibleType(System.Type)">
            <summary>
            Returns true if the specified type is integer-compatible (in other words, a string of digits can be
            converted to it using <see cref="T:RT.Serialization.ExactConvert"/>). This includes all types that are <see cref="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.Type)"/>
            as well as DateTime, Char and Boolean.
            </summary>
            <param name="type">The type to be tested.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsIntegerCompatibleType(System.TypeCode)">
            <summary>
            Returns true if the specified type is integer-compatible (in other words, a string of digits can be
            converted to it using <see cref="T:RT.Serialization.ExactConvert"/>). This includes all types that are <see cref="M:RT.Serialization.ExactConvert.IsTrueIntegerType(System.Type)"/>
            as well as DateTime, Char and Boolean.
            </summary>
            <param name="typeCode">The code of the type to be tested - use <see cref="M:RT.Serialization.ExactConvert.GetTypeCode(System.Object)"/>
            to get the code of an object's type.</param>
        </member>
        <member name="M:RT.Serialization.ExactConvert.UnboxIntegerToLong(System.Object)">
             <summary>
             C# does not allow a boxed integer type to be unboxed as anything other
             than the true type of the boxed integer. This utility function unboxes the
             integer as the correct type and then casts it to a long, returning the result.
            
             Throws an exception if the object is null or not one of the built-in integer
             types.
            
             Does not support unboxing of a ulong because the cast to long would be lossy
             and misleading. Will throw an exception when given a boxed ulong.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.UnboxIntegerToLong(System.Object,System.TypeCode)">
            <summary>
            A faster version of UnboxIntegerToLong(object) if the TypeCode is
            already provided. Behaviour is undefined if typeCode does not match
            the type of the object passed in.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.GetTypeCode(System.Object)">
             <summary>
             Crutches needed all around... TypeCode.Empty is described as the type code
             for "a null reference". Unfortunately the only way to retrieve a TypeCode
             is from a Type object, which can't represent the type of a null reference
             (well... actually one can't really talk about a _type_ of a _null_ reference
             in C# at all as far as I understand).
            
             Well anyway, wrapping up the rant, this function fills in the spot of a
             function that's clearly missing: Type.GetTypeCode(object), which returns
             TypeCode.Empty if asked to get the type of a null object.
            
             Something at the back of my mind tells me that there's one way of looking at
             this where the behaviour of the existing API would make sense... but really,
             I think this is how it really should have been since it is a lot more useful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsSupportedType(System.Type)">
            <summary>
            Returns true if the specified type is a supported type for converting to other
            types supported by <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.IsSupportedType(System.TypeCode)">
            <summary>
            Returns true if the specified type code is that of a supported type for converting to
            other types supported by <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Byte@)">
             <summary>
             Converts the specified object to a byte.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.UInt16@)">
             <summary>
             Converts the specified object to a ushort.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.UInt32@)">
             <summary>
             Converts the specified object to a uint.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.UInt64@)">
             <summary>
             Converts the specified object to a ulong.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.SByte@)">
             <summary>
             Converts the specified object to an sbyte.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Int16@)">
             <summary>
             Converts the specified object to a short.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Int32@)">
             <summary>
             Converts the specified object to an int.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Int64@)">
             <summary>
             Converts the specified object to a long.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Boolean@)">
             <summary>
             Converts the specified object to a bool.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
            
             If the value is one of the integer types, the exact conversion only succeeds
             if the value is in range, i.e. 0 or 1. If converting from a string, the string
             must be exactly (case-insensitive) equal to "True" or "False", or the conversion
             will fail.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Char@)">
             <summary>
             Converts the specified object to a char.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.DateTime@)">
             <summary>
             Converts the specified object to a DateTime.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
            
             When converting from string, supports a subset of the ISO 8601 formats - for
             more details see <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Single@)">
             <summary>
             Converts the specified object to a float.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Double@)">
             <summary>
             Converts the specified object to a double.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.Decimal@)">
             <summary>
             Converts the specified object to a decimal.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Object,System.String@)">
             <summary>
             Converts the specified object to a string.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to the type's default value
             if the conversion is unsuccessful, which in this case means null (!!!).
            
             Note that the result will only ever be false if the value is one of the
             unsupported types - all supported types can be converted to a string.
             (So can the unsupported ones but it's a different matter. Unsupported types
             are not supported by this method for consistency with the other overloads.)
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.Try(System.Type,System.Object,System.Object@)">
             <summary>
             Converts the specified object to the type <paramref name="toType"/>.
            
             Returns true if successful, or false if the object cannot be converted exactly.
             <paramref name="result"/> is set to null
             if the conversion is unsuccessful.
             </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Boolean@)">
            <summary>
            Converts the specified object to a bool.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Byte@)">
            <summary>
            Converts the specified object to a byte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.SByte@)">
            <summary>
            Converts the specified object to an sbyte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Int16@)">
            <summary>
            Converts the specified object to a short.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.UInt16@)">
            <summary>
            Converts the specified object to a ushort.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Int32@)">
            <summary>
            Converts the specified object to an int.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.UInt32@)">
            <summary>
            Converts the specified object to a uint.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Int64@)">
            <summary>
            Converts the specified object to a long.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.UInt64@)">
            <summary>
            Converts the specified object to a ulong.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Single@)">
            <summary>
            Converts the specified object to a float.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Double@)">
            <summary>
            Converts the specified object to a double.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Decimal@)">
            <summary>
            Converts the specified object to a decimal.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.DateTime@)">
            <summary>
            Converts the specified object to a DateTime.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.Char@)">
            <summary>
            Converts the specified object to a char.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Object,System.String@)">
            <summary>
            Converts the specified object to a string.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToBool(System.Object)">
            <summary>
            Converts the specified object to a bool.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToByte(System.Object)">
            <summary>
            Converts the specified object to a byte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToSByte(System.Object)">
            <summary>
            Converts the specified object to an sbyte.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToShort(System.Object)">
            <summary>
            Converts the specified object to a short.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToUShort(System.Object)">
            <summary>
            Converts the specified object to a ushort.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToInt(System.Object)">
            <summary>
            Converts the specified object to an int.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToUInt(System.Object)">
            <summary>
            Converts the specified object to a uint.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToLong(System.Object)">
            <summary>
            Converts the specified object to a long.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToULong(System.Object)">
            <summary>
            Converts the specified object to a ulong.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToFloat(System.Object)">
            <summary>
            Converts the specified object to a float.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToDouble(System.Object)">
            <summary>
            Converts the specified object to a double.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToDecimal(System.Object)">
            <summary>
            Converts the specified object to a decimal.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToDateTime(System.Object)">
            <summary>
            Converts the specified object to a DateTime.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToChar(System.Object)">
            <summary>
            Converts the specified object to a char.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToString(System.Object)">
            <summary>
            Converts the specified object to a string.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To(System.Type,System.Object)">
            <summary>
            Converts the value to type <paramref name="toType"/>. Throws an
            <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.To``1(System.Object)">
            <summary>
            Converts the value to type <typeparamref name="T"/>. Throws an
            <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="T:RT.Serialization.ExactConvert.ToNullable">
            <summary>
            Contains static methods to perform an exact conversion to a nullable type.
            These methods return null only if the input is null. A failed conversion
            results in an <see cref="T:RT.Serialization.ExactConvertException"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Bool(System.Object)">
            <summary>
            Converts the specified object to a nullable bool.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Byte(System.Object)">
            <summary>
            Converts the specified object to a nullable byte.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.SByte(System.Object)">
            <summary>
            Converts the specified object to an nullable sbyte.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Short(System.Object)">
            <summary>
            Converts the specified object to a nullable short.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.UShort(System.Object)">
            <summary>
            Converts the specified object to a nullable ushort.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Int(System.Object)">
            <summary>
            Converts the specified object to an nullable int.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.UInt(System.Object)">
            <summary>
            Converts the specified object to a nullable uint.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Long(System.Object)">
            <summary>
            Converts the specified object to a nullable long.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.ULong(System.Object)">
            <summary>
            Converts the specified object to a nullable ulong.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Float(System.Object)">
            <summary>
            Converts the specified object to a nullable float.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Double(System.Object)">
            <summary>
            Converts the specified object to a nullable double.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Decimal(System.Object)">
            <summary>
            Converts the specified object to a nullable decimal.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.DateTime(System.Object)">
            <summary>
            Converts the specified object to a nullable DateTime.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.Char(System.Object)">
            <summary>
            Converts the specified object to a nullable char.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvert.ToNullable.String(System.Object)">
            <summary>
            Converts the specified object to a nullable string.
            Returns null if <paramref name="value"/> is null.
            Throws an <see cref="T:RT.Serialization.ExactConvertException"/> if the object cannot be converted exactly.
            </summary>
        </member>
        <member name="T:RT.Serialization.ExactConvertException">
            <summary>
            Represents an exception thrown in the case of conversion failure when using <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="M:RT.Serialization.ExactConvertException.#ctor(System.Object,System.Type)">
            <summary>
            Initialises an exception to represent conversion failure when using <see cref="T:RT.Serialization.ExactConvert"/>.
            </summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.CustomComparerExtensions">
            <summary>Extension methods related to custom comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.CustomComparerExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparison delegate.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IsoDateFormat">
            <summary>Defines one of several common date/time formats which are either ISO-8601 compatible or very slight deviations from it.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.HumanReadable">
            <summary>A delimited, readable format. Known as "extended" in ISO-8601. Example: <c>2007-12-31 21:15</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.Compact">
            <summary>A non-delimited compact format. Known as "basic" in ISO-8601. Example: <c>20071231T2115</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.CompactReadable">
            <summary>A non-delimited compact format with '-' instead of 'T'. Not ISO-8601, but supported by <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>. Example: <c>20071231-2115</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.FilenameReadable">
            <summary>A delimited, readable format without spaces usable in filenames. Not ISO-8601, and not supported by <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/>. Example: <c>2007.12.31-21.15</c>.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDateFormat.Iso8601">
            <summary>The standard ISO-8601 format. Example: <c>2007-12-31T21:15</c>.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IsoDatePrecision">
            <summary>Defines a precision for a date/time stamp.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Days">
            <summary>Day precision: <c>2011-12-31</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Minutes">
            <summary>Minute precision: <c>2011-12-31 18:03</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Seconds">
            <summary>Second precision: <c>2011-12-31 18:03:15</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Milliseconds">
            <summary>Millisecond precision: <c>2011-12-31 18:03:15.123</c></summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.IsoDatePrecision.Full">
            <summary>The full .NET DateTime precision, which is seconds to 7 d.p. (100-nanosecond intervals): <c>2011-12-31 18:03:15.1234567</c></summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.DateTimeExtensions">
            <summary>
            Provides extension methods on the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.Nanosecond(System.DateTime)">
            <summary>
            Inexplicably, the DateTime type does not offer any way of retrieving the full precision
            of the underlying data other than via Ticks or the ToString method. This extension
            method fills in the void.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringCustom(System.DateTime,RT.Util.ExtensionMethods.IsoDatePrecision,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char},System.Boolean)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. The date/time components are always ordered from
            largest (year) to smallest (nanoseconds), and they are always specified as a fixed-width numeric value. The separators between
            the parts can be customized.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="precision">Which date/time components are to be included. The values are truncated, not rounded.</param>
            <param name="charInDate">The character to insert between years, months and days, or null for none.</param>
            <param name="charInTime">The character to insert between hours, minutes and seconds (including timezone offset), or null for none.</param>
            <param name="charBetween">The character to insert between the date and the time part, or null for none (which is never valid in ISO-8601).</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoString(System.DateTime,RT.Util.ExtensionMethods.IsoDatePrecision,RT.Util.ExtensionMethods.IsoDateFormat,System.Boolean)">
            <summary>Returns a string representation of the date/time in an ISO-8601 compatible (or very close) format.</summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="precision">Which date/time components are to be included. The values are truncated, not rounded.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringOptimal(System.DateTime,RT.Util.ExtensionMethods.IsoDateFormat,RT.Util.ExtensionMethods.IsoDatePrecision,RT.Util.ExtensionMethods.IsoDatePrecision,System.Boolean)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. The function will
            omit higher-precision parts whose values are zeroes, as permitted by the standard.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="minPrecision">Minimum precision of the resulting string. The actual precision is determined by what's available in the date/time, bounded by this parameter.</param>
            <param name="maxPrecision">Maximum precision of the resulting string. Any higher-precision parts are truncated.</param>
            <param name="includeTimezone">Specifies whether a suffix indicating date/time kind (local/utc/unspecified) and, for local times, a UTC offset, is appended.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ToIsoStringRoundtrip(System.DateTime,RT.Util.ExtensionMethods.IsoDateFormat,RT.Util.ExtensionMethods.IsoDatePrecision)">
            <summary>
            Returns a string representation of the date/time in an ISO-8601-like format. Use this if the result must be round-trippable
            without losing any information. The function will omit higher-precision parts whose values are zeroes, as permitted by the standard.
            </summary>
            <param name="datetime">Date/time to convert.</param>
            <param name="format">One of the several pre-defined formats to use.</param>
            <param name="minPrecision">Minimum precision of the resulting string. The actual precision is determined by what's available in the date/time, bounded by this parameter.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)">
            <summary>
            <para>Attempts to parse the specified string as an ISO-formatted DateTime. The formats supported are guided by ISO-8601, but do not match
            it exactly. Strings with no timezone information are parsed into DateTimeKind.Unspecified.</para>
            <para>ISO-8601 features not supported: day numbers; week numbers; time offsets; comma for decimal separation.</para>
            <para>Features supported not in ISO-8601: '-' separator for the basic format; date shortening; timezone marker for date-only strings.</para>
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ParseIso(System.String)">
            <summary>Parse the specified string as an ISO-formatted DateTime. See <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/> for more info.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.ParseIsoNullable(System.String)">
            <summary>
            Parse the specified string as an ISO-formatted DateTime. Returns null if the string is null or cannot be parsed.
            See <see cref="M:RT.Util.ExtensionMethods.DateTimeExtensions.TryParseIso(System.String,System.DateTime@)"/> for more info.
            </summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToMilliseconds(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole milliseconds.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToSeconds(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole seconds.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToMinutes(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole minutes.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.DateTimeExtensions.TruncatedToDays(System.DateTime)">
            <summary>Returns a copy of this DateTime, truncated to whole days.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.IEnumerableExtensions">
            <summary>Provides extension methods on the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all pairs of elements from the source collection. For example, the
                input sequence 1, 2 yields the pairs [1,1], [1,2], [2,1], and [2,2].</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllPairs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>Returns an enumeration of objects computed from all pairs of elements from the source collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.UniquePairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an enumeration of tuples containing all unique pairs of distinct elements from the source collection.
                For example, the input sequence 1, 2, 3 yields the pairs [1,2], [1,3] and [2,3] only.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ConsecutivePairs``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
                Returns an enumeration of tuples containing all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is false, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is true.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectConsecutivePairs``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,``0,``1})">
            <summary>
                Enumerates all consecutive pairs of the elements.</summary>
            <param name="source">
                The input enumerable.</param>
            <param name="closed">
                If true, an additional pair containing the last and first element is included. For example, if the source
                collection contains { 1, 2, 3, 4 } then the enumeration contains { (1, 2), (2, 3), (3, 4) } if <paramref
                name="closed"/> is <c>false</c>, and { (1, 2), (2, 3), (3, 4), (4, 1) } if <paramref name="closed"/> is
                <c>true</c>.</param>
            <param name="selector">
                The selector function to run each consecutive pair through.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Sorts the elements of a sequence in ascending order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Splits the specified IEnumerable at every element that satisfies a specified predicate and returns a
                collection containing each sequence of elements in between each pair of such elements. The elements satisfying
                the predicate are not included.</summary>
            <param name="splitWhat">
                The collection to be split.</param>
            <param name="splitWhere">
                A predicate that determines which elements constitute the separators.</param>
            <returns>
                A collection containing the individual pieces taken from the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Adds a single element to the end of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing all the input elements, followed by the specified additional element.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds a single element to the start of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">
                Type of enumerable to return.</typeparam>
            <returns>
                IEnumerable containing the specified additional element, followed by all the input elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0})"/>, but it is much faster if you intend to extract
                only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <returns>
                The given <see cref="T:System.Collections.Generic.IEnumerable`1"/> with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.OrderLazy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                This does the same as <see cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>, but it is much faster if you intend
                to extract only the first few items using <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</summary>
            <param name="source">
                The sequence to be sorted.</param>
            <param name="comparer">
                An instance of <see cref="T:System.Collections.Generic.IComparer`1"/> specifying the comparison to use on the items.</param>
            <returns>
                The given IEnumerable&lt;T&gt; with its elements sorted progressively.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The list of items to permute.</param>
            <returns>
                A collection containing all permutations of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Subsequences``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
                Returns all subsequences of the specified lengths of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="source">
                The sequence of items to generate subsequences of.</param>
            <param name="minLength">
                The minimum length of a subsequence to return. Must be between 0 and the length of the input collection.</param>
            <param name="maxLength">
                The maximum length of a subsequence to return. Must be between 0 and the length of the input collection. If
                <c>null</c> is specified, the size of the input collection is used.</param>
            <returns>
                A collection containing all matching subsequences of the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the first element of a sequence, or <c>null</c> if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the first element of a sequence that satisfies a given predicate, or <c>null</c> if the sequence
                contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                Only consider elements that satisfy this predicate.</param>
            <returns>
                <c>null</c> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref
                name="source"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test
                specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.FirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1},``1)">
            <summary>
                Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the resulting value.</typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="predicate">
                A function to test each element for a condition.</param>
            <param name="resultSelector">
                A function to transform the first element into the result value. Will only be called if the sequence contains
                an element that passes the test specified by <paramref name="predicate"/>.</param>
            <param name="default">
                The default value to return if the sequence contains no elements.</param>
            <returns>
                <paramref name="default"/> if <paramref name="source"/> is empty or if no element passes the test specified by
                <paramref name="predicate"/>; otherwise, the transformed first element in <paramref name="source"/> that
                passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>, starting at the specified <paramref name="startIndex"/>. If no such elements are found,
                returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the last element in this <paramref name="source"/> satisfying the specified <paramref
                name="predicate"/>. If no such elements are found, returns <c>-1</c>.</summary>
            <remarks>
                This method is optimised for the case in which the input sequence is a list or array. In all other cases, the
                collection is evaluated completely before this method returns.</remarks>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Returns the index of the first element in this <paramref name="source"/> that is equal to the specified
                <paramref name="element"/> as determined by the specified <paramref name="comparer"/>. If no such elements are
                found, returns <c>-1</c>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the minimum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The minimum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns the maximum resulting value in a sequence, or a default value if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or a default value
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <param name="default">
                A default value to return in case the sequence is empty.</param>
            <returns>
                The maximum value in the sequence, or the specified default value if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the minimum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the minimum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the minimum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The minimum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the maximum resulting value in a sequence, or <c>null</c> if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a selector on each element of a collection and returns the maximum resulting value, or <c>null</c>
                if the sequence is empty.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">
                The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">
                A sequence of values to determine the maximum value of.</param>
            <param name="selector">
                A transform function to apply to each element.</param>
            <returns>
                The maximum value in the sequence, or <c>null</c> if the sequence is empty.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the smallest value, or
                a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxElementOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
                Returns the first element from the input sequence for which the value selector returns the largest value, or a
                default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MinIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                smallest value, or <c>null</c> if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value.</summary>
            <exception cref="T:System.InvalidOperationException">
                The input collection is empty.</exception>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxIndexOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the index of the first element from the input sequence for which the value selector returns the
                largest value, or a default value if the collection is empty.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
                Enumerates the items of this collection, skipping the last <paramref name="count"/> items. Note that the
                memory usage of this method is proportional to <paramref name="count"/>, but the source collection is only
                enumerated once, and in a lazy fashion. Also, enumerating the first item will take longer than enumerating
                subsequent items.</summary>
            <param name="source">
                Source collection.</param>
            <param name="count">
                Number of items to skip from the end of the collection.</param>
            <param name="throwIfNotEnough">
                If <c>true</c>, the enumerator throws at the end of the enumeration if the source collection contained fewer
                than <paramref name="count"/> elements.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a collection containing only the last <paramref name="count"/> items of the input collection. This
                method enumerates the entire collection to the end once before returning. Note also that the memory usage of
                this method is proportional to <paramref name="count"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Returns true if and only if the input collection begins with the specified collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Queue`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.Stack`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an enumerable collection.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.ToDictionary2``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
                Creates a two-level dictionary from an enumerable collection according to two specified key selector functions
                and optional key comparers.</summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey1">
                The type of the keys returned by <paramref name="key1Selector"/>.</typeparam>
            <typeparam name="TKey2">
                The type of the keys returned by <paramref name="key2Selector"/>.</typeparam>
            <typeparam name="TValue">
                The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">
                Source collection to create a dictionary from.</param>
            <param name="key1Selector">
                A function to extract the first-level key from each element.</param>
            <param name="key2Selector">
                A function to extract the second-level key from each element.</param>
            <param name="elementSelector">
                A transform function to produce a result element value from each element.</param>
            <param name="comparer1">
                An equality comparer to compare the first-level keys.</param>
            <param name="comparer2">
                An equality comparer to compare the second-level keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in the current IDictionary&lt;K, List&lt;V&gt;&gt;. If the specified
                key does not exist in the current IDictionary, a new List is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
                Adds an element to a HashSet&lt;V&gt; stored in the current IDictionary&lt;K, HashSet&lt;V&gt;&gt;. If the
                specified key does not exist in the current IDictionary, a new HashSet is created.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the HashSets.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the HashSet is located in the IDictionary.</param>
            <param name="value">
                Value to add to the HashSet located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1,``2,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Adds an element to a two-level Dictionary&lt;,&gt;. If the specified key does not exist in the outer
                Dictionary, a new Dictionary is created.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <param name="value">
                Value to add to the inner Dictionary.</param>
            <param name="comparer">
                Optional equality comparer to pass into the inner dictionary if a new one is created.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},``0,``1)">
            <summary>
                Removes an element from a two-level Dictionary&lt;,&gt;. If this leaves the inner dictionary empty, the key is
                removed from the outer Dictionary.</summary>
            <typeparam name="K1">
                Type of the key of the outer Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the inner Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the inner Dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the inner Dictionary is located in the outer Dictionary.</param>
            <param name="key2">
                Key at which the value is located in the inner Dictionary.</param>
            <returns>
                A value indicating whether a value was removed or not.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AddSafe``3(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.List{``2}}},``0,``1,``2)">
            <summary>
                Adds an element to a List&lt;V&gt; stored in a two-level Dictionary&lt;,&gt;. If the specified key does not
                exist in the current Dictionary, a new List is created.</summary>
            <typeparam name="K1">
                Type of the key of the first-level Dictionary.</typeparam>
            <typeparam name="K2">
                Type of the key of the second-level Dictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key1">
                Key at which the second-level Dictionary is located in the first-level Dictionary.</param>
            <param name="key2">
                Key at which the list is located in the second-level Dictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Keys.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.IncSafe``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
                Increments an integer in an <see cref="T:System.Collections.Generic.IDictionary`2"/> by the specified amount. If the specified
                key does not exist in the current dictionary, the value <paramref name="amount"/> is inserted.</summary>
            <typeparam name="K">
                Type of the key of the dictionary.</typeparam>
            <param name="dic">
                Dictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the dictionary.</param>
            <param name="amount">
                The amount by which to increment the integer.</param>
            <returns>
                The new value at the specified key.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.RemoveSafe``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                Removes the first occurrence of an element from a List&lt;V&gt; stored in the current IDictionary&lt;K,
                List&lt;V&gt;&gt;. If this leaves the list stored at the specified key empty, the key is removed from the
                IDictionary. If the key is not in the dictionary to begin with, nothing happens.</summary>
            <typeparam name="K">
                Type of the key of the IDictionary.</typeparam>
            <typeparam name="V">
                Type of the values in the Lists.</typeparam>
            <param name="dic">
                IDictionary to operate on.</param>
            <param name="key">
                Key at which the list is located in the IDictionary.</param>
            <param name="value">
                Value to add to the List located at the specified Key.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectIndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Returns a collection of integers containing the indexes at which the elements of the source collection match
                the given predicate.</summary>
            <typeparam name="T">
                The type of elements in the collection.</typeparam>
            <param name="source">
                The source collection whose elements are tested using <paramref name="predicate"/>.</param>
            <param name="predicate">
                The predicate against which the elements of <paramref name="source"/> are tested.</param>
            <returns>
                A collection containing the zero-based indexes of all the matching elements, in increasing order.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectTwo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                Transforms every element of an input collection using two selector functions and returns a collection
                containing all the results.</summary>
            <typeparam name="TSource">
                Type of the elements in the source collection.</typeparam>
            <typeparam name="TResult">
                Type of the results of the selector functions.</typeparam>
            <param name="source">
                Input collection to transform.</param>
            <param name="selector1">
                First selector function.</param>
            <param name="selector2">
                Second selector function.</param>
            <returns>
                A collection containing the transformed elements from both selectors, thus containing twice as many elements
                as the original collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the original collection but with every value cast to their nullable equivalent.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.JoinString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
                Turns all elements in the enumerable to strings and joins them using the specified <paramref
                name="separator"/> and the specified <paramref name="prefix"/> and <paramref name="suffix"/> for each string.</summary>
            <param name="values">
                The sequence of elements to join into a string.</param>
            <param name="separator">
                Optionally, a separator to insert between each element and the next.</param>
            <param name="prefix">
                Optionally, a string to insert in front of each element.</param>
            <param name="suffix">
                Optionally, a string to insert after each element.</param>
            <param name="lastSeparator">
                Optionally, a separator to use between the second-to-last and the last element.</param>
            <example>
                <code>
                    // Returns "[Paris], [London], [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]")
                    
                    // Returns "[Paris], [London] and [Tokyo]"
                    (new[] { "Paris", "London", "Tokyo" }).JoinString(", ", "[", "]", " and ");</code></example>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetween``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Inserts the specified item in between each element in the input collection.</summary>
            <param name="source">
                The input collection.</param>
            <param name="extraElement">
                The element to insert between each consecutive pair of elements in the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { 1, 2, 3
                }.InsertBetween(0) returns { 1, 0, 2, 0, 3 }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.InsertBetweenWithAnd``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
                Inserts the <paramref name="comma"/> item in between each element in the input collection except between the
                second-last and last, where it inserts <paramref name="and"/> instead.</summary>
            <param name="source">
                The input collection.</param>
            <param name="comma">
                The element to insert between each consecutive pair of elements in the input collection except between the
                second-last and last.</param>
            <param name="and">
                The element to insert between the second-last and last element of the input collection.</param>
            <returns>
                A collection containing the original collection with the extra element inserted. For example, new[] { "a",
                "b", "c" }.InsertBetweenWithAnd(", ", " and ") returns { "a", ", ", "b", " and ", "c" }.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>Determines whether this sequence comprises the values provided in the specified order.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.AllSequencesEqual``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Determines whether all the input sequences are equal according to SequenceEquals.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Splits a collection into chunks of equal size. The last chunk may be smaller than <paramref
                name="chunkSize"/>, but all chunks, if any, will contain at least one item.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemEquality">
                An optional function to determine equality of items.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Accumulates consecutive equal elements.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="itemComparer">
                An optional equality comparer to determine item equality by.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutiveBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Accumulates consecutive elements that are equal when processed by a selector.</summary>
            <typeparam name="TItem">
                The type of items in the input sequence.</typeparam>
            <typeparam name="TKey">
                The return type of the <paramref name="selector"/> function.</typeparam>
            <param name="source">
                The input sequence from which to accumulate groups of consecutive elements.</param>
            <param name="selector">
                A function to transform each item into a key which is compared for equality.</param>
            <param name="keyComparer">
                An optional equality comparer for the keys returned by <paramref name="selector"/>.</param>
            <returns>
                A collection containing each sequence of consecutive equal elements.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SelectChain``1(``0,System.Func{``0,``0})">
            <summary>
                Enumerates a chain of objects where each object refers to the next one. The chain starts with the specified
                object and ends when null is encountered.</summary>
            <typeparam name="T">
                Type of object to enumerate.</typeparam>
            <param name="obj">
                Initial object.</param>
            <param name="next">
                A function that returns the next object given the current one. If null is returned, enumeration will end.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.MaxCountElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines which element occurs the most often in the specified input sequence, and how often.</summary>
            <typeparam name="T">
                Type of elements in the input sequence.</typeparam>
            <param name="source">
                Sequence to find most common element in.</param>
            <param name="count">
                Receives the number of times the element occurred.</param>
            <param name="comparer">
                Optional equality comparer to compare elements by.</param>
            <returns>
                Of all elements that occur the most number of times, the one whose last instance occurs soonest in the
                sequence.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Returns the sum of the values in the specified collection, truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.SumUnchecked``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Returns the sum of the values in the specified collection projected by the specified selector function,
                truncated to a 32-bit integer.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.IEnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
                Returns only the non-<c>null</c> elements from the specified collection of nullable values as non-nullable
                values.</summary>
            <typeparam name="T">
                The inner value type.</typeparam>
            <param name="src">
                A collection of nullable values.</param>
            <returns>
                A collection containing only those values that aren’t <c>null</c>.</returns>
        </member>
        <member name="T:RT.Util.ExtensionMethods.ConsecutiveGroup`2">
            <summary>
                Encapsulates information about a group generated by <see
                cref="M:RT.Util.ExtensionMethods.IEnumerableExtensions.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/> and its
                overloads.</summary>
            <typeparam name="TItem">
                Type of the elements in the sequence.</typeparam>
            <typeparam name="TKey">
                Type of the key by which elements were compared.</typeparam>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Index">
            <summary>Index in the original sequence where the group started.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Count">
            <summary>Size of the group.</summary>
        </member>
        <member name="P:RT.Util.ExtensionMethods.ConsecutiveGroup`2.Key">
            <summary>The key by which the items in this group are deemed equal.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.</summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.ConsecutiveGroup`2.ToString">
            <summary>Returns a string that represents this group’s key and its count.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.StringExtensions">
            <summary>Provides extension methods on the <see cref="T:System.String"/> type.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.StringExtensions.CharsBase64Url">
            <summary>Contains the set of characters that are used in base64-url encoding.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
                Concatenates the specified number of repetitions of the current string.</summary>
            <param name="input">
                The string to be repeated.</param>
            <param name="numTimes">
                The number of times to repeat the string.</param>
            <returns>
                A concatenated string containing the original string the specified number of times.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.HtmlEscape(System.String,System.Boolean,System.Boolean)">
            <summary>
                Escapes all necessary characters in the specified string so as to make it usable safely in an HTML or XML
                context.</summary>
            <param name="input">
                The string to apply HTML or XML escaping to.</param>
            <param name="leaveSingleQuotesAlone">
                If <c>true</c>, does not escape single quotes (<c>'</c>, U+0027).</param>
            <param name="leaveDoubleQuotesAlone">
                If <c>true</c>, does not escape single quotes (<c>"</c>, U+0022).</param>
            <returns>
                The specified string with the necessary HTML or XML escaping applied.</returns>
        </member>
        <member name="P:RT.Util.ExtensionMethods.StringExtensions._urlAllowedBytes">
            <summary>Contains the set of ASCII characters allowed in a URL.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)">
            <summary>
                Escapes all necessary characters in the specified string so as to make it usable safely in a URL.</summary>
            <param name="input">
                The string to apply URL escaping to.</param>
            <returns>
                The specified string with the necessary URL escaping applied.</returns>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlUnescape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlUnescape(System.String)">
            <summary>
                Reverses the escaping performed by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)"/> by decoding hexadecimal URL escape sequences into
                their original characters.</summary>
            <param name="input">
                String containing URL escape sequences to be decoded.</param>
            <returns>
                The specified string with all URL escape sequences decoded.</returns>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.UrlEscape(System.String)"/>
        </member>
        <member name="P:RT.Util.ExtensionMethods.StringExtensions._filenameDisallowedCharacters">
            <summary>Contains the set of characters disallowed in file names across all filesystems supported by our software.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersEscape(System.String,System.Boolean)">
            <summary>
                Escapes all characters in this string which cannot form part of a valid filename on at least one supported
                filesystem. The escaping is fully reversible (via <see cref="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersUnescape(System.String)"/>), but does not
                treat characters at specific positions differently (e.g. the "." at the end of the name is not escaped, even
                though it will disappear on a Win32 system).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersUnescape(System.String)">
            <summary>
                Reverses the transformation done by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.FilenameCharactersEscape(System.String,System.Boolean)"/>. This routine will also work on
                filenames that cannot have been generated by the above escape procedure; any "invalid" escapes will be
                preserved as-is.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf8(System.String)">
            <summary>
                Converts the specified string to UTF-8.</summary>
            <param name="input">
                String to convert to UTF-8.</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-8 encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf16(System.String)">
            <summary>
                Converts the specified string to UTF-16.</summary>
            <param name="input">
                String to convert to UTF-16.</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-16 encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ToUtf16BE(System.String)">
            <summary>
                Converts the specified string to UTF-16 (Big Endian).</summary>
            <param name="input">
                String to convert to UTF-16 (Big Endian).</param>
            <returns>
                The specified string, converted to a byte-array containing the UTF-16 (Big Endian) encoding of the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf8(System.Byte[],System.Boolean)">
            <summary>
                Converts the specified raw UTF-8 data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-8 text.</param>
            <param name="removeBom">
                <c>true</c> to remove the first character if it is a UTF-8 BOM.</param>
            <returns>
                A string containing the characters represented by the UTF-8-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf16(System.Byte[])">
            <summary>
                Converts the specified raw UTF-16 (little-endian) data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-16 text.</param>
            <returns>
                A string containing the characters represented by the UTF-16-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromUtf16BE(System.Byte[])">
            <summary>
                Converts the specified raw UTF-16 (big-endian) data to a string.</summary>
            <param name="input">
                Data to interpret as UTF-16BE text.</param>
            <returns>
                A string containing the characters represented by the UTF-16BE-encoded input.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Utf8Length(System.String)">
            <summary>
                Determines the length of the UTF-8 encoding of the specified string.</summary>
            <param name="input">
                String to determined UTF-8 length of.</param>
            <returns>
                The length of the string in bytes when encoded as UTF-8.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Utf16Length(System.String)">
            <summary>
                Determines the length of the UTF-16 encoding of the specified string.</summary>
            <param name="input">
                String to determined UTF-16 length of.</param>
            <returns>
                The length of the string in bytes when encoded as UTF-16.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.JsEscapeNull(System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Returns a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped.
                Returns "null" if the input is null.</summary>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
            <returns>
                JavaScript- or JSON-compatible representation of the input string, or the "null" keyword if the input is null.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.JsEscape(System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Returns a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped.</summary>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
            <returns>
                JavaScript- or JSON-compatible representation of the input string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.AppendJsEscaped(System.Text.StringBuilder,System.String,RT.Util.ExtensionMethods.JsQuotes)">
            <summary>
                Appends a JavaScript- or JSON-compatible representation of the string with the appropriate characters escaped
                into the specified StringBuilder.</summary>
            <param name="sb">
                The StringBuilder to add the result to.</param>
            <param name="input">
                String to escape.</param>
            <param name="quotes">
                Specifies what type of quotes to put around the result, if any.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SqlEscape(System.String)">
            <summary>
                Returns an SQL-compatible representation of the string in single-quotes with the appropriate characters
                escaped.</summary>
            <param name="input">
                String to escape.</param>
            <returns>
                SQL-compatible representation of the input string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlEncode(System.Byte[])">
            <summary>
                Encodes this byte array to base-64-url format, which is safe for use in URLs and does not contain the
                unnecessary padding when the number of bytes is not divisible by 3.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlDecode(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlDecode(System.String)">
            <summary>
                Decodes this string from base-64-url encoding, which is safe for use in URLs and does not contain the
                unnecessary padding when the number of bytes is not divisible by 3, into a byte array.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.Base64UrlEncode(System.Byte[])"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)">
            <summary>
                Escapes all characters in this string whose code is less than 32 or form invalid UTF-16 using C/C#-compatible
                backslash escapes.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralUnescape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralUnescape(System.String)">
            <summary>
                Reverses the escaping done by <see cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)"/>. Note that unescaping is not fully C/C#-compatible
                in the sense that not all strings that are valid string literals in C/C# can be correctly unescaped by this
                procedure.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.CLiteralEscape(System.String)"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns the specified collection, but with leading and trailing empty strings and nulls removed.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.WordWrap(System.String,System.Int32,System.Int32)">
            <summary>
                Word-wraps the current string to a specified width. Supports UNIX-style newlines and indented paragraphs.</summary>
            <remarks>
                <para>
                    The supplied text will be split into "paragraphs" at the newline characters. Every paragraph will begin on
                    a new line in the word-wrapped output, indented by the same number of spaces as in the input. All
                    subsequent lines belonging to that paragraph will also be indented by the same amount.</para>
                <para>
                    All multiple contiguous spaces will be replaced with a single space (except for the indentation).</para></remarks>
            <param name="text">
                Text to be word-wrapped.</param>
            <param name="maxWidth">
                The maximum number of characters permitted on a single line, not counting the end-of-line terminator.</param>
            <param name="hangingIndent">
                The number of spaces to add to each line except the first of each paragraph, thus creating a hanging
                indentation.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UnifyLineEndings(System.String)">
            <summary>Attempts to detect Unix-style and Mac-style line endings and converts them to Windows (\r\n).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.UrlStartsWith(System.String,System.String)">
            <summary>
                Determines whether the specified URL starts with the specified URL path. For example, the URL
                "/directory/file" starts with "/directory" but not with "/dir".</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SubstringSafe(System.String,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32)"/> but does not throw exceptions when the start index falls outside
                the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> but does not throw exceptions when the start index or length
                (or both) fall outside the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.EqualsNoCase(System.String,System.String)">
            <summary>
                Determines whether this string is equal to the other string under the ordinal case-insensitive comparison
                (<see cref="F:System.StringComparison.OrdinalIgnoreCase"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.ContainsNoCase(System.String,System.String)">
            <summary>
                Determines whether this string contains the other string under the ordinal case-insensitive comparison (<see
                cref="F:System.StringComparison.OrdinalIgnoreCase"/>).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.EndsWith(System.String,System.Nullable{System.Char})">
            <summary>
                Returns true if and only if this string ends with the specified character.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.StartsWith(System.String,System.Nullable{System.Char})"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.StartsWith(System.String,System.Nullable{System.Char})">
            <summary>
                Returns true if and only if this string starts with the specified character.</summary>
            <seealso cref="M:RT.Util.ExtensionMethods.StringExtensions.EndsWith(System.String,System.Nullable{System.Char})"/>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.FromHex(System.String)">
            <summary>Reconstructs a byte array from its hexadecimal representation (“hexdump”).</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Unindent(System.String)">
            <summary>
                Removes the overall indentation of the specified string while maintaining the relative indentation of each
                line.</summary>
            <param name="str">
                String to remove indentation from.</param>
            <returns>
                A string in which every line that isn’t all whitespace has had spaces removed from the beginning equal to the
                least amount of spaces at the beginning of any line.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Indent(System.String,System.Int32,System.Boolean)">
            <summary>
                Inserts spaces at the beginning of every line contained within the specified string.</summary>
            <param name="str">
                String to add indentation to.</param>
            <param name="by">
                Number of spaces to add.</param>
            <param name="indentFirstLine">
                If true (default), all lines are indented; otherwise, all lines except the first.</param>
            <returns>
                The indented string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.RemoveCommonIndentation(System.String)">
            <summary>
                Removes spaces from the beginning of every line in such a way that the smallest indentation is reduced to
                zero. Lines which contain only whitespace are not considered in the calculation and may therefore become
                empty.</summary>
            <param name="str">
                The string to transform.</param>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Split(System.String,System.Int32)">
            <summary>
                Splits a string into chunks of equal size. The last chunk may be smaller than <paramref name="chunkSize"/>,
                but all chunks, if any, will contain at least 1 character.</summary>
            <param name="str">
                String to split into chunks.</param>
            <param name="chunkSize">
                Size of each chunk. Must be greater than zero.</param>
            <returns>
                A lazy-evaluated collection containing the chunks from the string.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Returns a new string in which all occurrences of <paramref name="oldValue"/> in the current instance,
                identified using the specified string comparison, are replaced with <paramref name="newValue"/>.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.Split(System.String,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are delimited by elements of a
                specified string array.</summary>
            <param name="str">
                String to be split.</param>
            <param name="separator">
                Strings that delimit the substrings in this string.</param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by one or more strings in
                separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.SplitNoEmpty(System.String,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are delimited by elements of a
                specified string array. Empty items (zero-length strings) are filtered out.</summary>
            <param name="str">
                String to be split.</param>
            <param name="separator">
                Strings that delimit the substrings in this string.</param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by one or more strings in
                separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.IsNumeric(System.String)">
            <summary>Determines whether the string contains only the characters 0-9.</summary>
        </member>
        <member name="M:RT.Util.ExtensionMethods.StringExtensions.AddLine(System.String,System.String)">
            <summary>Adds the specified line to the end of the current string. Returns the line if the current string is null.</summary>
        </member>
        <member name="T:RT.Util.ExtensionMethods.JsQuotes">
            <summary>Selects how the escaped JS string should be put into quotes.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.Single">
            <summary>Put single quotes around the output. Single quotes are allowed in JavaScript only, but not in JSON.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.Double">
            <summary>Put double quotes around the output. Double quotes are allowed both in JavaScript and JSON.</summary>
        </member>
        <member name="F:RT.Util.ExtensionMethods.JsQuotes.None">
            <summary>Do not put any quotes around the output. The escaped output may be surrounded with either type of quotes.</summary>
        </member>
        <member name="T:RT.Util.CustomComparer`1">
            <summary>
                Encapsulates an IComparer&lt;T&gt; that uses a comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared.</typeparam>
        </member>
        <member name="M:RT.Util.CustomComparer`1.Compare(`0,`0)">
            <summary>
                Compares two elements.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomComparer`1.#ctor(System.Comparison{`0})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this comparer.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function. If null, the default comparer is used;
                this comparer will use the IComparable interface if implemented.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Comparison to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomComparer`1.ThenBy(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns a CustomComparer which uses the current comparer first, and if the current comparer says
                the items are equal, further compares items by comparing the results of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.CustomEqualityComparer`1">
            <summary>
                Encapsulates an IEqualityComparer&lt;T&gt; that uses an equality comparison function provided as a delegate.</summary>
            <typeparam name="T">
                The type of elements to be compared for equality.</typeparam>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Compares two elements for equality.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for an element.</summary>
            <remarks>
                This method implements <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>.</remarks>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Constructor.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
            <param name="getHashCode">
                Provides the hash function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Constructor which re-uses the default hash function. Use this overload only if using the objects’ original
                hash function is appropriate for this equality comparison.</summary>
            <param name="comparison">
                Provides the comparison function for this equality comparer.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparer">
                Comparer to use for comparing the results of the selector function.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By``1(System.Func{`0,``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a selector function.</summary>
            <param name="selector">
                Function selecting the actual value to be compared.</param>
            <param name="comparison">
                Function used to compare values for equality. If null, will use IEquatable if implemented, or the object's
                Equals override.</param>
            <param name="getHashCode">
                Function used to compute hash codes. If null, will use IEquatable if implemented, or the object's GetHashCode
                override.</param>
        </member>
        <member name="M:RT.Util.CustomEqualityComparer`1.By(System.Func{`0,System.String},System.Boolean)">
            <summary>
                Creates and returns an equality comparer that compares the equality of objects by comparing the equality of
                the result of a string selector function.</summary>
            <param name="selector">
                Function selecting the actual string value to be compared.</param>
            <param name="ignoreCase">
                If false, an invariant culture string comparison is used. Otherwise, an ordinal no-case comparison (suitable
                for filenames etc).</param>
        </member>
        <member name="T:RT.Util.Text.OffsetToLineCol">
            <summary>
            Encapsulates a class that offers efficient conversion of a string offset into line/column number. The class
            is best suited for multiple lookups on a single fixed string, and is suboptimal for single lookups into many
            different strings. All common newline styles are supported.
            </summary>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.#ctor(System.String)">
            <summary>Constructor: precomputes certain information to enable efficient lookups.</summary>
            <param name="input">The string on which the lookups will be performed.</param>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.GetLine(System.Int32)">
            <summary>Gets the number of the line containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <returns>The number of the line containing the specified character (first line is number 1).</returns>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.GetColumn(System.Int32)">
            <summary>Gets the number of the column containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <returns>The number of the column containing the specified character (first column is number 1).</returns>
        </member>
        <member name="M:RT.Util.Text.OffsetToLineCol.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>Gets the numbers of the line and column containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <param name="line">The number of the line containing the specified character (first line is number 1).</param>
            <param name="column">The number of the column containing the specified character (first column is number 1).</param>
        </member>
    </members>
</doc>
